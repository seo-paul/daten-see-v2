6db6ec300a267a9c81beac35a0cdff10
/**
 * TanStack Query Integration Safety Tests
 * Tests: Cache management, mutation safety, query configuration, error handling
 * 
 * CRITICAL for AI Safety - ensures query state consistency and prevents data corruption
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _reactquery = require("@tanstack/react-query");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _config = require("../config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Test wrapper with QueryClient
const createTestQueryClient = ()=>{
    return new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                staleTime: 0,
                gcTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
};
const createWrapper = (queryClient)=>{
    const TestWrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: children
        });
    TestWrapper.displayName = 'TanStackQueryTestWrapper';
    return TestWrapper;
};
describe('TanStack Query Integration Safety Tests', ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = createTestQueryClient();
        jest.clearAllMocks();
    });
    afterEach(()=>{
        queryClient.clear();
    });
    describe('Query Configuration Safety', ()=>{
        it('should use safe default configurations', ()=>{
            const optimizedClient = (0, _config.createOptimizedQueryClient)();
            const defaultOptions = optimizedClient.getDefaultOptions();
            // Verify retry limits prevent infinite loops
            expect(typeof defaultOptions.queries?.retry).toBe('function');
            const retryFn = defaultOptions.queries?.retry;
            // Should not retry 404s or 401s
            expect(retryFn(1, {
                status: 404
            })).toBe(false);
            expect(retryFn(1, {
                status: 401
            })).toBe(false);
            // Should retry other errors but limit attempts
            expect(retryFn(1, new Error('Network error'))).toBe(true);
            expect(retryFn(3, new Error('Network error'))).toBe(false);
            // Verify stale time configurations are reasonable
            expect(_config.QUERY_CONFIG.CRITICAL.staleTime).toBe(30 * 1000); // 30 seconds
            expect(_config.QUERY_CONFIG.STATIC.staleTime).toBe(15 * 60 * 1000); // 15 minutes
        });
        it('should prevent dangerous query configurations', ()=>{
            // Verify no infinite refetch intervals
            Object.values(_config.QUERY_CONFIG).forEach((config)=>{
                if (config.refetchInterval) {
                    expect(config.refetchInterval).toBeGreaterThan(10000); // Minimum 10 seconds
                }
            });
            // Verify garbage collection times prevent memory leaks
            Object.values(_config.QUERY_CONFIG).forEach((config)=>{
                expect(config.gcTime).toBeGreaterThan(0);
                expect(config.gcTime).toBeLessThan(2 * 60 * 60 * 1000); // Max 2 hours
            });
        });
        it('should validate retry delay prevents overwhelming server', ()=>{
            const optimizedClient = (0, _config.createOptimizedQueryClient)();
            const defaultOptions = optimizedClient.getDefaultOptions();
            const retryDelay = defaultOptions.queries?.retryDelay;
            // Verify exponential backoff with reasonable limits
            expect(retryDelay(0)).toBe(1000); // 1 second
            expect(retryDelay(1)).toBe(2000); // 2 seconds
            expect(retryDelay(2)).toBe(4000); // 4 seconds
            expect(retryDelay(10)).toBe(30000); // Cap at 30 seconds
        });
    });
    describe('Query State Management Safety', ()=>{
        it('should handle basic query lifecycle correctly', async ()=>{
            const mockQueryFn = jest.fn().mockResolvedValue([
                'item1',
                'item2'
            ]);
            const useTestQuery = ()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'test'
                    ],
                    queryFn: mockQueryFn
                });
            const { result } = (0, _react.renderHook)(()=>useTestQuery(), {
                wrapper: createWrapper(queryClient)
            });
            // Initial state should be safe
            expect(result.current.isLoading).toBe(true);
            expect(result.current.data).toBeUndefined();
            expect(result.current.error).toBe(null);
            // Wait for data to load
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            // Verify final state
            expect(result.current.data).toEqual([
                'item1',
                'item2'
            ]);
            expect(mockQueryFn).toHaveBeenCalledTimes(1);
        });
        it('should handle query errors gracefully', async ()=>{
            const mockError = new Error('Test error');
            const mockQueryFn = jest.fn().mockRejectedValue(mockError);
            const useTestQuery = ()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'test-error'
                    ],
                    queryFn: mockQueryFn
                });
            const { result } = (0, _react.renderHook)(()=>useTestQuery(), {
                wrapper: createWrapper(queryClient)
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isError).toBe(true);
            });
            // Verify error state is handled properly
            expect(result.current.error).toEqual(mockError);
            expect(result.current.data).toBeUndefined();
        });
        it('should handle enabled/disabled queries correctly', async ()=>{
            const mockQueryFn = jest.fn().mockResolvedValue('data');
            const useTestQuery = (enabled)=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'test-enabled'
                    ],
                    queryFn: mockQueryFn,
                    enabled
                });
            const { result, rerender } = (0, _react.renderHook)(({ enabled })=>useTestQuery(enabled), {
                wrapper: createWrapper(queryClient),
                initialProps: {
                    enabled: false
                }
            });
            // Query should not execute when disabled
            expect(result.current.isLoading).toBe(false);
            expect(result.current.fetchStatus).toBe('idle');
            expect(mockQueryFn).not.toHaveBeenCalled();
            // Enable query
            rerender({
                enabled: true
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            expect(mockQueryFn).toHaveBeenCalledTimes(1);
        });
    });
    describe('Mutation Safety', ()=>{
        it('should handle mutations with proper error boundaries', async ()=>{
            const mockMutationFn = jest.fn().mockResolvedValue({
                id: 'new-item',
                name: 'Created'
            });
            const useTestMutation = ()=>(0, _reactquery.useMutation)({
                    mutationFn: mockMutationFn
                });
            const { result } = (0, _react.renderHook)(()=>useTestMutation(), {
                wrapper: createWrapper(queryClient)
            });
            // Initial state should be safe
            expect(result.current.isIdle).toBe(true);
            expect(result.current.data).toBeUndefined();
            expect(result.current.error).toBe(null);
            // Execute mutation
            await (0, _react.act)(async ()=>{
                result.current.mutate({
                    name: 'Test Item'
                });
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            expect(result.current.data).toEqual({
                id: 'new-item',
                name: 'Created'
            });
            expect(mockMutationFn).toHaveBeenCalledWith({
                name: 'Test Item'
            });
        });
        it('should handle mutation errors without breaking', async ()=>{
            const mockError = new Error('Mutation failed');
            const mockMutationFn = jest.fn().mockRejectedValue(mockError);
            const useTestMutation = ()=>(0, _reactquery.useMutation)({
                    mutationFn: mockMutationFn
                });
            const { result } = (0, _react.renderHook)(()=>useTestMutation(), {
                wrapper: createWrapper(queryClient)
            });
            await (0, _react.act)(async ()=>{
                result.current.mutate({
                    name: 'Test Item'
                });
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isError).toBe(true);
            });
            expect(result.current.error).toEqual(mockError);
            expect(result.current.data).toBeUndefined();
        });
    });
    describe('Cache Management Safety', ()=>{
        it('should prevent memory leaks through proper cache cleanup', async ()=>{
            const initialQueries = queryClient.getQueryCache().getAll().length;
            // Create query
            const { result } = (0, _react.renderHook)(()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'memory-test'
                    ],
                    queryFn: ()=>Promise.resolve('data')
                }), {
                wrapper: createWrapper(queryClient)
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            const queriesAfterCreation = queryClient.getQueryCache().getAll().length;
            expect(queriesAfterCreation).toBeGreaterThan(initialQueries);
            // Clear cache and verify cleanup
            queryClient.clear();
            const queriesAfterCleanup = queryClient.getQueryCache().getAll().length;
            expect(queriesAfterCleanup).toBe(0);
        });
        it('should handle cache invalidation safely', async ()=>{
            const mockQueryFn = jest.fn().mockResolvedValue([
                'item1',
                'item2'
            ]);
            const { result } = (0, _react.renderHook)(()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'invalidation-test'
                    ],
                    queryFn: mockQueryFn
                }), {
                wrapper: createWrapper(queryClient)
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            expect(mockQueryFn).toHaveBeenCalledTimes(1);
            // Invalidate query
            await (0, _react.act)(async ()=>{
                queryClient.invalidateQueries({
                    queryKey: [
                        'invalidation-test'
                    ]
                });
            });
            await (0, _react.waitFor)(()=>{
                expect(mockQueryFn).toHaveBeenCalledTimes(2);
            });
        });
    });
    describe('Query Key Safety', ()=>{
        it('should use consistent query keys', ()=>{
            // Verify query keys are deterministic
            const dashboardId = 'test-id';
            const listKey1 = _config.queryKeys.dashboardsList();
            const listKey2 = _config.queryKeys.dashboardsList();
            expect(listKey1).toEqual(listKey2);
            const detailKey1 = _config.queryKeys.dashboard(dashboardId);
            const detailKey2 = _config.queryKeys.dashboard(dashboardId);
            expect(detailKey1).toEqual(detailKey2);
            // Verify different IDs create different keys
            const detailKey3 = _config.queryKeys.dashboard('different-id');
            expect(detailKey1).not.toEqual(detailKey3);
        });
        it('should prevent query key conflicts', ()=>{
            // Verify query key structure prevents conflicts
            const authKey = _config.queryKeys.authUser();
            const dashboardKey = _config.queryKeys.dashboardsList();
            expect(authKey[0]).not.toBe(dashboardKey[0]);
            expect(authKey.join('-')).not.toBe(dashboardKey.join('-'));
        });
    });
    describe('Error Recovery Safety', ()=>{
        it('should recover from network errors', async ()=>{
            let shouldFail = true;
            const mockQueryFn = jest.fn().mockImplementation(()=>{
                if (shouldFail) {
                    return Promise.reject(new Error('Network error'));
                }
                return Promise.resolve('success');
            });
            const { result } = (0, _react.renderHook)(()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'recovery-test'
                    ],
                    queryFn: mockQueryFn
                }), {
                wrapper: createWrapper(queryClient)
            });
            // Wait for initial error
            await (0, _react.waitFor)(()=>{
                expect(result.current.isError).toBe(true);
            });
            // Fix the "network" and retry
            shouldFail = false;
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            expect(result.current.data).toBe('success');
        });
        it('should maintain state consistency during errors', async ()=>{
            const mockQueryFn = jest.fn().mockResolvedValueOnce('initial-data').mockRejectedValueOnce(new Error('Update failed'));
            const { result } = (0, _react.renderHook)(()=>(0, _reactquery.useQuery)({
                    queryKey: [
                        'consistency-test'
                    ],
                    queryFn: mockQueryFn
                }), {
                wrapper: createWrapper(queryClient)
            });
            // Wait for initial success
            await (0, _react.waitFor)(()=>{
                expect(result.current.isSuccess).toBe(true);
            });
            const initialData = result.current.data;
            // Trigger refetch that will fail
            await (0, _react.act)(async ()=>{
                result.current.refetch();
            });
            await (0, _react.waitFor)(()=>{
                expect(result.current.isError).toBe(true);
            });
            // Previous data should still be available
            expect(result.current.data).toBe(initialData);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,