{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/hooks/__tests__/useDashboards.test.tsx"],"sourcesContent":["import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { renderHook, waitFor } from '@testing-library/react';\nimport React from 'react';\n\nimport { dashboardApi } from '@/lib/api/dashboard';\nimport type { Dashboard, CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\nimport { \n  useDashboards, \n  useDashboard, \n  useCreateDashboard, \n  useUpdateDashboard, \n  useDeleteDashboard \n} from '../useDashboards';\n\n// Mock dashboard API\njest.mock('@/lib/api/dashboard', () => ({\n  dashboardApi: {\n    getDashboards: jest.fn(),\n    getDashboard: jest.fn(),\n    createDashboard: jest.fn(),\n    updateDashboard: jest.fn(),\n    deleteDashboard: jest.fn(),\n  },\n}));\n\n// Mock query options\njest.mock('@/lib/tanstack-query/config', () => ({\n  createQueryOptions: {\n    dashboard: jest.fn(() => ({\n      staleTime: 5 * 60 * 1000,\n      retry: 1,\n    })),\n  },\n}));\n\n// Mock query keys\njest.mock('@/types', () => ({\n  ...jest.requireActual('@/types'),\n  apiQueryKeys: {\n    dashboards: ['dashboards'],\n    dashboard: (id: string) => ['dashboard', id],\n  },\n}));\n\ndescribe('useDashboards Hook Tests - Critical Business Logic (90%+ Coverage)', () => {\n  let queryClient: QueryClient;\n\n  // Test data\n  const mockDashboards: Dashboard[] = [\n    {\n      id: 'dash-1',\n      name: 'Sales Dashboard',\n      description: 'Sales analytics dashboard',\n      isPublic: false,\n      createdAt: new Date('2024-01-01T00:00:00.000Z'),\n      updatedAt: new Date('2024-01-01T00:00:00.000Z'),\n      widgets: [],\n      settings: {\n        backgroundColor: '#ffffff',\n        gridSize: 10,\n        autoRefresh: false,\n        refreshInterval: 60\n      }\n    },\n    {\n      id: 'dash-2',\n      name: 'Marketing Dashboard',\n      description: 'Marketing metrics dashboard',\n      isPublic: true,\n      createdAt: new Date('2024-01-02T00:00:00.000Z'),\n      updatedAt: new Date('2024-01-02T00:00:00.000Z'),\n      widgets: [],\n      settings: {\n        backgroundColor: '#ffffff',\n        gridSize: 10,\n        autoRefresh: false,\n        refreshInterval: 60\n      }\n    },\n  ];\n\n  const mockDashboard = mockDashboards[0];\n\n  // Wrapper for TanStack Query\n  const createWrapper = () => ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n\n  beforeEach(() => {\n    // Fresh QueryClient for each test\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    queryClient.clear();\n  });\n\n  describe('useDashboards - Fetch All Dashboards', () => {\n    it('should fetch dashboards successfully', async () => {\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue(mockDashboards);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      expect(result.current.isLoading).toBe(true);\n      expect(result.current.data).toBeUndefined();\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toEqual(mockDashboards);\n      expect(result.current.isLoading).toBe(false);\n      expect(dashboardApi.getDashboards).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle fetch dashboards error', async () => {\n      const error = new Error('Failed to fetch dashboards');\n      (dashboardApi.getDashboards as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      }, { timeout: 2000 });\n\n      expect(result.current.error).toEqual(error);\n      expect(result.current.data).toBeUndefined();\n    });\n\n    it('should handle empty dashboards list', async () => {\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue([]);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toEqual([]);\n    });\n\n    it('should use correct query key and options', async () => {\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue(mockDashboards);\n\n      renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(dashboardApi.getDashboards).toHaveBeenCalled();\n      });\n\n      // Verify query is cached with correct key\n      const cachedData = queryClient.getQueryData(['dashboards']);\n      expect(cachedData).toEqual(mockDashboards);\n    });\n  });\n\n  describe('useDashboard - Fetch Single Dashboard', () => {\n    it('should fetch single dashboard successfully', async () => {\n      (dashboardApi.getDashboard as jest.Mock).mockResolvedValue(mockDashboard);\n\n      const { result } = renderHook(() => useDashboard('dash-1'), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toEqual(mockDashboard);\n      expect(dashboardApi.getDashboard).toHaveBeenCalledWith('dash-1');\n    });\n\n    it('should not fetch when dashboardId is empty', () => {\n      const { result } = renderHook(() => useDashboard(''), {\n        wrapper: createWrapper(),\n      });\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.data).toBeUndefined();\n      expect(dashboardApi.getDashboard).not.toHaveBeenCalled();\n    });\n\n    it('should handle fetch single dashboard error', async () => {\n      const error = new Error('Dashboard not found');\n      (dashboardApi.getDashboard as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useDashboard('dash-1'), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      }, { timeout: 2000 });\n\n      expect(result.current.error).toEqual(error);\n    });\n\n    it('should refetch when dashboardId changes', async () => {\n      (dashboardApi.getDashboard as jest.Mock).mockResolvedValue(mockDashboard);\n\n      const { result, rerender } = renderHook(\n        ({ id }: { id: string }) => useDashboard(id),\n        {\n          wrapper: createWrapper(),\n          initialProps: { id: 'dash-1' },\n        }\n      );\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(dashboardApi.getDashboard).toHaveBeenCalledWith('dash-1');\n\n      // Change ID\n      rerender({ id: 'dash-2' });\n\n      await waitFor(() => {\n        expect(dashboardApi.getDashboard).toHaveBeenCalledWith('dash-2');\n      });\n\n      expect(dashboardApi.getDashboard).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('useCreateDashboard - Create Operations', () => {\n    it('should create dashboard successfully', async () => {\n      const newDashboard = { ...mockDashboard, id: 'dash-new' };\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'New dashboard description',\n        isPublic: false,\n      };\n\n      (dashboardApi.createDashboard as jest.Mock).mockResolvedValue(newDashboard);\n\n      const { result } = renderHook(() => useCreateDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      expect(result.current.isIdle).toBe(true);\n\n      // Trigger mutation\n      result.current.mutate(createRequest);\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toEqual(newDashboard);\n      expect(dashboardApi.createDashboard).toHaveBeenCalledWith(createRequest);\n    });\n\n    it('should handle create dashboard error', async () => {\n      const error = new Error('Failed to create dashboard');\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'New dashboard description',\n        isPublic: false,\n      };\n\n      (dashboardApi.createDashboard as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useCreateDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate(createRequest);\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      });\n\n      expect(result.current.error).toEqual(error);\n    });\n\n    it('should invalidate dashboards cache on success', async () => {\n      const newDashboard = { ...mockDashboard, id: 'dash-new' };\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'New dashboard description',\n        isPublic: false,\n      };\n\n      (dashboardApi.createDashboard as jest.Mock).mockResolvedValue(newDashboard);\n\n      // Pre-populate cache\n      queryClient.setQueryData(['dashboards'], mockDashboards);\n\n      const { result } = renderHook(() => useCreateDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      const invalidateSpy = jest.spyOn(queryClient, 'invalidateQueries');\n\n      result.current.mutate(createRequest);\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(invalidateSpy).toHaveBeenCalledWith({ queryKey: ['dashboards'] });\n    });\n  });\n\n  describe('useUpdateDashboard - Update Operations', () => {\n    it('should update dashboard successfully', async () => {\n      const updatedDashboard = { ...mockDashboard, name: 'Updated Dashboard' };\n      const updateRequest: UpdateDashboardRequest = {\n        id: 'dash-1',\n        name: 'Updated Dashboard',\n        description: 'Updated description',\n        isPublic: true,\n      };\n\n      (dashboardApi.updateDashboard as jest.Mock).mockResolvedValue(updatedDashboard);\n\n      const { result } = renderHook(() => useUpdateDashboard('dash-1'), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate(updateRequest);\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toEqual(updatedDashboard);\n      expect(dashboardApi.updateDashboard).toHaveBeenCalledWith('dash-1', updateRequest);\n    });\n\n    it('should handle update dashboard error', async () => {\n      const error = new Error('Failed to update dashboard');\n      const updateRequest: UpdateDashboardRequest = {\n        id: 'dash-1',\n        name: 'Updated Dashboard',\n        description: 'Updated description',\n        isPublic: true,\n      };\n\n      (dashboardApi.updateDashboard as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useUpdateDashboard('dash-1'), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate(updateRequest);\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      });\n\n      expect(result.current.error).toEqual(error);\n    });\n\n    it('should invalidate both specific and list caches on success', async () => {\n      const updatedDashboard = { ...mockDashboard, name: 'Updated Dashboard' };\n      const updateRequest: UpdateDashboardRequest = {\n        id: 'dash-1',\n        name: 'Updated Dashboard',\n        description: 'Updated description',\n        isPublic: true,\n      };\n\n      (dashboardApi.updateDashboard as jest.Mock).mockResolvedValue(updatedDashboard);\n\n      const { result } = renderHook(() => useUpdateDashboard('dash-1'), {\n        wrapper: createWrapper(),\n      });\n\n      const invalidateSpy = jest.spyOn(queryClient, 'invalidateQueries');\n\n      result.current.mutate(updateRequest);\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(invalidateSpy).toHaveBeenCalledWith({ queryKey: ['dashboard', 'dash-1'] });\n      expect(invalidateSpy).toHaveBeenCalledWith({ queryKey: ['dashboards'] });\n    });\n  });\n\n  describe('useDeleteDashboard - Delete Operations', () => {\n    it('should delete dashboard successfully', async () => {\n      (dashboardApi.deleteDashboard as jest.Mock).mockResolvedValue(undefined);\n\n      const { result } = renderHook(() => useDeleteDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate('dash-1');\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(dashboardApi.deleteDashboard).toHaveBeenCalledWith('dash-1');\n    });\n\n    it('should handle delete dashboard error', async () => {\n      const error = new Error('Failed to delete dashboard');\n      (dashboardApi.deleteDashboard as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useDeleteDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate('dash-1');\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      });\n\n      expect(result.current.error).toEqual(error);\n    });\n\n    it('should invalidate dashboards cache on success', async () => {\n      (dashboardApi.deleteDashboard as jest.Mock).mockResolvedValue(undefined);\n\n      const { result } = renderHook(() => useDeleteDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      const invalidateSpy = jest.spyOn(queryClient, 'invalidateQueries');\n\n      result.current.mutate('dash-1');\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(invalidateSpy).toHaveBeenCalledWith({ queryKey: ['dashboards'] });\n    });\n\n    it('should handle delete non-existent dashboard', async () => {\n      const error = new Error('Dashboard not found');\n      (dashboardApi.deleteDashboard as jest.Mock).mockRejectedValue(error);\n\n      const { result } = renderHook(() => useDeleteDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      result.current.mutate('non-existent-id');\n\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      });\n\n      expect(result.current.error).toEqual(error);\n    });\n  });\n\n  describe('Cache Management & Performance', () => {\n    it('should properly cache dashboard queries', async () => {\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue(mockDashboards);\n\n      // First render\n      const { result: result1 } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result1.current.isSuccess).toBe(true);\n      });\n\n      // Second render should use cache\n      const { result: result2 } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      expect(result2.current.data).toEqual(mockDashboards);\n      expect(result2.current.isLoading).toBe(false);\n      \n      // API should only be called once due to caching\n      expect(dashboardApi.getDashboards).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle concurrent mutations properly', async () => {\n      const createRequest1: CreateDashboardRequest = {\n        name: 'Dashboard 1',\n        description: 'Description 1',\n        isPublic: false,\n      };\n      const createRequest2: CreateDashboardRequest = {\n        name: 'Dashboard 2',\n        description: 'Description 2',\n        isPublic: true,\n      };\n\n      (dashboardApi.createDashboard as jest.Mock)\n        .mockResolvedValueOnce({ ...mockDashboard, id: 'dash-new-1' })\n        .mockResolvedValueOnce({ ...mockDashboard, id: 'dash-new-2' });\n\n      const { result: result1 } = renderHook(() => useCreateDashboard(), {\n        wrapper: createWrapper(),\n      });\n      const { result: result2 } = renderHook(() => useCreateDashboard(), {\n        wrapper: createWrapper(),\n      });\n\n      // Trigger both mutations\n      result1.current.mutate(createRequest1);\n      result2.current.mutate(createRequest2);\n\n      await waitFor(() => {\n        expect(result1.current.isSuccess).toBe(true);\n        expect(result2.current.isSuccess).toBe(true);\n      });\n\n      expect(dashboardApi.createDashboard).toHaveBeenCalledTimes(2);\n      expect(dashboardApi.createDashboard).toHaveBeenCalledWith(createRequest1);\n      expect(dashboardApi.createDashboard).toHaveBeenCalledWith(createRequest2);\n    });\n  });\n\n  describe('Edge Cases & Error Scenarios', () => {\n    it('should handle network timeouts gracefully', async () => {\n      const timeoutError = new Error('Network timeout');\n      (dashboardApi.getDashboards as jest.Mock).mockRejectedValue(timeoutError);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      // First wait for loading to complete\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      }, { timeout: 3000 });\n\n      // Then check error state\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      }, { timeout: 3000 });\n\n      expect(result.current.error).toEqual(timeoutError);\n      expect(result.current.failureCount).toBeGreaterThan(0);\n    });\n\n    it('should handle malformed API responses', async () => {\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue(null);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toBeNull();\n    });\n\n    it('should handle very large dashboard lists', async () => {\n      const largeDashboardList = Array.from({ length: 1000 }, (_, i) => ({\n        ...mockDashboard,\n        id: `dash-${i}`,\n        name: `Dashboard ${i}`,\n      }));\n\n      (dashboardApi.getDashboards as jest.Mock).mockResolvedValue(largeDashboardList);\n\n      const { result } = renderHook(() => useDashboards(), {\n        wrapper: createWrapper(),\n      });\n\n      await waitFor(() => {\n        expect(result.current.isSuccess).toBe(true);\n      });\n\n      expect(result.current.data).toHaveLength(1000);\n      expect(result.current.data?.[999]?.name).toBe('Dashboard 999');\n    });\n  });\n});"],"names":["jest","mock","dashboardApi","getDashboards","fn","getDashboard","createDashboard","updateDashboard","deleteDashboard","createQueryOptions","dashboard","staleTime","retry","requireActual","apiQueryKeys","dashboards","id","describe","queryClient","mockDashboards","name","description","isPublic","createdAt","Date","updatedAt","widgets","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","mockDashboard","createWrapper","children","QueryClientProvider","client","beforeEach","QueryClient","defaultOptions","queries","mutations","clearAllMocks","afterEach","clear","it","mockResolvedValue","result","renderHook","useDashboards","wrapper","expect","current","isLoading","toBe","data","toBeUndefined","waitFor","isSuccess","toEqual","toHaveBeenCalledTimes","error","Error","mockRejectedValue","isError","timeout","toHaveBeenCalled","cachedData","getQueryData","useDashboard","toHaveBeenCalledWith","not","rerender","initialProps","newDashboard","createRequest","useCreateDashboard","isIdle","mutate","setQueryData","invalidateSpy","spyOn","queryKey","updatedDashboard","updateRequest","useUpdateDashboard","undefined","useDeleteDashboard","result1","result2","createRequest1","createRequest2","mockResolvedValueOnce","timeoutError","failureCount","toBeGreaterThan","toBeNull","largeDashboardList","Array","from","length","_","i","toHaveLength"],"mappings":"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"}