5a23fd0e0ae4bd8dfa40c9e17ad8199b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useLoginMutation () {
        return useLoginMutation;
    },
    get useLogoutMutation () {
        return useLogoutMutation;
    },
    get useMockLoginMutation () {
        return useMockLoginMutation;
    },
    get useMockRefreshTokenMutation () {
        return useMockRefreshTokenMutation;
    },
    get useRefreshTokenMutation () {
        return useRefreshTokenMutation;
    }
});
const _reactquery = require("@tanstack/react-query");
const _client = require("../../lib/api/client");
const _token = require("../../lib/auth/token");
const _loggerconfig = require("../../lib/monitoring/logger.config");
const _apitypes = require("../../types/api.types");
function useLoginMutation() {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async (loginData)=>{
            _loggerconfig.appLogger.info('Login mutation started', {
                email: loginData.email
            });
            // API call to login endpoint
            const response = await _client.apiClient.post('/auth/login', loginData);
            // Validate response with Zod
            const validatedResponse = _apitypes.LoginResponseSchema.parse(response);
            _loggerconfig.appLogger.info('Login API call successful', {
                userId: validatedResponse.data.user.id,
                email: validatedResponse.data.user.email
            });
            return validatedResponse;
        },
        onSuccess: (data)=>{
            // Store tokens securely
            _token.tokenManager.setTokens({
                token: data.data.token,
                refreshToken: data.data.refreshToken,
                expiresAt: data.data.expiresAt
            });
            // Update API client with new token
            _token.tokenManager.updateApiClientToken();
            // Invalidate relevant queries
            queryClient.invalidateQueries({
                queryKey: [
                    'user',
                    'profile'
                ]
            });
            queryClient.invalidateQueries({
                queryKey: [
                    'dashboards'
                ]
            });
            _loggerconfig.appLogger.info('Login mutation completed successfully', {
                userId: data.data.user.id
            });
        },
        onError: (error)=>{
            _loggerconfig.appLogger.error('Login mutation failed', {
                error: error instanceof Error ? error.message : 'Unknown error',
                stack: error instanceof Error ? error.stack : undefined
            });
            // Clear any partial token data
            _token.tokenManager.clearTokens();
        }
    });
}
function useLogoutMutation() {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async ()=>{
            _loggerconfig.appLogger.info('Logout mutation started');
            const refreshToken = _token.tokenManager.getRefreshToken();
            if (refreshToken) {
                try {
                    // Notify server about logout (optional - for token blacklisting)
                    await _client.apiClient.post('/auth/logout', {
                        refreshToken
                    });
                    _loggerconfig.appLogger.debug('Server logout notification sent');
                } catch (error) {
                    // Don't fail logout if server call fails
                    _loggerconfig.appLogger.warn('Server logout notification failed', {
                        error: error instanceof Error ? error.message : 'Unknown error'
                    });
                }
            }
        },
        onSuccess: ()=>{
            // Clear tokens
            _token.tokenManager.clearTokens();
            // Clear all cached queries
            queryClient.clear();
            _loggerconfig.appLogger.info('Logout mutation completed successfully');
        },
        onError: (error)=>{
            _loggerconfig.appLogger.error('Logout mutation failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            // Force clear tokens even if server call failed
            _token.tokenManager.clearTokens();
            queryClient.clear();
        },
        onSettled: ()=>{
        // Always redirect to login or home page after logout
        // This will be handled by the component using this hook
        }
    });
}
function useRefreshTokenMutation() {
    return (0, _reactquery.useMutation)({
        mutationFn: async ()=>{
            const refreshToken = _token.tokenManager.getRefreshToken();
            if (!refreshToken) {
                throw new Error('No refresh token available');
            }
            _loggerconfig.appLogger.debug('Refresh token mutation started');
            const requestData = {
                refreshToken
            };
            // API call to refresh endpoint
            const response = await _client.apiClient.post('/auth/refresh', requestData);
            // Validate response with Zod
            const validatedResponse = _apitypes.RefreshTokenResponseSchema.parse(response);
            _loggerconfig.appLogger.debug('Refresh token API call successful');
            return validatedResponse;
        },
        onSuccess: (data)=>{
            // Update stored token with new access token
            const currentTokenInfo = _token.tokenManager.getTokenInfo();
            if (currentTokenInfo.refreshToken) {
                _token.tokenManager.setTokens({
                    token: data.data.token,
                    refreshToken: currentTokenInfo.refreshToken,
                    expiresAt: data.data.expiresAt
                });
                // Update API client
                _token.tokenManager.updateApiClientToken();
                _loggerconfig.appLogger.info('Token refresh completed successfully');
            } else {
                throw new Error('No refresh token to preserve');
            }
        },
        onError: (error)=>{
            _loggerconfig.appLogger.error('Refresh token mutation failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            // Clear tokens on refresh failure (user needs to login again)
            _token.tokenManager.clearTokens();
        },
        retry: false
    });
}
function useMockLoginMutation() {
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async (loginData)=>{
            _loggerconfig.appLogger.info('Mock login mutation started', {
                email: loginData.email
            });
            // Simulate API delay
            await new Promise((resolve)=>setTimeout(resolve, 1000));
            // Mock successful response
            const mockResponse = {
                success: true,
                message: 'Login successful',
                timestamp: new Date().toISOString(),
                data: {
                    user: {
                        id: 'mock-user-1',
                        email: loginData.email,
                        name: loginData.email.split('@')[0] || 'Unknown User',
                        role: 'user'
                    },
                    token: `mock.jwt.token.${Date.now()}`,
                    refreshToken: `mock.refresh.token.${Date.now()}`,
                    expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
                }
            };
            // Simulate login failure for testing
            if (loginData.email === 'error@test.com') {
                throw new Error('Invalid credentials');
            }
            return mockResponse;
        },
        onSuccess: (data)=>{
            // Store tokens securely
            _token.tokenManager.setTokens({
                token: data.data.token,
                refreshToken: data.data.refreshToken,
                expiresAt: data.data.expiresAt
            });
            // Update API client with new token
            _token.tokenManager.updateApiClientToken();
            // Invalidate relevant queries
            queryClient.invalidateQueries({
                queryKey: [
                    'user',
                    'profile'
                ]
            });
            _loggerconfig.appLogger.info('Mock login completed successfully', {
                userId: data.data.user.id,
                email: data.data.user.email
            });
        },
        onError: (error)=>{
            _loggerconfig.appLogger.error('Mock login failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            _token.tokenManager.clearTokens();
        }
    });
}
function useMockRefreshTokenMutation() {
    return (0, _reactquery.useMutation)({
        mutationFn: async ()=>{
            _loggerconfig.appLogger.debug('Mock refresh token mutation started');
            // Simulate API delay
            await new Promise((resolve)=>setTimeout(resolve, 500));
            const mockResponse = {
                success: true,
                timestamp: new Date().toISOString(),
                data: {
                    token: `refreshed.jwt.token.${Date.now()}`,
                    expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
                }
            };
            return mockResponse;
        },
        onSuccess: (data)=>{
            const currentTokenInfo = _token.tokenManager.getTokenInfo();
            if (currentTokenInfo.refreshToken) {
                _token.tokenManager.setTokens({
                    token: data.data.token,
                    refreshToken: currentTokenInfo.refreshToken,
                    expiresAt: data.data.expiresAt
                });
                _token.tokenManager.updateApiClientToken();
                _loggerconfig.appLogger.info('Mock token refresh successful');
            }
        },
        onError: (error)=>{
            _loggerconfig.appLogger.error('Mock refresh token failed', {
                error
            });
            _token.tokenManager.clearTokens();
        },
        retry: false
    });
}

//# sourceMappingURL=data:application/json;base64,