{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/hooks/auth/useAuthMutations.ts"],"sourcesContent":["import { useMutation, useQueryClient, type UseMutationResult } from '@tanstack/react-query';\n\nimport { apiClient } from '@/lib/api/client';\nimport { tokenManager } from '@/lib/auth/token';\nimport { appLogger } from '@/lib/monitoring/logger.config';\nimport type { \n  LoginRequest, \n  LoginResponse, \n  RefreshTokenRequest, \n  RefreshTokenResponse \n} from '@/types/api.types';\nimport { LoginResponseSchema, RefreshTokenResponseSchema } from '@/types/api.types';\n\n/**\n * Login mutation hook\n * Handles user authentication via TanStack Query\n */\nexport function useLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Login mutation started', { \n        email: loginData.email \n      });\n\n      // API call to login endpoint\n      const response = await apiClient.post<LoginResponse>('/auth/login', loginData);\n      \n      // Validate response with Zod\n      const validatedResponse = LoginResponseSchema.parse(response);\n      \n      appLogger.info('Login API call successful', {\n        userId: validatedResponse.data.user.id,\n        email: validatedResponse.data.user.email,\n      });\n\n      return validatedResponse;\n    },\n    onSuccess: (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] });\n      queryClient.invalidateQueries({ queryKey: ['dashboards'] });\n\n      appLogger.info('Login mutation completed successfully', {\n        userId: data.data.user.id,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Login mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n\n      // Clear any partial token data\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Logout mutation hook\n * Handles user logout and cleanup\n */\nexport function useLogoutMutation(): UseMutationResult<void, Error, void> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (): Promise<void> => {\n      appLogger.info('Logout mutation started');\n\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (refreshToken) {\n        try {\n          // Notify server about logout (optional - for token blacklisting)\n          await apiClient.post('/auth/logout', { refreshToken });\n          appLogger.debug('Server logout notification sent');\n        } catch (error) {\n          // Don't fail logout if server call fails\n          appLogger.warn('Server logout notification failed', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n    },\n    onSuccess: () => {\n      // Clear tokens\n      tokenManager.clearTokens();\n\n      // Clear all cached queries\n      queryClient.clear();\n\n      appLogger.info('Logout mutation completed successfully');\n    },\n    onError: (error) => {\n      appLogger.error('Logout mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Force clear tokens even if server call failed\n      tokenManager.clearTokens();\n      queryClient.clear();\n    },\n    onSettled: () => {\n      // Always redirect to login or home page after logout\n      // This will be handled by the component using this hook\n    },\n  });\n}\n\n/**\n * Refresh token mutation hook\n * Handles token refresh for automatic renewal\n */\nexport function useRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      appLogger.debug('Refresh token mutation started');\n\n      const requestData: RefreshTokenRequest = { refreshToken };\n      \n      // API call to refresh endpoint\n      const response = await apiClient.post<RefreshTokenResponse>('/auth/refresh', requestData);\n      \n      // Validate response with Zod\n      const validatedResponse = RefreshTokenResponseSchema.parse(response);\n      \n      appLogger.debug('Refresh token API call successful');\n\n      return validatedResponse;\n    },\n    onSuccess: (data) => {\n      // Update stored token with new access token\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken, // Keep existing refresh token\n          expiresAt: data.data.expiresAt,\n        });\n\n        // Update API client\n        tokenManager.updateApiClientToken();\n\n        appLogger.info('Token refresh completed successfully');\n      } else {\n        throw new Error('No refresh token to preserve');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Refresh token mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Clear tokens on refresh failure (user needs to login again)\n      tokenManager.clearTokens();\n    },\n    retry: false, // Don't retry refresh token requests\n  });\n}\n\n/**\n * Mock login mutation for development\n * Simulates API calls without actual backend\n */\nexport function useMockLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Mock login mutation started', { \n        email: loginData.email \n      });\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful response\n      const mockResponse: LoginResponse = {\n        success: true,\n        message: 'Login successful',\n        timestamp: new Date().toISOString(),\n        data: {\n          user: {\n            id: 'mock-user-1',\n            email: loginData.email,\n            name: loginData.email.split('@')[0] || 'Unknown User',\n            role: 'user',\n          },\n          token: `mock.jwt.token.${Date.now()}`,\n          refreshToken: `mock.refresh.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour\n        },\n      };\n\n      // Simulate login failure for testing\n      if (loginData.email === 'error@test.com') {\n        throw new Error('Invalid credentials');\n      }\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] });\n\n      appLogger.info('Mock login completed successfully', {\n        userId: data.data.user.id,\n        email: data.data.user.email,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Mock login failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Mock refresh token mutation for development\n */\nexport function useMockRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      appLogger.debug('Mock refresh token mutation started');\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      const mockResponse: RefreshTokenResponse = {\n        success: true,\n        timestamp: new Date().toISOString(),\n        data: {\n          token: `refreshed.jwt.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n        },\n      };\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken,\n          expiresAt: data.data.expiresAt,\n        });\n\n        tokenManager.updateApiClientToken();\n        appLogger.info('Mock token refresh successful');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Mock refresh token failed', { error });\n      tokenManager.clearTokens();\n    },\n    retry: false,\n  });\n}"],"names":["useLoginMutation","useLogoutMutation","useMockLoginMutation","useMockRefreshTokenMutation","useRefreshTokenMutation","queryClient","useQueryClient","useMutation","mutationFn","loginData","appLogger","info","email","response","apiClient","post","validatedResponse","LoginResponseSchema","parse","userId","data","user","id","onSuccess","tokenManager","setTokens","token","refreshToken","expiresAt","updateApiClientToken","invalidateQueries","queryKey","onError","error","Error","message","stack","undefined","clearTokens","getRefreshToken","debug","warn","clear","onSettled","requestData","RefreshTokenResponseSchema","currentTokenInfo","getTokenInfo","retry","Promise","resolve","setTimeout","mockResponse","success","timestamp","Date","toISOString","name","split","role","now"],"mappings":"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"}