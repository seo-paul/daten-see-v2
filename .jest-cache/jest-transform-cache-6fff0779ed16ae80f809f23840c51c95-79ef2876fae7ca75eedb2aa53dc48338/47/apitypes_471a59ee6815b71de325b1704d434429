9107c95e08b15400957ea4f67b38dac8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ApiErrorSchema () {
        return ApiErrorSchema;
    },
    get ApiResponseSchema () {
        return ApiResponseSchema;
    },
    get CreateDashboardRequestSchema () {
        return CreateDashboardRequestSchema;
    },
    get CreateDashboardResponseSchema () {
        return CreateDashboardResponseSchema;
    },
    get CreateWidgetRequestSchema () {
        return CreateWidgetRequestSchema;
    },
    get DashboardDetailResponseSchema () {
        return DashboardDetailResponseSchema;
    },
    get DashboardListResponseSchema () {
        return DashboardListResponseSchema;
    },
    get LoginRequestSchema () {
        return LoginRequestSchema;
    },
    get LoginResponseSchema () {
        return LoginResponseSchema;
    },
    get PaginationSchema () {
        return PaginationSchema;
    },
    get RefreshTokenRequestSchema () {
        return RefreshTokenRequestSchema;
    },
    get RefreshTokenResponseSchema () {
        return RefreshTokenResponseSchema;
    },
    get UpdateDashboardRequestSchema () {
        return UpdateDashboardRequestSchema;
    },
    get UpdateUserProfileRequestSchema () {
        return UpdateUserProfileRequestSchema;
    },
    get UpdateWidgetRequestSchema () {
        return UpdateWidgetRequestSchema;
    },
    get UserProfileResponseSchema () {
        return UserProfileResponseSchema;
    }
});
const _zod = require("zod");
const ApiResponseSchema = _zod.z.object({
    success: _zod.z.boolean(),
    message: _zod.z.string().optional(),
    timestamp: _zod.z.string().datetime()
});
const ApiErrorSchema = _zod.z.object({
    success: _zod.z.literal(false),
    error: _zod.z.object({
        code: _zod.z.string(),
        message: _zod.z.string(),
        details: _zod.z.record(_zod.z.unknown()).optional()
    }),
    timestamp: _zod.z.string().datetime()
});
const PaginationSchema = _zod.z.object({
    page: _zod.z.number().int().positive(),
    limit: _zod.z.number().int().positive(),
    total: _zod.z.number().int().nonnegative(),
    totalPages: _zod.z.number().int().nonnegative(),
    hasNext: _zod.z.boolean(),
    hasPrev: _zod.z.boolean()
});
const DashboardListResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        dashboards: _zod.z.array(_zod.z.object({
            id: _zod.z.string(),
            name: _zod.z.string(),
            description: _zod.z.string(),
            isPublic: _zod.z.boolean(),
            updatedAt: _zod.z.string().datetime(),
            widgetCount: _zod.z.number().int().nonnegative()
        })),
        pagination: PaginationSchema.optional()
    })
});
const DashboardDetailResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        dashboard: _zod.z.object({
            id: _zod.z.string(),
            name: _zod.z.string(),
            description: _zod.z.string(),
            isPublic: _zod.z.boolean(),
            createdAt: _zod.z.string().datetime(),
            updatedAt: _zod.z.string().datetime(),
            widgets: _zod.z.array(_zod.z.object({
                id: _zod.z.string(),
                type: _zod.z.enum([
                    'chart',
                    'kpi',
                    'text'
                ]),
                title: _zod.z.string(),
                position: _zod.z.object({
                    x: _zod.z.number(),
                    y: _zod.z.number(),
                    w: _zod.z.number(),
                    h: _zod.z.number()
                }),
                config: _zod.z.record(_zod.z.unknown()),
                data: _zod.z.unknown()
            })),
            settings: _zod.z.object({
                backgroundColor: _zod.z.string(),
                gridSize: _zod.z.number().int().positive(),
                autoRefresh: _zod.z.boolean(),
                refreshInterval: _zod.z.number().int().positive()
            })
        })
    })
});
const CreateDashboardRequestSchema = _zod.z.object({
    name: _zod.z.string().min(1).max(100),
    description: _zod.z.string().max(500),
    isPublic: _zod.z.boolean().default(false),
    settings: _zod.z.object({
        backgroundColor: _zod.z.string().default('#f8fafc'),
        gridSize: _zod.z.number().int().positive().default(24),
        autoRefresh: _zod.z.boolean().default(true),
        refreshInterval: _zod.z.number().int().positive().default(300)
    }).optional()
});
const UpdateDashboardRequestSchema = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string().min(1).max(100).optional(),
    description: _zod.z.string().max(500).optional(),
    isPublic: _zod.z.boolean().optional(),
    settings: _zod.z.object({
        backgroundColor: _zod.z.string(),
        gridSize: _zod.z.number().int().positive(),
        autoRefresh: _zod.z.boolean(),
        refreshInterval: _zod.z.number().int().positive()
    }).partial().optional()
});
const CreateDashboardResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        dashboardId: _zod.z.string()
    })
});
const LoginRequestSchema = _zod.z.object({
    email: _zod.z.string().email(),
    password: _zod.z.string().min(1)
});
const LoginResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        user: _zod.z.object({
            id: _zod.z.string(),
            email: _zod.z.string().email(),
            name: _zod.z.string(),
            role: _zod.z.enum([
                'user',
                'admin'
            ]),
            avatar: _zod.z.string().url().optional()
        }),
        token: _zod.z.string(),
        refreshToken: _zod.z.string(),
        expiresAt: _zod.z.string().datetime()
    })
});
const RefreshTokenRequestSchema = _zod.z.object({
    refreshToken: _zod.z.string()
});
const RefreshTokenResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        token: _zod.z.string(),
        expiresAt: _zod.z.string().datetime()
    })
});
const UserProfileResponseSchema = ApiResponseSchema.extend({
    data: _zod.z.object({
        user: _zod.z.object({
            id: _zod.z.string(),
            email: _zod.z.string().email(),
            name: _zod.z.string(),
            role: _zod.z.enum([
                'user',
                'admin'
            ]),
            avatar: _zod.z.string().url().optional(),
            createdAt: _zod.z.string().datetime(),
            updatedAt: _zod.z.string().datetime()
        })
    })
});
const UpdateUserProfileRequestSchema = _zod.z.object({
    name: _zod.z.string().min(1).max(100).optional(),
    avatar: _zod.z.string().url().optional()
});
const CreateWidgetRequestSchema = _zod.z.object({
    dashboardId: _zod.z.string(),
    type: _zod.z.enum([
        'chart',
        'kpi',
        'text'
    ]),
    title: _zod.z.string().min(1).max(100),
    position: _zod.z.object({
        x: _zod.z.number().int().nonnegative(),
        y: _zod.z.number().int().nonnegative(),
        w: _zod.z.number().int().positive(),
        h: _zod.z.number().int().positive()
    }),
    config: _zod.z.record(_zod.z.unknown()).default({})
});
const UpdateWidgetRequestSchema = _zod.z.object({
    id: _zod.z.string(),
    title: _zod.z.string().min(1).max(100).optional(),
    position: _zod.z.object({
        x: _zod.z.number().int().nonnegative(),
        y: _zod.z.number().int().nonnegative(),
        w: _zod.z.number().int().positive(),
        h: _zod.z.number().int().positive()
    }).optional(),
    config: _zod.z.record(_zod.z.unknown()).optional()
});

//# sourceMappingURL=data:application/json;base64,