{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/index.ts"],"sourcesContent":["/**\n * API Client Foundation\n * Type-safe API client with proper error handling\n */\n\nimport type { \n  ApiResponse, \n  ApiError,\n  PaginatedResponse \n} from '@/types';\n\n// Base API Configuration\nexport const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || '/api';\n\n// Enhanced Fetch with Type Safety\nexport class ApiClient {\n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = baseUrl;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Generic GET request with type safety\n   */\n  async get<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n    return this.request<T>('GET', endpoint, undefined, options);\n  }\n\n  /**\n   * Generic POST request with type safety\n   */\n  async post<T, D = unknown>(\n    endpoint: string, \n    data?: D, \n    options?: RequestInit\n  ): Promise<ApiResponse<T>> {\n    return this.request<T>('POST', endpoint, data, options);\n  }\n\n  /**\n   * Generic PUT request with type safety\n   */\n  async put<T, D = unknown>(\n    endpoint: string, \n    data?: D, \n    options?: RequestInit\n  ): Promise<ApiResponse<T>> {\n    return this.request<T>('PUT', endpoint, data, options);\n  }\n\n  /**\n   * Generic DELETE request with type safety\n   */\n  async delete<T>(endpoint: string, options?: RequestInit): Promise<ApiResponse<T>> {\n    return this.request<T>('DELETE', endpoint, undefined, options);\n  }\n\n  /**\n   * Paginated GET request\n   */\n  async getPaginated<T>(\n    endpoint: string,\n    page = 1,\n    limit = 20,\n    options?: RequestInit\n  ): Promise<PaginatedResponse<T>> {\n    const url = `${endpoint}?page=${page}&limit=${limit}`;\n    const response = await this.get<PaginatedResponse<T>>(url, options);\n    \n    if (!response.success) {\n      throw new ApiClientError('Failed to fetch paginated data', response.errors);\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Core request method with error handling\n   */\n  private async request<T>(\n    method: string,\n    endpoint: string,\n    data?: unknown,\n    options?: RequestInit\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const config: RequestInit = {\n      method,\n      headers: {\n        ...this.defaultHeaders,\n        ...options?.headers,\n      },\n      ...options,\n    };\n\n    if (data && method !== 'GET') {\n      config.body = JSON.stringify(data);\n    }\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new ApiClientError(\n          `HTTP ${response.status}: ${response.statusText}`,\n          errorData.errors || [{ code: 'HTTP_ERROR', message: response.statusText }]\n        );\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      if (error instanceof ApiClientError) {\n        throw error;\n      }\n      \n      throw new ApiClientError(\n        'Network error occurred',\n        [{ code: 'NETWORK_ERROR', message: String(error) }]\n      );\n    }\n  }\n\n  /**\n   * Set authorization header\n   */\n  setAuthToken(token: string): void {\n    this.defaultHeaders.Authorization = `Bearer ${token}`;\n  }\n\n  /**\n   * Remove authorization header\n   */\n  clearAuthToken(): void {\n    delete this.defaultHeaders.Authorization;\n  }\n}\n\n/**\n * Custom API Error Class\n */\nexport class ApiClientError extends Error {\n  public errors: ApiError[];\n  \n  constructor(message: string, errors: ApiError[] = []) {\n    super(message);\n    this.name = 'ApiClientError';\n    this.errors = errors;\n  }\n}\n\n/**\n * Default API Client Instance\n */\nexport const apiClient = new ApiClient();\n\n/**\n * Helper function to handle API responses in components\n */\nexport function handleApiError(error: unknown): string {\n  if (error instanceof ApiClientError) {\n    return error.errors[0]?.message || error.message;\n  }\n  \n  if (error instanceof Error) {\n    return error.message;\n  }\n  \n  return 'An unexpected error occurred';\n}\n\n/**\n * Type-safe API response handler for React Query\n */\nexport function createQueryFunction<T>(\n  apiCall: () => Promise<ApiResponse<T>>\n): () => Promise<T> {\n  return async () => {\n    const response = await apiCall();\n    \n    if (!response.success) {\n      throw new ApiClientError(\n        response.message || 'API request failed',\n        response.errors\n      );\n    }\n    \n    return response.data;\n  };\n}\n\n// Utility type for extracting data type from API response\nexport type ExtractApiData<T> = T extends ApiResponse<infer U> ? U : never;"],"names":["API_BASE_URL","ApiClient","ApiClientError","apiClient","createQueryFunction","handleApiError","process","env","NEXT_PUBLIC_API_URL","baseUrl","defaultHeaders","get","endpoint","options","request","undefined","post","data","put","delete","getPaginated","page","limit","url","response","success","errors","method","config","headers","body","JSON","stringify","fetch","ok","errorData","json","catch","status","statusText","code","message","result","error","String","setAuthToken","token","Authorization","clearAuthToken","Error","name","apiCall"],"mappings":"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"}