7af1ffa61093982e1a5dc0a046d3c17a
/**
 * Centralized Query Key Management
 * Provides type-safe, stable query keys for all TanStack Query operations
 * 
 * Best Practices:
 * - All query keys are functions that return const arrays
 * - Hierarchical structure: [domain, operation, ...params]
 * - Stable references prevent unnecessary re-renders
 * - Type-safe with proper TypeScript inference
 */ // Base query key factories
"use strict";

/* istanbul ignore next */
function cov_1j393iunqq() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/query-keys.ts";
  var hash = "79e51be9e57a4a04e9a0ba1f5a84fe1359a2c7b4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/query-keys.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "1": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 19,
          column: 7
        }
      },
      "2": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 19,
          column: 7
        }
      },
      "3": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "4": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "5": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 35
        }
      },
      "6": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "7": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "8": {
        start: {
          line: 35,
          column: 30
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "9": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "10": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "11": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "12": {
        start: {
          line: 44,
          column: 25
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "13": {
        start: {
          line: 49,
          column: 21
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "14": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "15": {
        start: {
          line: 60,
          column: 18
        },
        end: {
          line: 221,
          column: 1
        }
      },
      "16": {
        start: {
          line: 65,
          column: 36
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "17": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "18": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "19": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "20": {
        start: {
          line: 83,
          column: 32
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "21": {
        start: {
          line: 88,
          column: 41
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "22": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "23": {
        start: {
          line: 104,
          column: 32
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "24": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "25": {
        start: {
          line: 115,
          column: 22
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "26": {
        start: {
          line: 123,
          column: 18
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "27": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "28": {
        start: {
          line: 131,
          column: 36
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "29": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "30": {
        start: {
          line: 145,
          column: 41
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "31": {
        start: {
          line: 151,
          column: 42
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "32": {
        start: {
          line: 157,
          column: 48
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "33": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "34": {
        start: {
          line: 173,
          column: 21
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "35": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "36": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "37": {
        start: {
          line: 190,
          column: 33
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "38": {
        start: {
          line: 195,
          column: 32
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "39": {
        start: {
          line: 200,
          column: 33
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "40": {
        start: {
          line: 208,
          column: 21
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "41": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "42": {
        start: {
          line: 216,
          column: 18
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "43": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 251,
          column: 1
        }
      },
      "44": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "45": {
        start: {
          line: 230,
          column: 18
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "46": {
        start: {
          line: 238,
          column: 32
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "47": {
        start: {
          line: 245,
          column: 30
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "48": {
        start: {
          line: 252,
          column: 25
        },
        end: {
          line: 262,
          column: 1
        }
      },
      "49": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 254,
          column: 42
        }
      },
      "50": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 42
        }
      },
      "51": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 256,
          column: 49
        }
      },
      "52": {
        start: {
          line: 256,
          column: 36
        },
        end: {
          line: 256,
          column: 49
        }
      },
      "53": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "54": {
        start: {
          line: 258,
          column: 25
        },
        end: {
          line: 258,
          column: 43
        }
      },
      "55": {
        start: {
          line: 258,
          column: 46
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "56": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 37
        }
      },
      "57": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 260,
          column: 37
        }
      },
      "58": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 16
        }
      },
      "59": {
        start: {
          line: 263,
          column: 22
        },
        end: {
          line: 272,
          column: 1
        }
      },
      "60": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 271,
          column: 5
        }
      },
      "61": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 62
        }
      },
      "62": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "63": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 16
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 31
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 21
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 28
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 30
          },
          end: {
            line: 35,
            column: 31
          }
        },
        loc: {
          start: {
            line: 35,
            column: 40
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 37,
            column: 13
          },
          end: {
            line: 37,
            column: 14
          }
        },
        loc: {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 39,
            column: 13
          }
        },
        line: 37
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 40,
            column: 15
          },
          end: {
            line: 40,
            column: 16
          }
        },
        loc: {
          start: {
            line: 40,
            column: 19
          },
          end: {
            line: 43,
            column: 13
          }
        },
        line: 40
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 44,
            column: 14
          },
          end: {
            line: 44,
            column: 15
          }
        },
        loc: {
          start: {
            line: 44,
            column: 25
          },
          end: {
            line: 48,
            column: 13
          }
        },
        line: 44
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 49,
            column: 17
          },
          end: {
            line: 49,
            column: 18
          }
        },
        loc: {
          start: {
            line: 49,
            column: 21
          },
          end: {
            line: 52,
            column: 13
          }
        },
        line: 49
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        },
        loc: {
          start: {
            line: 53,
            column: 22
          },
          end: {
            line: 57,
            column: 13
          }
        },
        line: 53
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 65,
            column: 22
          }
        },
        loc: {
          start: {
            line: 65,
            column: 36
          },
          end: {
            line: 69,
            column: 13
          }
        },
        line: 65
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 70,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        loc: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 74,
            column: 13
          }
        },
        line: 70
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 75,
            column: 19
          },
          end: {
            line: 75,
            column: 20
          }
        },
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 78,
            column: 13
          }
        },
        line: 75
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        },
        loc: {
          start: {
            line: 79,
            column: 20
          },
          end: {
            line: 82,
            column: 13
          }
        },
        line: 79
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 83,
            column: 17
          },
          end: {
            line: 83,
            column: 18
          }
        },
        loc: {
          start: {
            line: 83,
            column: 32
          },
          end: {
            line: 87,
            column: 13
          }
        },
        line: 83
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        },
        loc: {
          start: {
            line: 88,
            column: 41
          },
          end: {
            line: 93,
            column: 13
          }
        },
        line: 88
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        loc: {
          start: {
            line: 99,
            column: 24
          },
          end: {
            line: 103,
            column: 13
          }
        },
        line: 99
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 104,
            column: 27
          }
        },
        loc: {
          start: {
            line: 104,
            column: 32
          },
          end: {
            line: 108,
            column: 13
          }
        },
        line: 104
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 109,
            column: 14
          },
          end: {
            line: 109,
            column: 15
          }
        },
        loc: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 114,
            column: 13
          }
        },
        line: 109
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        loc: {
          start: {
            line: 115,
            column: 22
          },
          end: {
            line: 119,
            column: 13
          }
        },
        line: 115
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 123,
            column: 14
          },
          end: {
            line: 123,
            column: 15
          }
        },
        loc: {
          start: {
            line: 123,
            column: 18
          },
          end: {
            line: 126,
            column: 13
          }
        },
        line: 123
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 127,
            column: 17
          },
          end: {
            line: 127,
            column: 18
          }
        },
        loc: {
          start: {
            line: 127,
            column: 21
          },
          end: {
            line: 130,
            column: 13
          }
        },
        line: 127
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 131,
            column: 21
          },
          end: {
            line: 131,
            column: 22
          }
        },
        loc: {
          start: {
            line: 131,
            column: 36
          },
          end: {
            line: 135,
            column: 13
          }
        },
        line: 131
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 18
          }
        },
        loc: {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 139,
            column: 13
          }
        },
        line: 136
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 145,
            column: 19
          },
          end: {
            line: 145,
            column: 20
          }
        },
        loc: {
          start: {
            line: 145,
            column: 41
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 145
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 151,
            column: 17
          },
          end: {
            line: 151,
            column: 18
          }
        },
        loc: {
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 156,
            column: 13
          }
        },
        line: 151
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        },
        loc: {
          start: {
            line: 157,
            column: 48
          },
          end: {
            line: 162,
            column: 13
          }
        },
        line: 157
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 163,
            column: 15
          },
          end: {
            line: 163,
            column: 16
          }
        },
        loc: {
          start: {
            line: 163,
            column: 34
          },
          end: {
            line: 168,
            column: 13
          }
        },
        line: 163
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 173,
            column: 17
          },
          end: {
            line: 173,
            column: 18
          }
        },
        loc: {
          start: {
            line: 173,
            column: 21
          },
          end: {
            line: 176,
            column: 13
          }
        },
        line: 173
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 177,
            column: 17
          },
          end: {
            line: 177,
            column: 18
          }
        },
        loc: {
          start: {
            line: 177,
            column: 26
          },
          end: {
            line: 181,
            column: 13
          }
        },
        line: 177
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 182,
            column: 18
          },
          end: {
            line: 182,
            column: 19
          }
        },
        loc: {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 186,
            column: 13
          }
        },
        line: 182
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 190,
            column: 24
          },
          end: {
            line: 190,
            column: 25
          }
        },
        loc: {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 194,
            column: 13
          }
        },
        line: 190
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 195,
            column: 18
          }
        },
        loc: {
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 199,
            column: 13
          }
        },
        line: 195
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 200,
            column: 18
          },
          end: {
            line: 200,
            column: 19
          }
        },
        loc: {
          start: {
            line: 200,
            column: 33
          },
          end: {
            line: 204,
            column: 13
          }
        },
        line: 200
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 208,
            column: 17
          },
          end: {
            line: 208,
            column: 18
          }
        },
        loc: {
          start: {
            line: 208,
            column: 21
          },
          end: {
            line: 211,
            column: 13
          }
        },
        line: 208
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 212,
            column: 17
          }
        },
        loc: {
          start: {
            line: 212,
            column: 20
          },
          end: {
            line: 215,
            column: 13
          }
        },
        line: 212
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 216,
            column: 14
          },
          end: {
            line: 216,
            column: 15
          }
        },
        loc: {
          start: {
            line: 216,
            column: 18
          },
          end: {
            line: 219,
            column: 13
          }
        },
        line: 216
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 224,
            column: 15
          },
          end: {
            line: 224,
            column: 16
          }
        },
        loc: {
          start: {
            line: 224,
            column: 30
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 224
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 230,
            column: 14
          },
          end: {
            line: 230,
            column: 15
          }
        },
        loc: {
          start: {
            line: 230,
            column: 18
          },
          end: {
            line: 236,
            column: 9
          }
        },
        line: 230
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        loc: {
          start: {
            line: 238,
            column: 32
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 238
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 245,
            column: 15
          },
          end: {
            line: 245,
            column: 16
          }
        },
        loc: {
          start: {
            line: 245,
            column: 30
          },
          end: {
            line: 250,
            column: 9
          }
        },
        line: 245
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 252,
            column: 25
          },
          end: {
            line: 252,
            column: 26
          }
        },
        loc: {
          start: {
            line: 252,
            column: 32
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 252
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 258,
            column: 17
          },
          end: {
            line: 258,
            column: 18
          }
        },
        loc: {
          start: {
            line: 258,
            column: 25
          },
          end: {
            line: 258,
            column: 43
          }
        },
        line: 258
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 263,
            column: 22
          },
          end: {
            line: 263,
            column: 23
          }
        },
        loc: {
          start: {
            line: 263,
            column: 40
          },
          end: {
            line: 272,
            column: 1
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "1": {
        loc: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "2": {
        loc: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "3": {
        loc: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "4": {
        loc: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "5": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/query-keys.ts"],
      sourcesContent: ["/**\n * Centralized Query Key Management\n * Provides type-safe, stable query keys for all TanStack Query operations\n * \n * Best Practices:\n * - All query keys are functions that return const arrays\n * - Hierarchical structure: [domain, operation, ...params]\n * - Stable references prevent unnecessary re-renders\n * - Type-safe with proper TypeScript inference\n */\n\n// Base query key factories\nconst createQueryKeyFactory = <T extends string>(domain: T): {\n  all: () => readonly [T];\n  lists: () => readonly [T, 'list'];\n  list: (filters?: Record<string, unknown>) => readonly [T, 'list', Record<string, unknown> | undefined];\n  details: () => readonly [T, 'detail'];\n  detail: (id: string) => readonly [T, 'detail', string];\n} => {\n  return {\n    all: () => [domain] as const,\n    lists: () => [domain, 'list'] as const,\n    list: (filters?: Record<string, unknown>) => \n      [domain, 'list', filters] as const,\n    details: () => [domain, 'detail'] as const,\n    detail: (id: string) => [domain, 'detail', id] as const,\n  };\n};\n\n// Domain-specific query keys\nexport const queryKeys = {\n  // Dashboard operations\n  dashboards: {\n    ...createQueryKeyFactory('dashboards'),\n    // Specialized dashboard keys\n    byWorkspace: (workspaceId: string) => \n      ['dashboards', 'workspace', workspaceId] as const,\n    byUser: (userId: string) => \n      ['dashboards', 'user', userId] as const,\n    templates: () => \n      ['dashboards', 'templates'] as const,\n    shared: () => \n      ['dashboards', 'shared'] as const,\n    widgets: (dashboardId: string) => \n      ['dashboards', dashboardId, 'widgets'] as const,\n    widget: (dashboardId: string, widgetId: string) => \n      ['dashboards', dashboardId, 'widgets', widgetId] as const,\n  },\n\n  // Data source operations\n  dataSources: {\n    ...createQueryKeyFactory('dataSources'),\n    // Specialized data source keys\n    byType: (type: string) => \n      ['dataSources', 'type', type] as const,\n    connectionStatus: (id: string) => \n      ['dataSources', id, 'status'] as const,\n    data: (id: string, query?: Record<string, unknown>) => \n      ['dataSources', id, 'data', query] as const,\n    schema: (id: string) => \n      ['dataSources', id, 'schema'] as const,\n  },\n\n  // Authentication operations\n  auth: {\n    user: () => ['auth', 'user'] as const,\n    profile: () => ['auth', 'profile'] as const,\n    permissions: (workspaceId?: string) => \n      ['auth', 'permissions', workspaceId] as const,\n    session: () => ['auth', 'session'] as const,\n  },\n\n  // Analytics operations\n  analytics: {\n    ...createQueryKeyFactory('analytics'),\n    // Time-based analytics keys\n    timeRange: (startDate: string, endDate: string) => \n      ['analytics', 'timeRange', startDate, endDate] as const,\n    metrics: (dataSourceId: string, metrics: string[]) => \n      ['analytics', 'metrics', dataSourceId, metrics.sort()] as const,\n    dimensions: (dataSourceId: string, dimensions: string[]) => \n      ['analytics', 'dimensions', dataSourceId, dimensions.sort()] as const,\n    query: (queryId: string, params?: Record<string, unknown>) => \n      ['analytics', 'query', queryId, params] as const,\n  },\n\n  // Organization & workspace operations\n  organizations: {\n    ...createQueryKeyFactory('organizations'),\n    current: () => ['organizations', 'current'] as const,\n    members: (orgId: string) => \n      ['organizations', orgId, 'members'] as const,\n    settings: (orgId: string) => \n      ['organizations', orgId, 'settings'] as const,\n  },\n\n  workspaces: {\n    ...createQueryKeyFactory('workspaces'),\n    byOrganization: (orgId: string) => \n      ['workspaces', 'organization', orgId] as const,\n    members: (workspaceId: string) => \n      ['workspaces', workspaceId, 'members'] as const,\n    settings: (workspaceId: string) => \n      ['workspaces', workspaceId, 'settings'] as const,\n  },\n\n  // Cache management utilities\n  cache: {\n    metrics: () => ['cache', 'metrics'] as const,\n    health: () => ['cache', 'health'] as const,\n    size: () => ['cache', 'size'] as const,\n  },\n} as const;\n\n// Type helpers for query keys\nexport type QueryKeys = typeof queryKeys;\nexport type DashboardQueryKeys = typeof queryKeys.dashboards;\nexport type DataSourceQueryKeys = typeof queryKeys.dataSources;\nexport type AuthQueryKeys = typeof queryKeys.auth;\n\n/**\n * Utility function to invalidate related queries efficiently\n * Groups related query keys for batch invalidation\n */\nexport const getRelatedQueryKeys = {\n  // When dashboard is updated, invalidate these related keys\n  dashboard: (dashboardId: string) => [\n    queryKeys.dashboards.detail(dashboardId),\n    queryKeys.dashboards.lists(),\n    queryKeys.dashboards.widgets(dashboardId),\n  ],\n\n  // When user logs in/out, invalidate these keys\n  userAuth: () => [\n    queryKeys.auth.user(),\n    queryKeys.auth.profile(),\n    queryKeys.auth.session(),\n    queryKeys.dashboards.lists(),\n    queryKeys.organizations.current(),\n  ],\n\n  // When data source is updated, invalidate related queries\n  dataSource: (dataSourceId: string) => [\n    queryKeys.dataSources.detail(dataSourceId),\n    queryKeys.dataSources.lists(),\n    queryKeys.dataSources.connectionStatus(dataSourceId),\n    queryKeys.analytics.all(),\n  ],\n\n  // When workspace changes, invalidate workspace-related data\n  workspace: (workspaceId: string) => [\n    queryKeys.workspaces.detail(workspaceId),\n    queryKeys.workspaces.members(workspaceId),\n    queryKeys.dashboards.byWorkspace(workspaceId),\n    queryKeys.dataSources.lists(),\n  ],\n} as const;\n\n/**\n * Query key validation utilities for development\n * Helps catch query key issues early\n */\nexport const validateQueryKey = (key: unknown[]): boolean => {\n  // Query keys should always be arrays\n  if (!Array.isArray(key)) return false;\n  \n  // First element should be a string (domain)\n  if (typeof key[0] !== 'string') return false;\n  \n  // Should not contain undefined values\n  if (key.some(item => item === undefined)) return false;\n  \n  // Should have reasonable length (avoid overly complex keys)\n  if (key.length > 6) return false;\n  \n  return true;\n};\n\n/**\n * Development utility to log query key usage\n * Helps identify query key patterns and potential optimizations\n */\nexport const debugQueryKey = (key: unknown[], operation: string): void => {\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.debug(`[Query Key Debug] ${operation}:`, key);\n    \n    if (!validateQueryKey(key)) {\n      // eslint-disable-next-line no-console\n      console.warn(`[Query Key Warning] Invalid query key structure:`, key);\n    }\n  }\n};"],
      names: ["debugQueryKey", "getRelatedQueryKeys", "queryKeys", "validateQueryKey", "createQueryKeyFactory", "domain", "all", "lists", "list", "filters", "details", "detail", "id", "dashboards", "byWorkspace", "workspaceId", "byUser", "userId", "templates", "shared", "widgets", "dashboardId", "widget", "widgetId", "dataSources", "byType", "type", "connectionStatus", "data", "query", "schema", "auth", "user", "profile", "permissions", "session", "analytics", "timeRange", "startDate", "endDate", "metrics", "dataSourceId", "sort", "dimensions", "queryId", "params", "organizations", "current", "members", "orgId", "settings", "workspaces", "byOrganization", "cache", "health", "size", "dashboard", "userAuth", "dataSource", "workspace", "key", "Array", "isArray", "some", "item", "undefined", "length", "operation", "process", "env", "NODE_ENV", "console", "debug", "warn"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "79e51be9e57a4a04e9a0ba1f5a84fe1359a2c7b4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1j393iunqq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1j393iunqq();
cov_1j393iunqq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1j393iunqq().f[0]++;
  cov_1j393iunqq().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1j393iunqq().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1j393iunqq().s[3]++;
_export(exports, {
  get debugQueryKey() {
    /* istanbul ignore next */
    cov_1j393iunqq().f[1]++;
    cov_1j393iunqq().s[4]++;
    return debugQueryKey;
  },
  get getRelatedQueryKeys() {
    /* istanbul ignore next */
    cov_1j393iunqq().f[2]++;
    cov_1j393iunqq().s[5]++;
    return getRelatedQueryKeys;
  },
  get queryKeys() {
    /* istanbul ignore next */
    cov_1j393iunqq().f[3]++;
    cov_1j393iunqq().s[6]++;
    return queryKeys;
  },
  get validateQueryKey() {
    /* istanbul ignore next */
    cov_1j393iunqq().f[4]++;
    cov_1j393iunqq().s[7]++;
    return validateQueryKey;
  }
});
/* istanbul ignore next */
cov_1j393iunqq().s[8]++;
const createQueryKeyFactory = domain => {
  /* istanbul ignore next */
  cov_1j393iunqq().f[5]++;
  cov_1j393iunqq().s[9]++;
  return {
    all: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[6]++;
      cov_1j393iunqq().s[10]++;
      return [domain];
    },
    lists: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[7]++;
      cov_1j393iunqq().s[11]++;
      return [domain, 'list'];
    },
    list: filters => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[8]++;
      cov_1j393iunqq().s[12]++;
      return [domain, 'list', filters];
    },
    details: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[9]++;
      cov_1j393iunqq().s[13]++;
      return [domain, 'detail'];
    },
    detail: id => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[10]++;
      cov_1j393iunqq().s[14]++;
      return [domain, 'detail', id];
    }
  };
};
const queryKeys =
/* istanbul ignore next */
(cov_1j393iunqq().s[15]++, {
  // Dashboard operations
  dashboards: {
    ...createQueryKeyFactory('dashboards'),
    // Specialized dashboard keys
    byWorkspace: workspaceId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[11]++;
      cov_1j393iunqq().s[16]++;
      return ['dashboards', 'workspace', workspaceId];
    },
    byUser: userId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[12]++;
      cov_1j393iunqq().s[17]++;
      return ['dashboards', 'user', userId];
    },
    templates: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[13]++;
      cov_1j393iunqq().s[18]++;
      return ['dashboards', 'templates'];
    },
    shared: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[14]++;
      cov_1j393iunqq().s[19]++;
      return ['dashboards', 'shared'];
    },
    widgets: dashboardId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[15]++;
      cov_1j393iunqq().s[20]++;
      return ['dashboards', dashboardId, 'widgets'];
    },
    widget: (dashboardId, widgetId) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[16]++;
      cov_1j393iunqq().s[21]++;
      return ['dashboards', dashboardId, 'widgets', widgetId];
    }
  },
  // Data source operations
  dataSources: {
    ...createQueryKeyFactory('dataSources'),
    // Specialized data source keys
    byType: type => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[17]++;
      cov_1j393iunqq().s[22]++;
      return ['dataSources', 'type', type];
    },
    connectionStatus: id => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[18]++;
      cov_1j393iunqq().s[23]++;
      return ['dataSources', id, 'status'];
    },
    data: (id, query) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[19]++;
      cov_1j393iunqq().s[24]++;
      return ['dataSources', id, 'data', query];
    },
    schema: id => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[20]++;
      cov_1j393iunqq().s[25]++;
      return ['dataSources', id, 'schema'];
    }
  },
  // Authentication operations
  auth: {
    user: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[21]++;
      cov_1j393iunqq().s[26]++;
      return ['auth', 'user'];
    },
    profile: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[22]++;
      cov_1j393iunqq().s[27]++;
      return ['auth', 'profile'];
    },
    permissions: workspaceId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[23]++;
      cov_1j393iunqq().s[28]++;
      return ['auth', 'permissions', workspaceId];
    },
    session: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[24]++;
      cov_1j393iunqq().s[29]++;
      return ['auth', 'session'];
    }
  },
  // Analytics operations
  analytics: {
    ...createQueryKeyFactory('analytics'),
    // Time-based analytics keys
    timeRange: (startDate, endDate) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[25]++;
      cov_1j393iunqq().s[30]++;
      return ['analytics', 'timeRange', startDate, endDate];
    },
    metrics: (dataSourceId, metrics) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[26]++;
      cov_1j393iunqq().s[31]++;
      return ['analytics', 'metrics', dataSourceId, metrics.sort()];
    },
    dimensions: (dataSourceId, dimensions) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[27]++;
      cov_1j393iunqq().s[32]++;
      return ['analytics', 'dimensions', dataSourceId, dimensions.sort()];
    },
    query: (queryId, params) => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[28]++;
      cov_1j393iunqq().s[33]++;
      return ['analytics', 'query', queryId, params];
    }
  },
  // Organization & workspace operations
  organizations: {
    ...createQueryKeyFactory('organizations'),
    current: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[29]++;
      cov_1j393iunqq().s[34]++;
      return ['organizations', 'current'];
    },
    members: orgId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[30]++;
      cov_1j393iunqq().s[35]++;
      return ['organizations', orgId, 'members'];
    },
    settings: orgId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[31]++;
      cov_1j393iunqq().s[36]++;
      return ['organizations', orgId, 'settings'];
    }
  },
  workspaces: {
    ...createQueryKeyFactory('workspaces'),
    byOrganization: orgId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[32]++;
      cov_1j393iunqq().s[37]++;
      return ['workspaces', 'organization', orgId];
    },
    members: workspaceId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[33]++;
      cov_1j393iunqq().s[38]++;
      return ['workspaces', workspaceId, 'members'];
    },
    settings: workspaceId => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[34]++;
      cov_1j393iunqq().s[39]++;
      return ['workspaces', workspaceId, 'settings'];
    }
  },
  // Cache management utilities
  cache: {
    metrics: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[35]++;
      cov_1j393iunqq().s[40]++;
      return ['cache', 'metrics'];
    },
    health: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[36]++;
      cov_1j393iunqq().s[41]++;
      return ['cache', 'health'];
    },
    size: () => {
      /* istanbul ignore next */
      cov_1j393iunqq().f[37]++;
      cov_1j393iunqq().s[42]++;
      return ['cache', 'size'];
    }
  }
});
const getRelatedQueryKeys =
/* istanbul ignore next */
(cov_1j393iunqq().s[43]++, {
  // When dashboard is updated, invalidate these related keys
  dashboard: dashboardId => {
    /* istanbul ignore next */
    cov_1j393iunqq().f[38]++;
    cov_1j393iunqq().s[44]++;
    return [queryKeys.dashboards.detail(dashboardId), queryKeys.dashboards.lists(), queryKeys.dashboards.widgets(dashboardId)];
  },
  // When user logs in/out, invalidate these keys
  userAuth: () => {
    /* istanbul ignore next */
    cov_1j393iunqq().f[39]++;
    cov_1j393iunqq().s[45]++;
    return [queryKeys.auth.user(), queryKeys.auth.profile(), queryKeys.auth.session(), queryKeys.dashboards.lists(), queryKeys.organizations.current()];
  },
  // When data source is updated, invalidate related queries
  dataSource: dataSourceId => {
    /* istanbul ignore next */
    cov_1j393iunqq().f[40]++;
    cov_1j393iunqq().s[46]++;
    return [queryKeys.dataSources.detail(dataSourceId), queryKeys.dataSources.lists(), queryKeys.dataSources.connectionStatus(dataSourceId), queryKeys.analytics.all()];
  },
  // When workspace changes, invalidate workspace-related data
  workspace: workspaceId => {
    /* istanbul ignore next */
    cov_1j393iunqq().f[41]++;
    cov_1j393iunqq().s[47]++;
    return [queryKeys.workspaces.detail(workspaceId), queryKeys.workspaces.members(workspaceId), queryKeys.dashboards.byWorkspace(workspaceId), queryKeys.dataSources.lists()];
  }
});
/* istanbul ignore next */
cov_1j393iunqq().s[48]++;
const validateQueryKey = key => {
  /* istanbul ignore next */
  cov_1j393iunqq().f[42]++;
  cov_1j393iunqq().s[49]++;
  // Query keys should always be arrays
  if (!Array.isArray(key)) {
    /* istanbul ignore next */
    cov_1j393iunqq().b[0][0]++;
    cov_1j393iunqq().s[50]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1j393iunqq().b[0][1]++;
  }
  // First element should be a string (domain)
  cov_1j393iunqq().s[51]++;
  if (typeof key[0] !== 'string') {
    /* istanbul ignore next */
    cov_1j393iunqq().b[1][0]++;
    cov_1j393iunqq().s[52]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1j393iunqq().b[1][1]++;
  }
  // Should not contain undefined values
  cov_1j393iunqq().s[53]++;
  if (key.some(item => {
    /* istanbul ignore next */
    cov_1j393iunqq().f[43]++;
    cov_1j393iunqq().s[54]++;
    return item === undefined;
  })) {
    /* istanbul ignore next */
    cov_1j393iunqq().b[2][0]++;
    cov_1j393iunqq().s[55]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1j393iunqq().b[2][1]++;
  }
  // Should have reasonable length (avoid overly complex keys)
  cov_1j393iunqq().s[56]++;
  if (key.length > 6) {
    /* istanbul ignore next */
    cov_1j393iunqq().b[3][0]++;
    cov_1j393iunqq().s[57]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1j393iunqq().b[3][1]++;
  }
  cov_1j393iunqq().s[58]++;
  return true;
};
/* istanbul ignore next */
cov_1j393iunqq().s[59]++;
const debugQueryKey = (key, operation) => {
  /* istanbul ignore next */
  cov_1j393iunqq().f[44]++;
  cov_1j393iunqq().s[60]++;
  if (process.env.NODE_ENV === 'development') {
    /* istanbul ignore next */
    cov_1j393iunqq().b[4][0]++;
    cov_1j393iunqq().s[61]++;
    // eslint-disable-next-line no-console
    console.debug(`[Query Key Debug] ${operation}:`, key);
    /* istanbul ignore next */
    cov_1j393iunqq().s[62]++;
    if (!validateQueryKey(key)) {
      /* istanbul ignore next */
      cov_1j393iunqq().b[5][0]++;
      cov_1j393iunqq().s[63]++;
      // eslint-disable-next-line no-console
      console.warn(`[Query Key Warning] Invalid query key structure:`, key);
    } else
    /* istanbul ignore next */
    {
      cov_1j393iunqq().b[5][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1j393iunqq().b[4][1]++;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,