{"version":3,"names":["debugQueryKey","cov_1j393iunqq","f","s","getRelatedQueryKeys","queryKeys","validateQueryKey","createQueryKeyFactory","domain","all","lists","list","filters","details","detail","id","dashboards","byWorkspace","workspaceId","byUser","userId","templates","shared","widgets","dashboardId","widget","widgetId","dataSources","byType","type","connectionStatus","data","query","schema","auth","user","profile","permissions","session","analytics","timeRange","startDate","endDate","metrics","dataSourceId","sort","dimensions","queryId","params","organizations","current","members","orgId","settings","workspaces","byOrganization","cache","health","size","dashboard","userAuth","dataSource","workspace","key","Array","isArray","b","some","item","undefined","length","operation","process","env","NODE_ENV","console","debug","warn"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/query-keys.ts"],"sourcesContent":["/**\n * Centralized Query Key Management\n * Provides type-safe, stable query keys for all TanStack Query operations\n * \n * Best Practices:\n * - All query keys are functions that return const arrays\n * - Hierarchical structure: [domain, operation, ...params]\n * - Stable references prevent unnecessary re-renders\n * - Type-safe with proper TypeScript inference\n */\n\n// Base query key factories\nconst createQueryKeyFactory = <T extends string>(domain: T): {\n  all: () => readonly [T];\n  lists: () => readonly [T, 'list'];\n  list: (filters?: Record<string, unknown>) => readonly [T, 'list', Record<string, unknown> | undefined];\n  details: () => readonly [T, 'detail'];\n  detail: (id: string) => readonly [T, 'detail', string];\n} => {\n  return {\n    all: () => [domain] as const,\n    lists: () => [domain, 'list'] as const,\n    list: (filters?: Record<string, unknown>) => \n      [domain, 'list', filters] as const,\n    details: () => [domain, 'detail'] as const,\n    detail: (id: string) => [domain, 'detail', id] as const,\n  };\n};\n\n// Domain-specific query keys\nexport const queryKeys = {\n  // Dashboard operations\n  dashboards: {\n    ...createQueryKeyFactory('dashboards'),\n    // Specialized dashboard keys\n    byWorkspace: (workspaceId: string) => \n      ['dashboards', 'workspace', workspaceId] as const,\n    byUser: (userId: string) => \n      ['dashboards', 'user', userId] as const,\n    templates: () => \n      ['dashboards', 'templates'] as const,\n    shared: () => \n      ['dashboards', 'shared'] as const,\n    widgets: (dashboardId: string) => \n      ['dashboards', dashboardId, 'widgets'] as const,\n    widget: (dashboardId: string, widgetId: string) => \n      ['dashboards', dashboardId, 'widgets', widgetId] as const,\n  },\n\n  // Data source operations\n  dataSources: {\n    ...createQueryKeyFactory('dataSources'),\n    // Specialized data source keys\n    byType: (type: string) => \n      ['dataSources', 'type', type] as const,\n    connectionStatus: (id: string) => \n      ['dataSources', id, 'status'] as const,\n    data: (id: string, query?: Record<string, unknown>) => \n      ['dataSources', id, 'data', query] as const,\n    schema: (id: string) => \n      ['dataSources', id, 'schema'] as const,\n  },\n\n  // Authentication operations\n  auth: {\n    user: () => ['auth', 'user'] as const,\n    profile: () => ['auth', 'profile'] as const,\n    permissions: (workspaceId?: string) => \n      ['auth', 'permissions', workspaceId] as const,\n    session: () => ['auth', 'session'] as const,\n  },\n\n  // Analytics operations\n  analytics: {\n    ...createQueryKeyFactory('analytics'),\n    // Time-based analytics keys\n    timeRange: (startDate: string, endDate: string) => \n      ['analytics', 'timeRange', startDate, endDate] as const,\n    metrics: (dataSourceId: string, metrics: string[]) => \n      ['analytics', 'metrics', dataSourceId, metrics.sort()] as const,\n    dimensions: (dataSourceId: string, dimensions: string[]) => \n      ['analytics', 'dimensions', dataSourceId, dimensions.sort()] as const,\n    query: (queryId: string, params?: Record<string, unknown>) => \n      ['analytics', 'query', queryId, params] as const,\n  },\n\n  // Organization & workspace operations\n  organizations: {\n    ...createQueryKeyFactory('organizations'),\n    current: () => ['organizations', 'current'] as const,\n    members: (orgId: string) => \n      ['organizations', orgId, 'members'] as const,\n    settings: (orgId: string) => \n      ['organizations', orgId, 'settings'] as const,\n  },\n\n  workspaces: {\n    ...createQueryKeyFactory('workspaces'),\n    byOrganization: (orgId: string) => \n      ['workspaces', 'organization', orgId] as const,\n    members: (workspaceId: string) => \n      ['workspaces', workspaceId, 'members'] as const,\n    settings: (workspaceId: string) => \n      ['workspaces', workspaceId, 'settings'] as const,\n  },\n\n  // Cache management utilities\n  cache: {\n    metrics: () => ['cache', 'metrics'] as const,\n    health: () => ['cache', 'health'] as const,\n    size: () => ['cache', 'size'] as const,\n  },\n} as const;\n\n// Type helpers for query keys\nexport type QueryKeys = typeof queryKeys;\nexport type DashboardQueryKeys = typeof queryKeys.dashboards;\nexport type DataSourceQueryKeys = typeof queryKeys.dataSources;\nexport type AuthQueryKeys = typeof queryKeys.auth;\n\n/**\n * Utility function to invalidate related queries efficiently\n * Groups related query keys for batch invalidation\n */\nexport const getRelatedQueryKeys = {\n  // When dashboard is updated, invalidate these related keys\n  dashboard: (dashboardId: string) => [\n    queryKeys.dashboards.detail(dashboardId),\n    queryKeys.dashboards.lists(),\n    queryKeys.dashboards.widgets(dashboardId),\n  ],\n\n  // When user logs in/out, invalidate these keys\n  userAuth: () => [\n    queryKeys.auth.user(),\n    queryKeys.auth.profile(),\n    queryKeys.auth.session(),\n    queryKeys.dashboards.lists(),\n    queryKeys.organizations.current(),\n  ],\n\n  // When data source is updated, invalidate related queries\n  dataSource: (dataSourceId: string) => [\n    queryKeys.dataSources.detail(dataSourceId),\n    queryKeys.dataSources.lists(),\n    queryKeys.dataSources.connectionStatus(dataSourceId),\n    queryKeys.analytics.all(),\n  ],\n\n  // When workspace changes, invalidate workspace-related data\n  workspace: (workspaceId: string) => [\n    queryKeys.workspaces.detail(workspaceId),\n    queryKeys.workspaces.members(workspaceId),\n    queryKeys.dashboards.byWorkspace(workspaceId),\n    queryKeys.dataSources.lists(),\n  ],\n} as const;\n\n/**\n * Query key validation utilities for development\n * Helps catch query key issues early\n */\nexport const validateQueryKey = (key: unknown[]): boolean => {\n  // Query keys should always be arrays\n  if (!Array.isArray(key)) return false;\n  \n  // First element should be a string (domain)\n  if (typeof key[0] !== 'string') return false;\n  \n  // Should not contain undefined values\n  if (key.some(item => item === undefined)) return false;\n  \n  // Should have reasonable length (avoid overly complex keys)\n  if (key.length > 6) return false;\n  \n  return true;\n};\n\n/**\n * Development utility to log query key usage\n * Helps identify query key patterns and potential optimizations\n */\nexport const debugQueryKey = (key: unknown[], operation: string): void => {\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line no-console\n    console.debug(`[Query Key Debug] ${operation}:`, key);\n    \n    if (!validateQueryKey(key)) {\n      // eslint-disable-next-line no-console\n      console.warn(`[Query Key Warning] Invalid query key structure:`, key);\n    }\n  }\n};"],"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","ignoreList":[]}