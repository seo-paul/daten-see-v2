bd04e7093d3cde5731677c7c130df281
/**
 * Central API Type Definitions
 * Generated and maintained types for all API endpoints
 */ // ===== DASHBOARD TYPES =====
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get apiQueryKeys () {
        return apiQueryKeys;
    },
    get isAnalyticsData () {
        return isAnalyticsData;
    },
    get isApiError () {
        return isApiError;
    },
    get isDashboard () {
        return isDashboard;
    }
});
const apiQueryKeys = {
    // Dashboards
    dashboards: [
        'dashboards'
    ],
    dashboard: (id)=>[
            'dashboards',
            id
        ],
    dashboardWidgets: (id)=>[
            'dashboards',
            id,
            'widgets'
        ],
    // Data Sources
    dataSources: [
        'dataSources'
    ],
    dataSource: (id)=>[
            'dataSources',
            id
        ],
    dataSourceData: (id, query)=>[
            'dataSources',
            id,
            'data',
            query
        ],
    // Analytics
    analytics: (query)=>[
            'analytics',
            query
        ],
    // Organizations & Workspaces
    organization: (id)=>[
            'organizations',
            id
        ],
    workspaces: (orgId)=>[
            'organizations',
            orgId,
            'workspaces'
        ],
    workspace: (id)=>[
            'workspaces',
            id
        ],
    // User
    currentUser: [
        'user',
        'current'
    ],
    userPermissions: (workspaceId)=>[
            'user',
            'permissions',
            workspaceId
        ]
};
function isDashboard(obj) {
    return typeof obj === 'object' && obj !== null && 'id' in obj && 'title' in obj && 'widgets' in obj;
}
function isAnalyticsData(obj) {
    return typeof obj === 'object' && obj !== null && 'dimensions' in obj && 'metrics' in obj;
}
function isApiError(obj) {
    return typeof obj === 'object' && obj !== null && 'code' in obj && 'message' in obj;
}

//# sourceMappingURL=data:application/json;base64,