084d1aa393d22775848893a3a7f15da3
/**
 * Tests for input sanitization utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _sanitization = require("../sanitization");
describe('sanitizeUserInput', ()=>{
    it('should remove all HTML tags and attributes', ()=>{
        const input = '<script>alert("xss")</script>Hello World<b>Bold</b>';
        const result = (0, _sanitization.sanitizeUserInput)(input);
        expect(result).toBe('Hello WorldBold');
    });
    it('should handle malicious input attempts', ()=>{
        const maliciousInputs = [
            '<img src="x" onerror="alert(1)">',
            'javascript:alert("xss")',
            '<iframe src="javascript:alert(1)"></iframe>',
            '<svg onload="alert(1)">',
            '<div onclick="alert(1)">Click me</div>'
        ];
        maliciousInputs.forEach((input)=>{
            const result = (0, _sanitization.sanitizeUserInput)(input);
            expect(result).not.toContain('<');
            expect(result).not.toContain('javascript:');
            expect(result).not.toContain('onerror');
            expect(result).not.toContain('onload');
            expect(result).not.toContain('onclick');
        });
    });
    it('should return empty string for non-string input', ()=>{
        expect((0, _sanitization.sanitizeUserInput)(null)).toBe('');
        expect((0, _sanitization.sanitizeUserInput)(undefined)).toBe('');
        expect((0, _sanitization.sanitizeUserInput)(123)).toBe('');
    });
    it('should trim whitespace', ()=>{
        expect((0, _sanitization.sanitizeUserInput)('  Hello World  ')).toBe('Hello World');
    });
});
describe('sanitizeTextContent', ()=>{
    it('should allow safe formatting tags', ()=>{
        const input = 'This is <b>bold</b> and <i>italic</i> text<br>with line breaks';
        const result = (0, _sanitization.sanitizeTextContent)(input);
        expect(result).toBe('This is <b>bold</b> and <i>italic</i> text<br>with line breaks');
    });
    it('should remove dangerous tags while keeping safe ones', ()=>{
        const input = 'Safe <b>bold</b> text<script>alert("bad")</script> more <i>italic</i>';
        const result = (0, _sanitization.sanitizeTextContent)(input);
        expect(result).toBe('Safe <b>bold</b> text more <i>italic</i>');
    });
});
describe('sanitizeName', ()=>{
    it('should sanitize and validate dashboard names', ()=>{
        const input = 'My <script>alert("xss")</script> Dashboard';
        const result = (0, _sanitization.sanitizeName)(input);
        expect(result).toBe('My  Dashboard');
    });
    it('should throw error for empty names', ()=>{
        expect(()=>(0, _sanitization.sanitizeName)('')).toThrow('Name cannot be empty');
        expect(()=>(0, _sanitization.sanitizeName)('   ')).toThrow('Name cannot be empty');
        expect(()=>(0, _sanitization.sanitizeName)('<script></script>')).toThrow('Name cannot be empty');
    });
    it('should enforce length limits', ()=>{
        const longName = 'A'.repeat(150);
        expect(()=>(0, _sanitization.sanitizeName)(longName, 100)).toThrow('Name cannot exceed 100 characters');
    });
    it('should allow valid names within limits', ()=>{
        const validName = 'Sales Dashboard 2024';
        expect((0, _sanitization.sanitizeName)(validName)).toBe('Sales Dashboard 2024');
    });
});
describe('sanitizeUrlSafe', ()=>{
    it('should create URL-safe strings', ()=>{
        const input = 'My Cool Dashboard!@#$';
        const result = (0, _sanitization.sanitizeUrlSafe)(input);
        expect(result).toBe('my-cool-dashboard');
    });
    it('should handle special characters and spaces', ()=>{
        expect((0, _sanitization.sanitizeUrlSafe)('Hello World & Company')).toBe('hello-world-company');
        expect((0, _sanitization.sanitizeUrlSafe)('Test---Multiple---Hyphens')).toBe('test-multiple-hyphens');
        expect((0, _sanitization.sanitizeUrlSafe)('  Leading and trailing spaces  ')).toBe('leading-and-trailing-spaces');
    });
    it('should remove leading and trailing hyphens', ()=>{
        expect((0, _sanitization.sanitizeUrlSafe)('---test---')).toBe('test');
        expect((0, _sanitization.sanitizeUrlSafe)('!@#test!@#')).toBe('test');
    });
});

//# sourceMappingURL=data:application/json;base64,