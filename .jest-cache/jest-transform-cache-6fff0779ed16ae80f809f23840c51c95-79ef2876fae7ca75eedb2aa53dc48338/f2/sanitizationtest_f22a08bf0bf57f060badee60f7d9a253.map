{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/utils/__tests__/sanitization.test.ts"],"sourcesContent":["/**\n * Tests for input sanitization utilities\n */\n\nimport { sanitizeUserInput, sanitizeTextContent, sanitizeName, sanitizeUrlSafe } from '../sanitization';\n\ndescribe('sanitizeUserInput', () => {\n  it('should remove all HTML tags and attributes', () => {\n    const input = '<script>alert(\"xss\")</script>Hello World<b>Bold</b>';\n    const result = sanitizeUserInput(input);\n    expect(result).toBe('Hello WorldBold');\n  });\n\n  it('should handle malicious input attempts', () => {\n    const maliciousInputs = [\n      '<img src=\"x\" onerror=\"alert(1)\">',\n      'javascript:alert(\"xss\")',\n      '<iframe src=\"javascript:alert(1)\"></iframe>',\n      '<svg onload=\"alert(1)\">',\n      '<div onclick=\"alert(1)\">Click me</div>'\n    ];\n\n    maliciousInputs.forEach(input => {\n      const result = sanitizeUserInput(input);\n      expect(result).not.toContain('<');\n      expect(result).not.toContain('javascript:');\n      expect(result).not.toContain('onerror');\n      expect(result).not.toContain('onload');\n      expect(result).not.toContain('onclick');\n    });\n  });\n\n  it('should return empty string for non-string input', () => {\n    expect(sanitizeUserInput(null as any)).toBe('');\n    expect(sanitizeUserInput(undefined as any)).toBe('');\n    expect(sanitizeUserInput(123 as any)).toBe('');\n  });\n\n  it('should trim whitespace', () => {\n    expect(sanitizeUserInput('  Hello World  ')).toBe('Hello World');\n  });\n});\n\ndescribe('sanitizeTextContent', () => {\n  it('should allow safe formatting tags', () => {\n    const input = 'This is <b>bold</b> and <i>italic</i> text<br>with line breaks';\n    const result = sanitizeTextContent(input);\n    expect(result).toBe('This is <b>bold</b> and <i>italic</i> text<br>with line breaks');\n  });\n\n  it('should remove dangerous tags while keeping safe ones', () => {\n    const input = 'Safe <b>bold</b> text<script>alert(\"bad\")</script> more <i>italic</i>';\n    const result = sanitizeTextContent(input);\n    expect(result).toBe('Safe <b>bold</b> text more <i>italic</i>');\n  });\n});\n\ndescribe('sanitizeName', () => {\n  it('should sanitize and validate dashboard names', () => {\n    const input = 'My <script>alert(\"xss\")</script> Dashboard';\n    const result = sanitizeName(input);\n    expect(result).toBe('My  Dashboard');\n  });\n\n  it('should throw error for empty names', () => {\n    expect(() => sanitizeName('')).toThrow('Name cannot be empty');\n    expect(() => sanitizeName('   ')).toThrow('Name cannot be empty');\n    expect(() => sanitizeName('<script></script>')).toThrow('Name cannot be empty');\n  });\n\n  it('should enforce length limits', () => {\n    const longName = 'A'.repeat(150);\n    expect(() => sanitizeName(longName, 100)).toThrow('Name cannot exceed 100 characters');\n  });\n\n  it('should allow valid names within limits', () => {\n    const validName = 'Sales Dashboard 2024';\n    expect(sanitizeName(validName)).toBe('Sales Dashboard 2024');\n  });\n});\n\ndescribe('sanitizeUrlSafe', () => {\n  it('should create URL-safe strings', () => {\n    const input = 'My Cool Dashboard!@#$';\n    const result = sanitizeUrlSafe(input);\n    expect(result).toBe('my-cool-dashboard');\n  });\n\n  it('should handle special characters and spaces', () => {\n    expect(sanitizeUrlSafe('Hello World & Company')).toBe('hello-world-company');\n    expect(sanitizeUrlSafe('Test---Multiple---Hyphens')).toBe('test-multiple-hyphens');\n    expect(sanitizeUrlSafe('  Leading and trailing spaces  ')).toBe('leading-and-trailing-spaces');\n  });\n\n  it('should remove leading and trailing hyphens', () => {\n    expect(sanitizeUrlSafe('---test---')).toBe('test');\n    expect(sanitizeUrlSafe('!@#test!@#')).toBe('test');\n  });\n});"],"names":["describe","it","input","result","sanitizeUserInput","expect","toBe","maliciousInputs","forEach","not","toContain","undefined","sanitizeTextContent","sanitizeName","toThrow","longName","repeat","validName","sanitizeUrlSafe"],"mappings":"AAAA;;CAEC;;;;8BAEqF;AAEtFA,SAAS,qBAAqB;IAC5BC,GAAG,8CAA8C;QAC/C,MAAMC,QAAQ;QACd,MAAMC,SAASC,IAAAA,+BAAiB,EAACF;QACjCG,OAAOF,QAAQG,IAAI,CAAC;IACtB;IAEAL,GAAG,0CAA0C;QAC3C,MAAMM,kBAAkB;YACtB;YACA;YACA;YACA;YACA;SACD;QAEDA,gBAAgBC,OAAO,CAACN,CAAAA;YACtB,MAAMC,SAASC,IAAAA,+BAAiB,EAACF;YACjCG,OAAOF,QAAQM,GAAG,CAACC,SAAS,CAAC;YAC7BL,OAAOF,QAAQM,GAAG,CAACC,SAAS,CAAC;YAC7BL,OAAOF,QAAQM,GAAG,CAACC,SAAS,CAAC;YAC7BL,OAAOF,QAAQM,GAAG,CAACC,SAAS,CAAC;YAC7BL,OAAOF,QAAQM,GAAG,CAACC,SAAS,CAAC;QAC/B;IACF;IAEAT,GAAG,mDAAmD;QACpDI,OAAOD,IAAAA,+BAAiB,EAAC,OAAcE,IAAI,CAAC;QAC5CD,OAAOD,IAAAA,+BAAiB,EAACO,YAAmBL,IAAI,CAAC;QACjDD,OAAOD,IAAAA,+BAAiB,EAAC,MAAaE,IAAI,CAAC;IAC7C;IAEAL,GAAG,0BAA0B;QAC3BI,OAAOD,IAAAA,+BAAiB,EAAC,oBAAoBE,IAAI,CAAC;IACpD;AACF;AAEAN,SAAS,uBAAuB;IAC9BC,GAAG,qCAAqC;QACtC,MAAMC,QAAQ;QACd,MAAMC,SAASS,IAAAA,iCAAmB,EAACV;QACnCG,OAAOF,QAAQG,IAAI,CAAC;IACtB;IAEAL,GAAG,wDAAwD;QACzD,MAAMC,QAAQ;QACd,MAAMC,SAASS,IAAAA,iCAAmB,EAACV;QACnCG,OAAOF,QAAQG,IAAI,CAAC;IACtB;AACF;AAEAN,SAAS,gBAAgB;IACvBC,GAAG,gDAAgD;QACjD,MAAMC,QAAQ;QACd,MAAMC,SAASU,IAAAA,0BAAY,EAACX;QAC5BG,OAAOF,QAAQG,IAAI,CAAC;IACtB;IAEAL,GAAG,sCAAsC;QACvCI,OAAO,IAAMQ,IAAAA,0BAAY,EAAC,KAAKC,OAAO,CAAC;QACvCT,OAAO,IAAMQ,IAAAA,0BAAY,EAAC,QAAQC,OAAO,CAAC;QAC1CT,OAAO,IAAMQ,IAAAA,0BAAY,EAAC,sBAAsBC,OAAO,CAAC;IAC1D;IAEAb,GAAG,gCAAgC;QACjC,MAAMc,WAAW,IAAIC,MAAM,CAAC;QAC5BX,OAAO,IAAMQ,IAAAA,0BAAY,EAACE,UAAU,MAAMD,OAAO,CAAC;IACpD;IAEAb,GAAG,0CAA0C;QAC3C,MAAMgB,YAAY;QAClBZ,OAAOQ,IAAAA,0BAAY,EAACI,YAAYX,IAAI,CAAC;IACvC;AACF;AAEAN,SAAS,mBAAmB;IAC1BC,GAAG,kCAAkC;QACnC,MAAMC,QAAQ;QACd,MAAMC,SAASe,IAAAA,6BAAe,EAAChB;QAC/BG,OAAOF,QAAQG,IAAI,CAAC;IACtB;IAEAL,GAAG,+CAA+C;QAChDI,OAAOa,IAAAA,6BAAe,EAAC,0BAA0BZ,IAAI,CAAC;QACtDD,OAAOa,IAAAA,6BAAe,EAAC,8BAA8BZ,IAAI,CAAC;QAC1DD,OAAOa,IAAAA,6BAAe,EAAC,oCAAoCZ,IAAI,CAAC;IAClE;IAEAL,GAAG,8CAA8C;QAC/CI,OAAOa,IAAAA,6BAAe,EAAC,eAAeZ,IAAI,CAAC;QAC3CD,OAAOa,IAAAA,6BAAe,EAAC,eAAeZ,IAAI,CAAC;IAC7C;AACF"}