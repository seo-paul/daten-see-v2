{"version":3,"names":["useLoginMutation","cov_1nehql9oyl","f","s","useLogoutMutation","useMockLoginMutation","useMockRefreshTokenMutation","useRefreshTokenMutation","queryClient","_reactquery","useQueryClient","useMutation","mutationFn","loginData","_loggerconfig","appLogger","info","email","response","_client","apiClient","post","validatedResponse","_apitypes","LoginResponseSchema","parse","userId","data","user","id","onSuccess","_token","tokenManager","setTokens","token","refreshToken","expiresAt","updateApiClientToken","Promise","all","invalidateQueries","queryKey","onError","error","Error","b","message","stack","undefined","clearTokens","getRefreshToken","debug","warn","clear","onSettled","requestData","RefreshTokenResponseSchema","currentTokenInfo","getTokenInfo","retry","resolve","setTimeout","mockResponse","success","timestamp","Date","toISOString","name","split","role","now"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/hooks/auth/useAuthMutations.ts"],"sourcesContent":["import { useMutation, useQueryClient, type UseMutationResult } from '@tanstack/react-query';\n\nimport { apiClient } from '@/lib/api/client';\nimport { tokenManager } from '@/lib/auth/token';\nimport { appLogger } from '@/lib/monitoring/logger.config';\nimport type { \n  LoginRequest, \n  LoginResponse, \n  RefreshTokenRequest, \n  RefreshTokenResponse \n} from '@/types/api.types';\nimport { LoginResponseSchema, RefreshTokenResponseSchema } from '@/types/api.types';\n\n/**\n * Login mutation hook\n * Handles user authentication via TanStack Query\n */\nexport function useLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Login mutation started', { \n        email: loginData.email \n      });\n\n      // API call to login endpoint\n      const response = await apiClient.post<LoginResponse>('/auth/login', loginData);\n      \n      // Validate response with Zod\n      const validatedResponse = LoginResponseSchema.parse(response);\n      \n      appLogger.info('Login API call successful', {\n        userId: validatedResponse.data.user.id,\n        email: validatedResponse.data.user.email,\n      });\n\n      return validatedResponse;\n    },\n    onSuccess: async (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries (batched for performance)\n      await Promise.all([\n        queryClient.invalidateQueries({ queryKey: ['user', 'profile'] }),\n        queryClient.invalidateQueries({ queryKey: ['dashboards'] }),\n      ]);\n\n      appLogger.info('Login mutation completed successfully', {\n        userId: data.data.user.id,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Login mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n\n      // Clear any partial token data\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Logout mutation hook\n * Handles user logout and cleanup\n */\nexport function useLogoutMutation(): UseMutationResult<void, Error, void> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (): Promise<void> => {\n      appLogger.info('Logout mutation started');\n\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (refreshToken) {\n        try {\n          // Notify server about logout (optional - for token blacklisting)\n          await apiClient.post('/auth/logout', { refreshToken });\n          appLogger.debug('Server logout notification sent');\n        } catch (error) {\n          // Don't fail logout if server call fails\n          appLogger.warn('Server logout notification failed', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n    },\n    onSuccess: () => {\n      // Clear tokens\n      tokenManager.clearTokens();\n\n      // Clear all cached queries\n      queryClient.clear();\n\n      appLogger.info('Logout mutation completed successfully');\n    },\n    onError: (error) => {\n      appLogger.error('Logout mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Force clear tokens even if server call failed\n      tokenManager.clearTokens();\n      queryClient.clear();\n    },\n    onSettled: () => {\n      // Always redirect to login or home page after logout\n      // This will be handled by the component using this hook\n    },\n  });\n}\n\n/**\n * Refresh token mutation hook\n * Handles token refresh for automatic renewal\n */\nexport function useRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      appLogger.debug('Refresh token mutation started');\n\n      const requestData: RefreshTokenRequest = { refreshToken };\n      \n      // API call to refresh endpoint\n      const response = await apiClient.post<RefreshTokenResponse>('/auth/refresh', requestData);\n      \n      // Validate response with Zod\n      const validatedResponse = RefreshTokenResponseSchema.parse(response);\n      \n      appLogger.debug('Refresh token API call successful');\n\n      return validatedResponse;\n    },\n    onSuccess: (data) => {\n      // Update stored token with new access token\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken, // Keep existing refresh token\n          expiresAt: data.data.expiresAt,\n        });\n\n        // Update API client\n        tokenManager.updateApiClientToken();\n\n        appLogger.info('Token refresh completed successfully');\n      } else {\n        throw new Error('No refresh token to preserve');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Refresh token mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Clear tokens on refresh failure (user needs to login again)\n      tokenManager.clearTokens();\n    },\n    retry: false, // Don't retry refresh token requests\n  });\n}\n\n/**\n * Mock login mutation for development\n * Simulates API calls without actual backend\n */\nexport function useMockLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Mock login mutation started', { \n        email: loginData.email \n      });\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful response\n      const mockResponse: LoginResponse = {\n        success: true,\n        message: 'Login successful',\n        timestamp: new Date().toISOString(),\n        data: {\n          user: {\n            id: 'mock-user-1',\n            email: loginData.email,\n            name: loginData.email.split('@')[0] || 'Unknown User',\n            role: 'user',\n          },\n          token: `mock.jwt.token.${Date.now()}`,\n          refreshToken: `mock.refresh.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour\n        },\n      };\n\n      // Simulate login failure for testing\n      if (loginData.email === 'error@test.com') {\n        throw new Error('Invalid credentials');\n      }\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries  \n      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] });\n\n      appLogger.info('Mock login completed successfully', {\n        userId: data.data.user.id,\n        email: data.data.user.email,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Mock login failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Mock refresh token mutation for development\n */\nexport function useMockRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      appLogger.debug('Mock refresh token mutation started');\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      const mockResponse: RefreshTokenResponse = {\n        success: true,\n        timestamp: new Date().toISOString(),\n        data: {\n          token: `refreshed.jwt.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n        },\n      };\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken,\n          expiresAt: data.data.expiresAt,\n        });\n\n        tokenManager.updateApiClientToken();\n        appLogger.info('Mock token refresh successful');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Mock refresh token failed', { error });\n      tokenManager.clearTokens();\n    },\n    retry: false,\n  });\n}"],"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","ignoreList":[]}