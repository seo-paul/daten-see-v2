c9ff0534996d2744a080a14b3874e72b
"use strict";

/* istanbul ignore next */
function cov_1nehql9oyl() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/hooks/auth/useAuthMutations.ts";
  var hash = "6b92a5b6b28094c1304814562a837244b1c5f48d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/hooks/auth/useAuthMutations.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 43
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 39
        }
      },
      "9": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "10": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 47
        }
      },
      "11": {
        start: {
          line: 30,
          column: 15
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "12": {
        start: {
          line: 31,
          column: 22
        },
        end: {
          line: 31,
          column: 67
        }
      },
      "13": {
        start: {
          line: 32,
          column: 18
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "14": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 57
        }
      },
      "15": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "16": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 83
        }
      },
      "18": {
        start: {
          line: 43,
          column: 38
        },
        end: {
          line: 43,
          column: 83
        }
      },
      "19": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "20": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "21": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "23": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "25": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "26": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 46
        }
      },
      "27": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 57
        }
      },
      "28": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 127,
          column: 7
        }
      },
      "29": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 68
        }
      },
      "30": {
        start: {
          line: 92,
          column: 33
        },
        end: {
          line: 92,
          column: 70
        }
      },
      "31": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "32": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "33": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 98,
          column: 23
        }
      },
      "34": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 99,
          column: 85
        }
      },
      "35": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "36": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 46
        }
      },
      "37": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 32
        }
      },
      "38": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 83
        }
      },
      "39": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "40": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 46
        }
      },
      "41": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 32
        }
      },
      "42": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 171,
          column: 7
        }
      },
      "43": {
        start: {
          line: 132,
          column: 33
        },
        end: {
          line: 132,
          column: 70
        }
      },
      "44": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "45": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 62
        }
      },
      "46": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 76
        }
      },
      "47": {
        start: {
          line: 137,
          column: 32
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "48": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 87
        }
      },
      "49": {
        start: {
          line: 143,
          column: 38
        },
        end: {
          line: 143,
          column: 90
        }
      },
      "50": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 79
        }
      },
      "51": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 37
        }
      },
      "52": {
        start: {
          line: 149,
          column: 37
        },
        end: {
          line: 149,
          column: 71
        }
      },
      "53": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "54": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "55": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "56": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 85
        }
      },
      "57": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 64
        }
      },
      "58": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "59": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 46
        }
      },
      "60": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 57
        }
      },
      "61": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 232,
          column: 7
        }
      },
      "62": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "63": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 68
        }
      },
      "64": {
        start: {
          line: 181,
          column: 41
        },
        end: {
          line: 181,
          column: 66
        }
      },
      "65": {
        start: {
          line: 183,
          column: 33
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "66": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "67": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 55
        }
      },
      "68": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 32
        }
      },
      "69": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 211,
          column: 15
        }
      },
      "70": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 55
        }
      },
      "71": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 220,
          column: 15
        }
      },
      "72": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 224,
          column: 15
        }
      },
      "73": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "74": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 46
        }
      },
      "75": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 269,
          column: 7
        }
      },
      "76": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 81
        }
      },
      "77": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 67
        }
      },
      "78": {
        start: {
          line: 239,
          column: 41
        },
        end: {
          line: 239,
          column: 65
        }
      },
      "79": {
        start: {
          line: 240,
          column: 33
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "80": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 32
        }
      },
      "81": {
        start: {
          line: 251,
          column: 37
        },
        end: {
          line: 251,
          column: 71
        }
      },
      "82": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "83": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 257,
          column: 19
        }
      },
      "84": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 59
        }
      },
      "85": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 78
        }
      },
      "86": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "87": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 29
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "useLoginMutation",
        decl: {
          start: {
            line: 33,
            column: 9
          },
          end: {
            line: 33,
            column: 25
          }
        },
        loc: {
          start: {
            line: 33,
            column: 28
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 33
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 21
          }
        },
        loc: {
          start: {
            line: 36,
            column: 39
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 36
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 20
          }
        },
        loc: {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 76,
            column: 9
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 77,
            column: 18
          }
        },
        loc: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 77
      },
      "10": {
        name: "useLogoutMutation",
        decl: {
          start: {
            line: 87,
            column: 9
          },
          end: {
            line: 87,
            column: 26
          }
        },
        loc: {
          start: {
            line: 87,
            column: 29
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 87
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 90,
            column: 20
          },
          end: {
            line: 90,
            column: 21
          }
        },
        loc: {
          start: {
            line: 90,
            column: 30
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 90
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 108,
            column: 19
          },
          end: {
            line: 108,
            column: 20
          }
        },
        loc: {
          start: {
            line: 108,
            column: 23
          },
          end: {
            line: 114,
            column: 9
          }
        },
        line: 108
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 115,
            column: 17
          },
          end: {
            line: 115,
            column: 18
          }
        },
        loc: {
          start: {
            line: 115,
            column: 26
          },
          end: {
            line: 122,
            column: 9
          }
        },
        line: 115
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 123,
            column: 20
          }
        },
        loc: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 126,
            column: 9
          }
        },
        line: 123
      },
      "15": {
        name: "useRefreshTokenMutation",
        decl: {
          start: {
            line: 129,
            column: 9
          },
          end: {
            line: 129,
            column: 32
          }
        },
        loc: {
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 172,
            column: 1
          }
        },
        line: 129
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        },
        loc: {
          start: {
            line: 131,
            column: 30
          },
          end: {
            line: 146,
            column: 9
          }
        },
        line: 131
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 147,
            column: 19
          },
          end: {
            line: 147,
            column: 20
          }
        },
        loc: {
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 162,
            column: 9
          }
        },
        line: 147
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 17
          },
          end: {
            line: 163,
            column: 18
          }
        },
        loc: {
          start: {
            line: 163,
            column: 26
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 163
      },
      "19": {
        name: "useMockLoginMutation",
        decl: {
          start: {
            line: 173,
            column: 9
          },
          end: {
            line: 173,
            column: 29
          }
        },
        loc: {
          start: {
            line: 173,
            column: 32
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 173
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 176,
            column: 20
          },
          end: {
            line: 176,
            column: 21
          }
        },
        loc: {
          start: {
            line: 176,
            column: 39
          },
          end: {
            line: 204,
            column: 9
          }
        },
        line: 176
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 31
          }
        },
        loc: {
          start: {
            line: 181,
            column: 41
          },
          end: {
            line: 181,
            column: 66
          }
        },
        line: 181
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 205,
            column: 19
          },
          end: {
            line: 205,
            column: 20
          }
        },
        loc: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 225,
            column: 9
          }
        },
        line: 205
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 226,
            column: 18
          }
        },
        loc: {
          start: {
            line: 226,
            column: 26
          },
          end: {
            line: 231,
            column: 9
          }
        },
        line: 226
      },
      "24": {
        name: "useMockRefreshTokenMutation",
        decl: {
          start: {
            line: 234,
            column: 9
          },
          end: {
            line: 234,
            column: 36
          }
        },
        loc: {
          start: {
            line: 234,
            column: 39
          },
          end: {
            line: 270,
            column: 1
          }
        },
        line: 234
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 236,
            column: 20
          },
          end: {
            line: 236,
            column: 21
          }
        },
        loc: {
          start: {
            line: 236,
            column: 30
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 236
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 239,
            column: 30
          },
          end: {
            line: 239,
            column: 31
          }
        },
        loc: {
          start: {
            line: 239,
            column: 41
          },
          end: {
            line: 239,
            column: 65
          }
        },
        line: 239
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 250,
            column: 19
          },
          end: {
            line: 250,
            column: 20
          }
        },
        loc: {
          start: {
            line: 250,
            column: 27
          },
          end: {
            line: 261,
            column: 9
          }
        },
        line: 250
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 262,
            column: 17
          },
          end: {
            line: 262,
            column: 18
          }
        },
        loc: {
          start: {
            line: 262,
            column: 26
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 262
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 48
          },
          end: {
            line: 79,
            column: 61
          }
        }, {
          start: {
            line: 79,
            column: 64
          },
          end: {
            line: 79,
            column: 79
          }
        }],
        line: 79
      },
      "1": {
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 48
          },
          end: {
            line: 80,
            column: 59
          }
        }, {
          start: {
            line: 80,
            column: 62
          },
          end: {
            line: 80,
            column: 71
          }
        }],
        line: 80
      },
      "2": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 103,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 56
          },
          end: {
            line: 103,
            column: 69
          }
        }, {
          start: {
            line: 103,
            column: 72
          },
          end: {
            line: 103,
            column: 87
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 117,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 48
          },
          end: {
            line: 117,
            column: 61
          }
        }, {
          start: {
            line: 117,
            column: 64
          },
          end: {
            line: 117,
            column: 79
          }
        }],
        line: 117
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: 159,
            column: 19
          },
          end: {
            line: 161,
            column: 13
          }
        }],
        line: 150
      },
      "7": {
        loc: {
          start: {
            line: 165,
            column: 23
          },
          end: {
            line: 165,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 48
          },
          end: {
            line: 165,
            column: 61
          }
        }, {
          start: {
            line: 165,
            column: 64
          },
          end: {
            line: 165,
            column: 79
          }
        }],
        line: 165
      },
      "8": {
        loc: {
          start: {
            line: 191,
            column: 30
          },
          end: {
            line: 191,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 30
          },
          end: {
            line: 191,
            column: 59
          }
        }, {
          start: {
            line: 191,
            column: 63
          },
          end: {
            line: 191,
            column: 77
          }
        }],
        line: 191
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 228,
            column: 23
          },
          end: {
            line: 228,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 48
          },
          end: {
            line: 228,
            column: 61
          }
        }, {
          start: {
            line: 228,
            column: 64
          },
          end: {
            line: 228,
            column: 79
          }
        }],
        line: 228
      },
      "11": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/hooks/auth/useAuthMutations.ts"],
      sourcesContent: ["import { useMutation, useQueryClient, type UseMutationResult } from '@tanstack/react-query';\n\nimport { apiClient } from '@/lib/api/client';\nimport { tokenManager } from '@/lib/auth/token';\nimport { appLogger } from '@/lib/monitoring/logger.config';\nimport type { \n  LoginRequest, \n  LoginResponse, \n  RefreshTokenRequest, \n  RefreshTokenResponse \n} from '@/types/api.types';\nimport { LoginResponseSchema, RefreshTokenResponseSchema } from '@/types/api.types';\n\n/**\n * Login mutation hook\n * Handles user authentication via TanStack Query\n */\nexport function useLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Login mutation started', { \n        email: loginData.email \n      });\n\n      // API call to login endpoint\n      const response = await apiClient.post<LoginResponse>('/auth/login', loginData);\n      \n      // Validate response with Zod\n      const validatedResponse = LoginResponseSchema.parse(response);\n      \n      appLogger.info('Login API call successful', {\n        userId: validatedResponse.data.user.id,\n        email: validatedResponse.data.user.email,\n      });\n\n      return validatedResponse;\n    },\n    onSuccess: async (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries (batched for performance)\n      await Promise.all([\n        queryClient.invalidateQueries({ queryKey: ['user', 'profile'] }),\n        queryClient.invalidateQueries({ queryKey: ['dashboards'] }),\n      ]);\n\n      appLogger.info('Login mutation completed successfully', {\n        userId: data.data.user.id,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Login mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n\n      // Clear any partial token data\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Logout mutation hook\n * Handles user logout and cleanup\n */\nexport function useLogoutMutation(): UseMutationResult<void, Error, void> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (): Promise<void> => {\n      appLogger.info('Logout mutation started');\n\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (refreshToken) {\n        try {\n          // Notify server about logout (optional - for token blacklisting)\n          await apiClient.post('/auth/logout', { refreshToken });\n          appLogger.debug('Server logout notification sent');\n        } catch (error) {\n          // Don't fail logout if server call fails\n          appLogger.warn('Server logout notification failed', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      }\n    },\n    onSuccess: () => {\n      // Clear tokens\n      tokenManager.clearTokens();\n\n      // Clear all cached queries\n      queryClient.clear();\n\n      appLogger.info('Logout mutation completed successfully');\n    },\n    onError: (error) => {\n      appLogger.error('Logout mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Force clear tokens even if server call failed\n      tokenManager.clearTokens();\n      queryClient.clear();\n    },\n    onSettled: () => {\n      // Always redirect to login or home page after logout\n      // This will be handled by the component using this hook\n    },\n  });\n}\n\n/**\n * Refresh token mutation hook\n * Handles token refresh for automatic renewal\n */\nexport function useRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      const refreshToken = tokenManager.getRefreshToken();\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      appLogger.debug('Refresh token mutation started');\n\n      const requestData: RefreshTokenRequest = { refreshToken };\n      \n      // API call to refresh endpoint\n      const response = await apiClient.post<RefreshTokenResponse>('/auth/refresh', requestData);\n      \n      // Validate response with Zod\n      const validatedResponse = RefreshTokenResponseSchema.parse(response);\n      \n      appLogger.debug('Refresh token API call successful');\n\n      return validatedResponse;\n    },\n    onSuccess: (data) => {\n      // Update stored token with new access token\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken, // Keep existing refresh token\n          expiresAt: data.data.expiresAt,\n        });\n\n        // Update API client\n        tokenManager.updateApiClientToken();\n\n        appLogger.info('Token refresh completed successfully');\n      } else {\n        throw new Error('No refresh token to preserve');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Refresh token mutation failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Clear tokens on refresh failure (user needs to login again)\n      tokenManager.clearTokens();\n    },\n    retry: false, // Don't retry refresh token requests\n  });\n}\n\n/**\n * Mock login mutation for development\n * Simulates API calls without actual backend\n */\nexport function useMockLoginMutation(): UseMutationResult<LoginResponse, Error, LoginRequest> {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (loginData: LoginRequest): Promise<LoginResponse> => {\n      appLogger.info('Mock login mutation started', { \n        email: loginData.email \n      });\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful response\n      const mockResponse: LoginResponse = {\n        success: true,\n        message: 'Login successful',\n        timestamp: new Date().toISOString(),\n        data: {\n          user: {\n            id: 'mock-user-1',\n            email: loginData.email,\n            name: loginData.email.split('@')[0] || 'Unknown User',\n            role: 'user',\n          },\n          token: `mock.jwt.token.${Date.now()}`,\n          refreshToken: `mock.refresh.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour\n        },\n      };\n\n      // Simulate login failure for testing\n      if (loginData.email === 'error@test.com') {\n        throw new Error('Invalid credentials');\n      }\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      // Store tokens securely\n      tokenManager.setTokens({\n        token: data.data.token,\n        refreshToken: data.data.refreshToken,\n        expiresAt: data.data.expiresAt,\n      });\n\n      // Update API client with new token\n      tokenManager.updateApiClientToken();\n\n      // Invalidate relevant queries  \n      queryClient.invalidateQueries({ queryKey: ['user', 'profile'] });\n\n      appLogger.info('Mock login completed successfully', {\n        userId: data.data.user.id,\n        email: data.data.user.email,\n      });\n    },\n    onError: (error) => {\n      appLogger.error('Mock login failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      tokenManager.clearTokens();\n    },\n  });\n}\n\n/**\n * Mock refresh token mutation for development\n */\nexport function useMockRefreshTokenMutation(): UseMutationResult<RefreshTokenResponse, Error, void> {\n  return useMutation({\n    mutationFn: async (): Promise<RefreshTokenResponse> => {\n      appLogger.debug('Mock refresh token mutation started');\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      const mockResponse: RefreshTokenResponse = {\n        success: true,\n        timestamp: new Date().toISOString(),\n        data: {\n          token: `refreshed.jwt.token.${Date.now()}`,\n          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n        },\n      };\n\n      return mockResponse;\n    },\n    onSuccess: (data) => {\n      const currentTokenInfo = tokenManager.getTokenInfo();\n      \n      if (currentTokenInfo.refreshToken) {\n        tokenManager.setTokens({\n          token: data.data.token,\n          refreshToken: currentTokenInfo.refreshToken,\n          expiresAt: data.data.expiresAt,\n        });\n\n        tokenManager.updateApiClientToken();\n        appLogger.info('Mock token refresh successful');\n      }\n    },\n    onError: (error) => {\n      appLogger.error('Mock refresh token failed', { error });\n      tokenManager.clearTokens();\n    },\n    retry: false,\n  });\n}"],
      names: ["useLoginMutation", "useLogoutMutation", "useMockLoginMutation", "useMockRefreshTokenMutation", "useRefreshTokenMutation", "queryClient", "useQueryClient", "useMutation", "mutationFn", "loginData", "appLogger", "info", "email", "response", "apiClient", "post", "validatedResponse", "LoginResponseSchema", "parse", "userId", "data", "user", "id", "onSuccess", "tokenManager", "setTokens", "token", "refreshToken", "expiresAt", "updateApiClientToken", "Promise", "all", "invalidateQueries", "queryKey", "onError", "error", "Error", "message", "stack", "undefined", "clearTokens", "getRefreshToken", "debug", "warn", "clear", "onSettled", "requestData", "RefreshTokenResponseSchema", "currentTokenInfo", "getTokenInfo", "retry", "resolve", "setTimeout", "mockResponse", "success", "timestamp", "Date", "toISOString", "name", "split", "role", "now"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6b92a5b6b28094c1304814562a837244b1c5f48d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nehql9oyl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nehql9oyl();
cov_1nehql9oyl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[0]++;
  cov_1nehql9oyl().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1nehql9oyl().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1nehql9oyl().s[3]++;
_export(exports, {
  get useLoginMutation() {
    /* istanbul ignore next */
    cov_1nehql9oyl().f[1]++;
    cov_1nehql9oyl().s[4]++;
    return useLoginMutation;
  },
  get useLogoutMutation() {
    /* istanbul ignore next */
    cov_1nehql9oyl().f[2]++;
    cov_1nehql9oyl().s[5]++;
    return useLogoutMutation;
  },
  get useMockLoginMutation() {
    /* istanbul ignore next */
    cov_1nehql9oyl().f[3]++;
    cov_1nehql9oyl().s[6]++;
    return useMockLoginMutation;
  },
  get useMockRefreshTokenMutation() {
    /* istanbul ignore next */
    cov_1nehql9oyl().f[4]++;
    cov_1nehql9oyl().s[7]++;
    return useMockRefreshTokenMutation;
  },
  get useRefreshTokenMutation() {
    /* istanbul ignore next */
    cov_1nehql9oyl().f[5]++;
    cov_1nehql9oyl().s[8]++;
    return useRefreshTokenMutation;
  }
});
const _reactquery =
/* istanbul ignore next */
(cov_1nehql9oyl().s[9]++, require("@tanstack/react-query"));
const _client =
/* istanbul ignore next */
(cov_1nehql9oyl().s[10]++, require("../../lib/api/client"));
const _token =
/* istanbul ignore next */
(cov_1nehql9oyl().s[11]++, require("../../lib/auth/token"));
const _loggerconfig =
/* istanbul ignore next */
(cov_1nehql9oyl().s[12]++, require("../../lib/monitoring/logger.config"));
const _apitypes =
/* istanbul ignore next */
(cov_1nehql9oyl().s[13]++, require("../../types/api.types"));
function useLoginMutation() {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[6]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_1nehql9oyl().s[14]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_1nehql9oyl().s[15]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async loginData => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[7]++;
      cov_1nehql9oyl().s[16]++;
      _loggerconfig.appLogger.info('Login mutation started', {
        email: loginData.email
      });
      // API call to login endpoint
      const response =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[17]++, await _client.apiClient.post('/auth/login', loginData));
      // Validate response with Zod
      const validatedResponse =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[18]++, _apitypes.LoginResponseSchema.parse(response));
      /* istanbul ignore next */
      cov_1nehql9oyl().s[19]++;
      _loggerconfig.appLogger.info('Login API call successful', {
        userId: validatedResponse.data.user.id,
        email: validatedResponse.data.user.email
      });
      /* istanbul ignore next */
      cov_1nehql9oyl().s[20]++;
      return validatedResponse;
    },
    onSuccess: async data => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[8]++;
      cov_1nehql9oyl().s[21]++;
      // Store tokens securely
      _token.tokenManager.setTokens({
        token: data.data.token,
        refreshToken: data.data.refreshToken,
        expiresAt: data.data.expiresAt
      });
      // Update API client with new token
      /* istanbul ignore next */
      cov_1nehql9oyl().s[22]++;
      _token.tokenManager.updateApiClientToken();
      // Invalidate relevant queries (batched for performance)
      /* istanbul ignore next */
      cov_1nehql9oyl().s[23]++;
      await Promise.all([queryClient.invalidateQueries({
        queryKey: ['user', 'profile']
      }), queryClient.invalidateQueries({
        queryKey: ['dashboards']
      })]);
      /* istanbul ignore next */
      cov_1nehql9oyl().s[24]++;
      _loggerconfig.appLogger.info('Login mutation completed successfully', {
        userId: data.data.user.id
      });
    },
    onError: error => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[9]++;
      cov_1nehql9oyl().s[25]++;
      _loggerconfig.appLogger.error('Login mutation failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[0][1]++, 'Unknown error'),
        stack: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[1][0]++, error.stack) :
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[1][1]++, undefined)
      });
      // Clear any partial token data
      /* istanbul ignore next */
      cov_1nehql9oyl().s[26]++;
      _token.tokenManager.clearTokens();
    }
  });
}
function useLogoutMutation() {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[10]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_1nehql9oyl().s[27]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_1nehql9oyl().s[28]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async () => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[11]++;
      cov_1nehql9oyl().s[29]++;
      _loggerconfig.appLogger.info('Logout mutation started');
      const refreshToken =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[30]++, _token.tokenManager.getRefreshToken());
      /* istanbul ignore next */
      cov_1nehql9oyl().s[31]++;
      if (refreshToken) {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[2][0]++;
        cov_1nehql9oyl().s[32]++;
        try {
          /* istanbul ignore next */
          cov_1nehql9oyl().s[33]++;
          // Notify server about logout (optional - for token blacklisting)
          await _client.apiClient.post('/auth/logout', {
            refreshToken
          });
          /* istanbul ignore next */
          cov_1nehql9oyl().s[34]++;
          _loggerconfig.appLogger.debug('Server logout notification sent');
        } catch (error) {
          /* istanbul ignore next */
          cov_1nehql9oyl().s[35]++;
          // Don't fail logout if server call fails
          _loggerconfig.appLogger.warn('Server logout notification failed', {
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_1nehql9oyl().b[3][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1nehql9oyl().b[3][1]++, 'Unknown error')
          });
        }
      } else
      /* istanbul ignore next */
      {
        cov_1nehql9oyl().b[2][1]++;
      }
    },
    onSuccess: () => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[12]++;
      cov_1nehql9oyl().s[36]++;
      // Clear tokens
      _token.tokenManager.clearTokens();
      // Clear all cached queries
      /* istanbul ignore next */
      cov_1nehql9oyl().s[37]++;
      queryClient.clear();
      /* istanbul ignore next */
      cov_1nehql9oyl().s[38]++;
      _loggerconfig.appLogger.info('Logout mutation completed successfully');
    },
    onError: error => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[13]++;
      cov_1nehql9oyl().s[39]++;
      _loggerconfig.appLogger.error('Logout mutation failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[4][1]++, 'Unknown error')
      });
      // Force clear tokens even if server call failed
      /* istanbul ignore next */
      cov_1nehql9oyl().s[40]++;
      _token.tokenManager.clearTokens();
      /* istanbul ignore next */
      cov_1nehql9oyl().s[41]++;
      queryClient.clear();
    },
    onSettled: () => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[14]++;
    } // Always redirect to login or home page after logout
    // This will be handled by the component using this hook
  });
}
function useRefreshTokenMutation() {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[15]++;
  cov_1nehql9oyl().s[42]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async () => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[16]++;
      const refreshToken =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[43]++, _token.tokenManager.getRefreshToken());
      /* istanbul ignore next */
      cov_1nehql9oyl().s[44]++;
      if (!refreshToken) {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[5][0]++;
        cov_1nehql9oyl().s[45]++;
        throw new Error('No refresh token available');
      } else
      /* istanbul ignore next */
      {
        cov_1nehql9oyl().b[5][1]++;
      }
      cov_1nehql9oyl().s[46]++;
      _loggerconfig.appLogger.debug('Refresh token mutation started');
      const requestData =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[47]++, {
        refreshToken
      });
      // API call to refresh endpoint
      const response =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[48]++, await _client.apiClient.post('/auth/refresh', requestData));
      // Validate response with Zod
      const validatedResponse =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[49]++, _apitypes.RefreshTokenResponseSchema.parse(response));
      /* istanbul ignore next */
      cov_1nehql9oyl().s[50]++;
      _loggerconfig.appLogger.debug('Refresh token API call successful');
      /* istanbul ignore next */
      cov_1nehql9oyl().s[51]++;
      return validatedResponse;
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[17]++;
      // Update stored token with new access token
      const currentTokenInfo =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[52]++, _token.tokenManager.getTokenInfo());
      /* istanbul ignore next */
      cov_1nehql9oyl().s[53]++;
      if (currentTokenInfo.refreshToken) {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[6][0]++;
        cov_1nehql9oyl().s[54]++;
        _token.tokenManager.setTokens({
          token: data.data.token,
          refreshToken: currentTokenInfo.refreshToken,
          expiresAt: data.data.expiresAt
        });
        // Update API client
        /* istanbul ignore next */
        cov_1nehql9oyl().s[55]++;
        _token.tokenManager.updateApiClientToken();
        /* istanbul ignore next */
        cov_1nehql9oyl().s[56]++;
        _loggerconfig.appLogger.info('Token refresh completed successfully');
      } else {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[6][1]++;
        cov_1nehql9oyl().s[57]++;
        throw new Error('No refresh token to preserve');
      }
    },
    onError: error => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[18]++;
      cov_1nehql9oyl().s[58]++;
      _loggerconfig.appLogger.error('Refresh token mutation failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[7][1]++, 'Unknown error')
      });
      // Clear tokens on refresh failure (user needs to login again)
      /* istanbul ignore next */
      cov_1nehql9oyl().s[59]++;
      _token.tokenManager.clearTokens();
    },
    retry: false
  });
}
function useMockLoginMutation() {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[19]++;
  const queryClient =
  /* istanbul ignore next */
  (cov_1nehql9oyl().s[60]++, (0, _reactquery.useQueryClient)());
  /* istanbul ignore next */
  cov_1nehql9oyl().s[61]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async loginData => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[20]++;
      cov_1nehql9oyl().s[62]++;
      _loggerconfig.appLogger.info('Mock login mutation started', {
        email: loginData.email
      });
      // Simulate API delay
      /* istanbul ignore next */
      cov_1nehql9oyl().s[63]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1nehql9oyl().f[21]++;
        cov_1nehql9oyl().s[64]++;
        return setTimeout(resolve, 1000);
      });
      // Mock successful response
      const mockResponse =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[65]++, {
        success: true,
        message: 'Login successful',
        timestamp: new Date().toISOString(),
        data: {
          user: {
            id: 'mock-user-1',
            email: loginData.email,
            name:
            /* istanbul ignore next */
            (cov_1nehql9oyl().b[8][0]++, loginData.email.split('@')[0]) ||
            /* istanbul ignore next */
            (cov_1nehql9oyl().b[8][1]++, 'Unknown User'),
            role: 'user'
          },
          token: `mock.jwt.token.${Date.now()}`,
          refreshToken: `mock.refresh.token.${Date.now()}`,
          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
        }
      });
      // Simulate login failure for testing
      /* istanbul ignore next */
      cov_1nehql9oyl().s[66]++;
      if (loginData.email === 'error@test.com') {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[9][0]++;
        cov_1nehql9oyl().s[67]++;
        throw new Error('Invalid credentials');
      } else
      /* istanbul ignore next */
      {
        cov_1nehql9oyl().b[9][1]++;
      }
      cov_1nehql9oyl().s[68]++;
      return mockResponse;
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[22]++;
      cov_1nehql9oyl().s[69]++;
      // Store tokens securely
      _token.tokenManager.setTokens({
        token: data.data.token,
        refreshToken: data.data.refreshToken,
        expiresAt: data.data.expiresAt
      });
      // Update API client with new token
      /* istanbul ignore next */
      cov_1nehql9oyl().s[70]++;
      _token.tokenManager.updateApiClientToken();
      // Invalidate relevant queries  
      /* istanbul ignore next */
      cov_1nehql9oyl().s[71]++;
      queryClient.invalidateQueries({
        queryKey: ['user', 'profile']
      });
      /* istanbul ignore next */
      cov_1nehql9oyl().s[72]++;
      _loggerconfig.appLogger.info('Mock login completed successfully', {
        userId: data.data.user.id,
        email: data.data.user.email
      });
    },
    onError: error => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[23]++;
      cov_1nehql9oyl().s[73]++;
      _loggerconfig.appLogger.error('Mock login failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1nehql9oyl().b[10][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_1nehql9oyl().s[74]++;
      _token.tokenManager.clearTokens();
    }
  });
}
function useMockRefreshTokenMutation() {
  /* istanbul ignore next */
  cov_1nehql9oyl().f[24]++;
  cov_1nehql9oyl().s[75]++;
  return (0, _reactquery.useMutation)({
    mutationFn: async () => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[25]++;
      cov_1nehql9oyl().s[76]++;
      _loggerconfig.appLogger.debug('Mock refresh token mutation started');
      // Simulate API delay
      /* istanbul ignore next */
      cov_1nehql9oyl().s[77]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_1nehql9oyl().f[26]++;
        cov_1nehql9oyl().s[78]++;
        return setTimeout(resolve, 500);
      });
      const mockResponse =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[79]++, {
        success: true,
        timestamp: new Date().toISOString(),
        data: {
          token: `refreshed.jwt.token.${Date.now()}`,
          expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
        }
      });
      /* istanbul ignore next */
      cov_1nehql9oyl().s[80]++;
      return mockResponse;
    },
    onSuccess: data => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[27]++;
      const currentTokenInfo =
      /* istanbul ignore next */
      (cov_1nehql9oyl().s[81]++, _token.tokenManager.getTokenInfo());
      /* istanbul ignore next */
      cov_1nehql9oyl().s[82]++;
      if (currentTokenInfo.refreshToken) {
        /* istanbul ignore next */
        cov_1nehql9oyl().b[11][0]++;
        cov_1nehql9oyl().s[83]++;
        _token.tokenManager.setTokens({
          token: data.data.token,
          refreshToken: currentTokenInfo.refreshToken,
          expiresAt: data.data.expiresAt
        });
        /* istanbul ignore next */
        cov_1nehql9oyl().s[84]++;
        _token.tokenManager.updateApiClientToken();
        /* istanbul ignore next */
        cov_1nehql9oyl().s[85]++;
        _loggerconfig.appLogger.info('Mock token refresh successful');
      } else
      /* istanbul ignore next */
      {
        cov_1nehql9oyl().b[11][1]++;
      }
    },
    onError: error => {
      /* istanbul ignore next */
      cov_1nehql9oyl().f[28]++;
      cov_1nehql9oyl().s[86]++;
      _loggerconfig.appLogger.error('Mock refresh token failed', {
        error
      });
      /* istanbul ignore next */
      cov_1nehql9oyl().s[87]++;
      _token.tokenManager.clearTokens();
    },
    retry: false
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,