{"version":3,"names":["cov_wmfnegt1q","actualCoverage","s","NavigationContext","f","NavigationProvider","useNavigation","usePageNavigation","_react","createContext","undefined","ROUTE_LABELS","children","pathname","_navigation","usePathname","navigationState","setNavigationState","useState","currentPath","previousPath","breadcrumbs","pageTitle","generateBreadcrumbs","path","segments","split","filter","Boolean","b","push","label","href","isActive","forEach","segment","index","isLast","length","charAt","toUpperCase","slice","useEffect","newBreadcrumbs","newTitle","prev","_loggerconfig","appLogger","debug","map","setBreadcrumbs","setPageTitle","title","document","goBack","window","history","back","from","to","location","contextValue","_jsxruntime","jsx","Provider","value","context","useContext","Error","options"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/contexts/NavigationContext.tsx"],"sourcesContent":["'use client';\n\nimport { usePathname } from 'next/navigation';\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\n// Breadcrumb interface\nexport interface Breadcrumb {\n  label: string;\n  href: string;\n  isActive?: boolean;\n}\n\n// Navigation state interface\nexport interface NavigationState {\n  currentPath: string;\n  previousPath: string | null;\n  breadcrumbs: Breadcrumb[];\n  pageTitle: string;\n}\n\n// Navigation context interface\nexport interface NavigationContextType extends NavigationState {\n  // Navigation actions\n  setBreadcrumbs: (breadcrumbs: Breadcrumb[]) => void;\n  setPageTitle: (title: string) => void;\n  \n  // Navigation utilities\n  generateBreadcrumbs: (pathname: string) => Breadcrumb[];\n  goBack: () => void;\n}\n\n// Create context\nconst NavigationContext = createContext<NavigationContextType | undefined>(undefined);\n\n// Props interface\ninterface NavigationProviderProps {\n  children: ReactNode;\n}\n\n// Route to label mapping\nconst ROUTE_LABELS: Record<string, string> = {\n  '/': 'Home',\n  '/dashboards': 'Dashboards',\n  '/dashboard': 'Dashboard',\n  '/settings': 'Settings',\n  '/profile': 'Profile',\n  '/auth-demo': 'Auth Demo',\n  '/login': 'Login',\n  '/unauthorized': 'Unauthorized',\n};\n\n/**\n * Navigation Context Provider\n * Manages navigation state without persistence\n * Uses React Context + Next.js App Router (no Zustand)\n */\nexport function NavigationProvider({ children }: NavigationProviderProps): React.ReactElement {\n  const pathname = usePathname();\n  \n  const [navigationState, setNavigationState] = useState<NavigationState>({\n    currentPath: pathname,\n    previousPath: null,\n    breadcrumbs: [],\n    pageTitle: '',\n  });\n\n  // Generate breadcrumbs from pathname\n  const generateBreadcrumbs = (path: string): Breadcrumb[] => {\n    const segments = path.split('/').filter(Boolean);\n    const breadcrumbs: Breadcrumb[] = [];\n\n    // Always add home\n    if (path !== '/') {\n      breadcrumbs.push({\n        label: 'Home',\n        href: '/',\n        isActive: false,\n      });\n    }\n\n    // Build breadcrumbs from path segments\n    let currentPath = '';\n    segments.forEach((segment, index) => {\n      currentPath += `/${segment}`;\n      \n      const isLast = index === segments.length - 1;\n      const label = ROUTE_LABELS[currentPath] || \n                   segment.charAt(0).toUpperCase() + segment.slice(1);\n\n      breadcrumbs.push({\n        label,\n        href: currentPath,\n        isActive: isLast,\n      });\n    });\n\n    return breadcrumbs;\n  };\n\n  // Update navigation state when pathname changes\n  useEffect(() => {\n    const newBreadcrumbs = generateBreadcrumbs(pathname);\n    const newTitle = newBreadcrumbs[newBreadcrumbs.length - 1]?.label || 'Dashboard';\n\n    setNavigationState(prev => ({\n      currentPath: pathname,\n      previousPath: prev.currentPath,\n      breadcrumbs: newBreadcrumbs,\n      pageTitle: newTitle,\n    }));\n\n    appLogger.debug('Navigation updated', {\n      currentPath: pathname,\n      previousPath: navigationState.currentPath,\n      breadcrumbs: newBreadcrumbs.map(b => b.label),\n      pageTitle: newTitle,\n    });\n  }, [pathname, navigationState.currentPath]);\n\n  // Set custom breadcrumbs\n  const setBreadcrumbs = (breadcrumbs: Breadcrumb[]): void => {\n    setNavigationState(prev => ({\n      ...prev,\n      breadcrumbs,\n    }));\n\n    appLogger.debug('Custom breadcrumbs set', {\n      breadcrumbs: breadcrumbs.map(b => b.label),\n    });\n  };\n\n  // Set custom page title\n  const setPageTitle = (title: string): void => {\n    setNavigationState(prev => ({\n      ...prev,\n      pageTitle: title,\n    }));\n\n    // Update document title\n    if (typeof document !== 'undefined') {\n      document.title = `${title} - Daten See`;\n    }\n\n    appLogger.debug('Page title updated', { title });\n  };\n\n  // Go back to previous page\n  const goBack = (): void => {\n    if (navigationState.previousPath) {\n      window.history.back();\n      appLogger.debug('Navigate back', {\n        from: navigationState.currentPath,\n        to: navigationState.previousPath,\n      });\n    } else {\n      // Fallback to dashboard if no previous path\n      window.location.href = '/dashboards';\n      appLogger.debug('Navigate back fallback to dashboards');\n    }\n  };\n\n  // Context value\n  const contextValue: NavigationContextType = {\n    // State\n    ...navigationState,\n    \n    // Actions\n    setBreadcrumbs,\n    setPageTitle,\n    generateBreadcrumbs,\n    goBack,\n  };\n\n  return (\n    <NavigationContext.Provider value={contextValue}>\n      {children}\n    </NavigationContext.Provider>\n  );\n}\n\n/**\n * Hook to use navigation context\n */\nexport function useNavigation(): NavigationContextType {\n  const context = useContext(NavigationContext);\n  \n  if (context === undefined) {\n    throw new Error('useNavigation must be used within a NavigationProvider');\n  }\n  \n  return context;\n}\n\n/**\n * Hook for page-specific navigation setup\n */\nexport function usePageNavigation(options: {\n  title?: string;\n  breadcrumbs?: Breadcrumb[];\n}): void {\n  const { setPageTitle, setBreadcrumbs } = useNavigation();\n  \n  useEffect(() => {\n    if (options.title) {\n      setPageTitle(options.title);\n    }\n    \n    if (options.breadcrumbs) {\n      setBreadcrumbs(options.breadcrumbs);\n    }\n  }, [options.title, options.breadcrumbs, setPageTitle, setBreadcrumbs]);\n}\n\n// Export types\nexport { NavigationContext };"],"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","ignoreList":[]}