e4291fa78f2bec31441db802ce52cc72
/**
 * Token Manager Mock Scenarios
 * Complete implementation for auth testing
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get TokenManagerMockScenarios () {
        return TokenManagerMockScenarios;
    },
    get createMockTokenManager () {
        return createMockTokenManager;
    }
});
const TokenManagerMockScenarios = {
    unauthenticated: ()=>({
            getAccessToken: jest.fn(()=>null),
            getRefreshToken: jest.fn(()=>null),
            setTokens: jest.fn(),
            clearTokens: jest.fn(),
            getTokenInfo: jest.fn(()=>({
                    token: null,
                    refreshToken: null,
                    expiresAt: null,
                    isValid: false,
                    isExpired: true
                })),
            updateApiClientToken: jest.fn(),
            getCurrentUserInfo: jest.fn(()=>null),
            needsRefresh: jest.fn(()=>false),
            parseTokenPayload: jest.fn(()=>null)
        }),
    customUser: (overrides)=>({
            getAccessToken: jest.fn(()=>'mock-access-token'),
            getRefreshToken: jest.fn(()=>'mock-refresh-token'),
            setTokens: jest.fn(),
            clearTokens: jest.fn(),
            getTokenInfo: jest.fn(()=>({
                    token: 'mock-access-token',
                    refreshToken: 'mock-refresh-token',
                    expiresAt: new Date(Date.now() + 3600000),
                    isValid: true,
                    isExpired: false
                })),
            updateApiClientToken: jest.fn(),
            getCurrentUserInfo: jest.fn(()=>({
                    userId: overrides?.userId || 'test-user-id',
                    email: overrides?.email || 'test@example.com',
                    role: overrides?.role || 'user'
                })),
            needsRefresh: jest.fn(()=>false),
            parseTokenPayload: jest.fn(()=>({
                    sub: overrides?.userId || 'test-user-id',
                    email: overrides?.email || 'test@example.com',
                    role: overrides?.role || 'user',
                    exp: Math.floor((Date.now() + 3600000) / 1000),
                    iat: Math.floor(Date.now() / 1000)
                }))
        }),
    authenticatedAdmin: ()=>({
            getAccessToken: jest.fn(()=>'mock-admin-token'),
            getRefreshToken: jest.fn(()=>'mock-admin-refresh'),
            setTokens: jest.fn(),
            clearTokens: jest.fn(),
            getTokenInfo: jest.fn(()=>({
                    token: 'mock-admin-token',
                    refreshToken: 'mock-admin-refresh',
                    expiresAt: new Date(Date.now() + 3600000),
                    isValid: true,
                    isExpired: false
                })),
            updateApiClientToken: jest.fn(),
            getCurrentUserInfo: jest.fn(()=>({
                    userId: 'admin-user-id',
                    email: 'admin@example.com',
                    role: 'admin'
                })),
            needsRefresh: jest.fn(()=>false),
            parseTokenPayload: jest.fn(()=>({
                    sub: 'admin-user-id',
                    email: 'admin@example.com',
                    role: 'admin',
                    exp: Math.floor((Date.now() + 3600000) / 1000),
                    iat: Math.floor(Date.now() / 1000)
                }))
        }),
    expiredToken: ()=>({
            getAccessToken: jest.fn(()=>null),
            getRefreshToken: jest.fn(()=>'expired-refresh'),
            setTokens: jest.fn(),
            clearTokens: jest.fn(),
            getTokenInfo: jest.fn(()=>({
                    token: 'expired-token',
                    refreshToken: 'expired-refresh',
                    expiresAt: new Date(Date.now() - 3600000),
                    isValid: false,
                    isExpired: true
                })),
            updateApiClientToken: jest.fn(),
            getCurrentUserInfo: jest.fn(()=>null),
            needsRefresh: jest.fn(()=>true),
            parseTokenPayload: jest.fn(()=>null)
        }),
    // Alias for backward compatibility
    authenticatedUser: (overrides)=>{
        return TokenManagerMockScenarios.customUser(overrides);
    }
};
function createMockTokenManager() {
    return {
        getAccessToken: jest.fn(()=>null),
        getRefreshToken: jest.fn(()=>null),
        setTokens: jest.fn(),
        clearTokens: jest.fn(),
        getTokenInfo: jest.fn(()=>({
                token: null,
                refreshToken: null,
                expiresAt: null,
                isValid: false,
                isExpired: true
            })),
        updateApiClientToken: jest.fn(),
        getCurrentUserInfo: jest.fn(()=>null),
        needsRefresh: jest.fn(()=>false),
        parseTokenPayload: jest.fn(()=>null)
    };
}

//# sourceMappingURL=data:application/json;base64,