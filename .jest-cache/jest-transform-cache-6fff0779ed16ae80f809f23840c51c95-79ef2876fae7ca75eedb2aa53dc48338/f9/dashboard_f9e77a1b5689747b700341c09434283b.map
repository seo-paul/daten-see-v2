{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/dashboard.ts"],"sourcesContent":["/**\n * Dashboard API Service\n * Type-safe dashboard operations\n */\n\nimport type {\n  Dashboard,\n  DashboardWidget,\n  CreateDashboardRequest,\n  UpdateDashboardRequest,\n  CreateWidgetRequest,\n  UpdateWidgetRequest,\n  PaginatedResponse,\n} from '@/types';\n\nimport { apiClient, createQueryFunction } from './index';\n\n/**\n * Dashboard Service Class\n */\nexport class DashboardService {\n  /**\n   * Get all dashboards for current user/workspace\n   */\n  static async getDashboards(workspaceId?: string): Promise<Dashboard[]> {\n    const endpoint = workspaceId \n      ? `/dashboards?workspaceId=${workspaceId}`\n      : '/dashboards';\n    \n    return createQueryFunction(() => \n      apiClient.get<Dashboard[]>(endpoint)\n    )();\n  }\n\n  /**\n   * Get paginated dashboards\n   */\n  static async getDashboardsPaginated(\n    page = 1, \n    limit = 20, \n    workspaceId?: string\n  ): Promise<PaginatedResponse<Dashboard>> {\n    const endpoint = workspaceId \n      ? `/dashboards?workspaceId=${workspaceId}`\n      : '/dashboards';\n    \n    return apiClient.getPaginated<Dashboard>(endpoint, page, limit);\n  }\n\n  /**\n   * Get single dashboard by ID\n   */\n  static async getDashboard(id: string): Promise<Dashboard> {\n    return createQueryFunction(() => \n      apiClient.get<Dashboard>(`/dashboards/${id}`)\n    )();\n  }\n\n  /**\n   * Create new dashboard\n   */\n  static async createDashboard(data: CreateDashboardRequest): Promise<Dashboard> {\n    const response = await apiClient.post<Dashboard, CreateDashboardRequest>(\n      '/dashboards', \n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to create dashboard');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Update existing dashboard\n   */\n  static async updateDashboard(\n    id: string, \n    data: UpdateDashboardRequest\n  ): Promise<Dashboard> {\n    const response = await apiClient.put<Dashboard, UpdateDashboardRequest>(\n      `/dashboards/${id}`, \n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to update dashboard');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Delete dashboard\n   */\n  static async deleteDashboard(id: string): Promise<void> {\n    const response = await apiClient.delete<void>(`/dashboards/${id}`);\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to delete dashboard');\n    }\n  }\n\n  /**\n   * Duplicate dashboard\n   */\n  static async duplicateDashboard(id: string, name?: string): Promise<Dashboard> {\n    const response = await apiClient.post<Dashboard, { name?: string }>(\n      `/dashboards/${id}/duplicate`,\n      name ? { name } : {}\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to duplicate dashboard');\n    }\n    \n    return response.data;\n  }\n}\n\n/**\n * Widget Service Class\n */\nexport class WidgetService {\n  /**\n   * Get all widgets for a dashboard\n   */\n  static async getWidgets(dashboardId: string): Promise<DashboardWidget[]> {\n    return createQueryFunction(() => \n      apiClient.get<DashboardWidget[]>(`/dashboards/${dashboardId}/widgets`)\n    )();\n  }\n\n  /**\n   * Get single widget\n   */\n  static async getWidget(dashboardId: string, widgetId: string): Promise<DashboardWidget> {\n    return createQueryFunction(() => \n      apiClient.get<DashboardWidget>(`/dashboards/${dashboardId}/widgets/${widgetId}`)\n    )();\n  }\n\n  /**\n   * Create new widget\n   */\n  static async createWidget(data: CreateWidgetRequest): Promise<DashboardWidget> {\n    const response = await apiClient.post<DashboardWidget, CreateWidgetRequest>(\n      `/dashboards/${data.dashboardId}/widgets`,\n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to create widget');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Update widget\n   */\n  static async updateWidget(\n    dashboardId: string,\n    widgetId: string,\n    data: UpdateWidgetRequest\n  ): Promise<DashboardWidget> {\n    const response = await apiClient.put<DashboardWidget, UpdateWidgetRequest>(\n      `/dashboards/${dashboardId}/widgets/${widgetId}`,\n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to update widget');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Delete widget\n   */\n  static async deleteWidget(dashboardId: string, widgetId: string): Promise<void> {\n    const response = await apiClient.delete<void>(\n      `/dashboards/${dashboardId}/widgets/${widgetId}`\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to delete widget');\n    }\n  }\n\n  /**\n   * Bulk update widget positions\n   */\n  static async updateWidgetPositions(\n    dashboardId: string,\n    widgets: Pick<DashboardWidget, 'id' | 'position'>[]\n  ): Promise<DashboardWidget[]> {\n    const response = await apiClient.put<DashboardWidget[], typeof widgets>(\n      `/dashboards/${dashboardId}/widgets/positions`,\n      widgets\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to update widget positions');\n    }\n    \n    return response.data;\n  }\n}\n\n// Export services\nexport { DashboardService as dashboardApi, WidgetService as widgetApi };"],"names":["DashboardService","WidgetService","dashboardApi","widgetApi","getDashboards","workspaceId","endpoint","createQueryFunction","apiClient","get","getDashboardsPaginated","page","limit","getPaginated","getDashboard","id","createDashboard","data","response","post","success","Error","message","updateDashboard","put","deleteDashboard","delete","duplicateDashboard","name","getWidgets","dashboardId","getWidget","widgetId","createWidget","updateWidget","deleteWidget","updateWidgetPositions","widgets"],"mappings":"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"}