{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/dashboard/__tests__/CreateDashboardModal.test.tsx"],"sourcesContent":["/**\n * CreateDashboardModal Component Tests - Streamlined\n * Testing core modal functionality only (Reduced from 117 → 12 tests)\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { CreateDashboardModal } from '../CreateDashboardModal';\nimport type { CreateDashboardRequest } from '@/types/dashboard.types';\n\ndescribe('CreateDashboardModal', () => {\n  const defaultProps = {\n    isOpen: true,\n    onClose: jest.fn(),\n    onSubmit: jest.fn(),\n    isLoading: false,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Core rendering test\n  it('should render modal with form fields when open', () => {\n    render(<CreateDashboardModal {...defaultProps} />);\n    \n    expect(screen.getByText('Neues Dashboard erstellen')).toBeInTheDocument();\n    expect(screen.getByLabelText('Dashboard Name')).toBeInTheDocument();\n    expect(screen.getByLabelText('Beschreibung')).toBeInTheDocument();\n    expect(screen.getByLabelText('Dashboard öffentlich machen')).toBeInTheDocument();\n  });\n\n  // Visibility control test\n  it('should not render when closed', () => {\n    render(<CreateDashboardModal {...defaultProps} isOpen={false} />);\n    expect(screen.queryByText('Neues Dashboard erstellen')).not.toBeInTheDocument();\n  });\n\n  // Form submission test\n  it('should call onSubmit with form data', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    const descInput = screen.getByLabelText('Beschreibung');\n    const publicCheckbox = screen.getByLabelText('Dashboard öffentlich machen');\n    \n    await user.type(nameInput, 'New Dashboard');\n    await user.type(descInput, 'Dashboard description');\n    await user.click(publicCheckbox);\n    \n    await user.click(screen.getByText('Dashboard erstellen'));\n\n    expect(defaultProps.onSubmit).toHaveBeenCalledWith({\n      name: 'New Dashboard',\n      description: 'Dashboard description',\n      isPublic: true,\n    });\n  });\n\n  // Cancel functionality test\n  it('should call onClose when cancel is clicked', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    await user.click(screen.getByText('Abbrechen'));\n    expect(defaultProps.onClose).toHaveBeenCalled();\n  });\n\n  // Loading state test\n  it('should show loading state and disable submit', () => {\n    render(<CreateDashboardModal {...defaultProps} isLoading={true} />);\n\n    const submitButton = screen.getByText('Dashboard erstellen');\n    expect(submitButton).toBeDisabled();\n  });\n\n  // Form validation test\n  it('should not submit with empty name', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    await user.click(screen.getByText('Dashboard erstellen'));\n    \n    expect(defaultProps.onSubmit).not.toHaveBeenCalled();\n  });\n\n  // Close modal on backdrop click test\n  it('should close modal when clicking outside', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    const modalOverlay = screen.getByRole('dialog').parentElement;\n    if (modalOverlay) {\n      await user.click(modalOverlay);\n      expect(defaultProps.onClose).toHaveBeenCalled();\n    }\n  });\n\n  // Keyboard navigation test  \n  it('should close modal with Escape key', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    await user.keyboard('{Escape}');\n    expect(defaultProps.onClose).toHaveBeenCalled();\n  });\n\n  // Public toggle test\n  it('should toggle public status correctly', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    const publicCheckbox = screen.getByLabelText('Dashboard öffentlich machen');\n    expect(publicCheckbox).not.toBeChecked();\n    \n    await user.click(publicCheckbox);\n    expect(publicCheckbox).toBeChecked();\n  });\n\n  // Error state test  \n  it('should display form validation errors', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    await user.clear(nameInput);\n    await user.tab(); // Blur to trigger validation\n    \n    await waitFor(() => {\n      expect(screen.getByText(/Name ist erforderlich/i)).toBeInTheDocument();\n    });\n  });\n\n  // Focus management test\n  it('should focus name input when modal opens', () => {\n    render(<CreateDashboardModal {...defaultProps} />);\n    \n    const nameInput = screen.getByLabelText('Dashboard Name');\n    expect(nameInput).toHaveFocus();\n  });\n\n  // Empty description handling test\n  it('should handle optional description field', async () => {\n    const user = userEvent.setup();\n    render(<CreateDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    await user.type(nameInput, 'Dashboard without description');\n    \n    await user.click(screen.getByText('Dashboard erstellen'));\n\n    expect(defaultProps.onSubmit).toHaveBeenCalledWith({\n      name: 'Dashboard without description',\n      description: '',\n      isPublic: false,\n    });\n  });\n});"],"names":["describe","defaultProps","isOpen","onClose","jest","fn","onSubmit","isLoading","beforeEach","clearAllMocks","it","render","CreateDashboardModal","expect","screen","getByText","toBeInTheDocument","getByLabelText","queryByText","not","user","userEvent","setup","nameInput","descInput","publicCheckbox","type","click","toHaveBeenCalledWith","name","description","isPublic","toHaveBeenCalled","submitButton","toBeDisabled","modalOverlay","getByRole","parentElement","keyboard","toBeChecked","clear","tab","waitFor","toHaveFocus"],"mappings":"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"}