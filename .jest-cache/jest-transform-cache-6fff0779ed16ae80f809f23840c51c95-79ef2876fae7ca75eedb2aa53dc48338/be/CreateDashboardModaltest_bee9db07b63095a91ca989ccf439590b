1f63d8e825303ac5dd21782c591a5d08
/**
 * CreateDashboardModal Component Tests - Streamlined
 * Testing core modal functionality only (Reduced from 117 → 12 tests)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _CreateDashboardModal = require("../CreateDashboardModal");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('CreateDashboardModal', ()=>{
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        onSubmit: jest.fn(),
        isLoading: false
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // Core rendering test
    it('should render modal with form fields when open', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        expect(_react.screen.getByText('Neues Dashboard erstellen')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Dashboard Name')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Beschreibung')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Dashboard öffentlich machen')).toBeInTheDocument();
    });
    // Visibility control test
    it('should not render when closed', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps,
            isOpen: false
        }));
        expect(_react.screen.queryByText('Neues Dashboard erstellen')).not.toBeInTheDocument();
    });
    // Form submission test
    it('should call onSubmit with form data', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        const descInput = _react.screen.getByLabelText('Beschreibung');
        const publicCheckbox = _react.screen.getByLabelText('Dashboard öffentlich machen');
        await user.type(nameInput, 'New Dashboard');
        await user.type(descInput, 'Dashboard description');
        await user.click(publicCheckbox);
        await user.click(_react.screen.getByText('Dashboard erstellen'));
        expect(defaultProps.onSubmit).toHaveBeenCalledWith({
            name: 'New Dashboard',
            description: 'Dashboard description',
            isPublic: true
        });
    });
    // Cancel functionality test
    it('should call onClose when cancel is clicked', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        await user.click(_react.screen.getByText('Abbrechen'));
        expect(defaultProps.onClose).toHaveBeenCalled();
    });
    // Loading state test
    it('should show loading state and disable submit', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps,
            isLoading: true
        }));
        const submitButton = _react.screen.getByText('Dashboard erstellen');
        expect(submitButton).toBeDisabled();
    });
    // Form validation test
    it('should not submit with empty name', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        await user.click(_react.screen.getByText('Dashboard erstellen'));
        expect(defaultProps.onSubmit).not.toHaveBeenCalled();
    });
    // Close modal on backdrop click test
    it('should close modal when clicking outside', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const modalOverlay = _react.screen.getByRole('dialog').parentElement;
        if (modalOverlay) {
            await user.click(modalOverlay);
            expect(defaultProps.onClose).toHaveBeenCalled();
        }
    });
    // Keyboard navigation test  
    it('should close modal with Escape key', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        await user.keyboard('{Escape}');
        expect(defaultProps.onClose).toHaveBeenCalled();
    });
    // Public toggle test
    it('should toggle public status correctly', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const publicCheckbox = _react.screen.getByLabelText('Dashboard öffentlich machen');
        expect(publicCheckbox).not.toBeChecked();
        await user.click(publicCheckbox);
        expect(publicCheckbox).toBeChecked();
    });
    // Error state test  
    it('should display form validation errors', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        await user.clear(nameInput);
        await user.tab(); // Blur to trigger validation
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Name ist erforderlich/i)).toBeInTheDocument();
        });
    });
    // Focus management test
    it('should focus name input when modal opens', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        expect(nameInput).toHaveFocus();
    });
    // Empty description handling test
    it('should handle optional description field', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateDashboardModal.CreateDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        await user.type(nameInput, 'Dashboard without description');
        await user.click(_react.screen.getByText('Dashboard erstellen'));
        expect(defaultProps.onSubmit).toHaveBeenCalledWith({
            name: 'Dashboard without description',
            description: '',
            isPublic: false
        });
    });
});

//# sourceMappingURL=data:application/json;base64,