{"version":3,"names":["cov_13uwrfo6ka","actualCoverage","s","QueryPerformanceDashboard","f","useQueryPerformanceDashboard","isVisible","onClose","queryClient","_reactquery","useQueryClient","refreshInterval","setRefreshInterval","_react","useState","selectedDomain","setSelectedDomain","sortBy","setSortBy","performanceData","useMemo","getQueryCache","getAll","map","query","queryKey","status","state","fetchStatus","isStale","dataUpdateCount","errorUpdateCount","observersCount","getObserversCount","dataUpdatedAt","lastFetchTime","cacheTime","staleTime","filteredData","filtered","b","filter","Array","isArray","sort","a","domainStats","stats","forEach","domain","total","stale","errors","loading","avgUpdateCount","Object","keys","domainStat","useEffect","interval","setInterval","clearInterval","_jsxruntime","jsx","style","position","top","left","right","bottom","background","color","zIndex","overflow","fontFamily","fontSize","jsxs","padding","display","justifyContent","alignItems","marginBottom","borderBottom","paddingBottom","margin","gap","value","onChange","e","Number","target","marginLeft","border","onClick","borderRadius","cursor","gridTemplateColumns","entries","fontWeight","toFixed","clear","invalidateQueries","refetchQueries","length","maxHeight","index","textOverflow","JSON","stringify","Date","toLocaleTimeString","setIsVisible","handleKeyDown","event","ctrlKey","metaKey","shiftKey","key","preventDefault","prev","window","addEventListener","removeEventListener","toggle","show","hide"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/devtools-dashboard.tsx"],"sourcesContent":["/**\n * Advanced Query Performance Dashboard\n * Comprehensive development tools for TanStack Query optimization\n */\n\n'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { useEffect, useState, useMemo } from 'react';\n\n\ninterface QueryPerformanceData {\n  queryKey: readonly unknown[];\n  status: 'pending' | 'error' | 'success';\n  fetchStatus: 'fetching' | 'paused' | 'idle';\n  isStale: boolean;\n  dataUpdateCount: number;\n  errorUpdateCount: number;\n  observersCount: number;\n  dataUpdatedAt: number;\n  lastFetchTime?: number;\n  cacheTime?: number;\n  staleTime?: number;\n}\n\ninterface DashboardProps {\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nexport function QueryPerformanceDashboard({ isVisible, onClose }: DashboardProps): React.ReactElement | null {\n  const queryClient = useQueryClient();\n  const [refreshInterval, setRefreshInterval] = useState(1000);\n  const [selectedDomain, setSelectedDomain] = useState<string | null>(null);\n  const [sortBy, setSortBy] = useState<'updateCount' | 'observers' | 'staleTime'>('updateCount');\n\n  // Performance data collection\n  const performanceData = useMemo((): QueryPerformanceData[] => {\n    return queryClient.getQueryCache().getAll().map(query => ({\n      queryKey: query.queryKey,\n      status: query.state.status,\n      fetchStatus: query.state.fetchStatus,\n      isStale: query.isStale(),\n      dataUpdateCount: query.state.dataUpdateCount,\n      errorUpdateCount: query.state.errorUpdateCount,\n      observersCount: query.getObserversCount(),\n      dataUpdatedAt: query.state.dataUpdatedAt,\n      lastFetchTime: query.state.dataUpdatedAt,\n      // Note: These are internal and may not be available\n      cacheTime: (query as unknown as Record<string, unknown>).cacheTime as number,\n      staleTime: (query as unknown as Record<string, unknown>).staleTime as number,\n    }));\n  }, [queryClient]);\n\n  // Filtered and sorted data\n  const filteredData = useMemo(() => {\n    let filtered = performanceData;\n    \n    if (selectedDomain) {\n      filtered = filtered.filter(query => \n        Array.isArray(query.queryKey) && query.queryKey[0] === selectedDomain\n      );\n    }\n\n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'updateCount':\n          return b.dataUpdateCount - a.dataUpdateCount;\n        case 'observers':\n          return b.observersCount - a.observersCount;\n        case 'staleTime':\n          return (b.staleTime || 0) - (a.staleTime || 0);\n        default:\n          return 0;\n      }\n    });\n  }, [performanceData, selectedDomain, sortBy]);\n\n  // Domain statistics\n  const domainStats = useMemo(() => {\n    const stats: Record<string, {\n      total: number;\n      stale: number;\n      errors: number;\n      loading: number;\n      avgUpdateCount: number;\n    }> = {};\n\n    performanceData.forEach(query => {\n      const domain = Array.isArray(query.queryKey) ? query.queryKey[0] as string : 'unknown';\n      \n      if (!stats[domain]) {\n        stats[domain] = {\n          total: 0,\n          stale: 0,\n          errors: 0,\n          loading: 0,\n          avgUpdateCount: 0,\n        };\n      }\n\n      stats[domain].total++;\n      if (query.isStale) stats[domain].stale++;\n      if (query.status === 'error') stats[domain].errors++;\n      if (query.status === 'pending') stats[domain].loading++;\n      stats[domain].avgUpdateCount += query.dataUpdateCount;\n    });\n\n    // Calculate averages\n    Object.keys(stats).forEach(domain => {\n      const domainStat = stats[domain];\n      if (domainStat && domainStat.total > 0) {\n        domainStat.avgUpdateCount /= domainStat.total;\n      }\n    });\n\n    return stats;\n  }, [performanceData]);\n\n  // Auto-refresh logic\n  useEffect(() => {\n    if (!isVisible || refreshInterval === 0) return;\n\n    const interval = setInterval((): void => {\n      // Force re-render by accessing cache\n      queryClient.getQueryCache().getAll();\n    }, refreshInterval);\n\n    return (): void => clearInterval(interval);\n  }, [isVisible, refreshInterval, queryClient]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      background: 'rgba(0, 0, 0, 0.95)',\n      color: 'white',\n      zIndex: 10000,\n      overflow: 'auto',\n      fontFamily: 'monospace',\n      fontSize: '12px',\n    }}>\n      <div style={{ padding: '20px' }}>\n        {/* Header */}\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          marginBottom: '20px',\n          borderBottom: '1px solid #333',\n          paddingBottom: '10px',\n        }}>\n          <h2 style={{ margin: 0, fontSize: '18px' }}>\n            ðŸš€ Query Performance Dashboard\n          </h2>\n          <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n            <label>\n              Refresh:\n              <select \n                value={refreshInterval}\n                onChange={(e) => setRefreshInterval(Number(e.target.value))}\n                style={{ marginLeft: '5px', background: '#333', color: 'white', border: 'none' }}\n              >\n                <option value={0}>Off</option>\n                <option value={500}>500ms</option>\n                <option value={1000}>1s</option>\n                <option value={2000}>2s</option>\n                <option value={5000}>5s</option>\n              </select>\n            </label>\n            <button\n              onClick={onClose}\n              style={{\n                background: '#666',\n                color: 'white',\n                border: 'none',\n                padding: '8px 16px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n\n        {/* Domain Overview */}\n        <div style={{ marginBottom: '20px' }}>\n          <h3 style={{ margin: '0 0 10px 0' }}>Domain Overview</h3>\n          <div style={{ \n            display: 'grid', \n            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\n            gap: '10px',\n          }}>\n            {Object.entries(domainStats).map(([domain, stats]) => (\n              <div \n                key={domain}\n                onClick={() => setSelectedDomain(selectedDomain === domain ? null : domain)}\n                style={{\n                  background: selectedDomain === domain ? '#444' : '#222',\n                  padding: '10px',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  border: selectedDomain === domain ? '2px solid #666' : '1px solid #333',\n                }}\n              >\n                <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>{domain}</div>\n                <div>Total: {stats.total}</div>\n                <div>Stale: {stats.stale}</div>\n                <div>Errors: {stats.errors}</div>\n                <div>Loading: {stats.loading}</div>\n                <div>Avg Updates: {stats.avgUpdateCount.toFixed(1)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div style={{ \n          display: 'flex', \n          gap: '20px', \n          marginBottom: '20px',\n          padding: '10px',\n          background: '#222',\n          borderRadius: '4px',\n        }}>\n          <label>\n            Sort by:\n            <select \n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as typeof sortBy)}\n              style={{ marginLeft: '5px', background: '#333', color: 'white', border: 'none' }}\n            >\n              <option value=\"updateCount\">Update Count</option>\n              <option value=\"observers\">Observers</option>\n              <option value=\"staleTime\">Stale Time</option>\n            </select>\n          </label>\n          \n          <div style={{ display: 'flex', gap: '10px' }}>\n            <button\n              onClick={() => queryClient.clear()}\n              style={{\n                background: '#d32f2f',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Clear All\n            </button>\n            <button\n              onClick={() => queryClient.invalidateQueries()}\n              style={{\n                background: '#f57c00',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Invalidate All\n            </button>\n            <button\n              onClick={() => queryClient.refetchQueries()}\n              style={{\n                background: '#388e3c',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n              }}\n            >\n              Refetch All\n            </button>\n          </div>\n        </div>\n\n        {/* Query List */}\n        <div>\n          <h3 style={{ margin: '0 0 10px 0' }}>\n            Query Details ({filteredData.length} queries)\n            {selectedDomain && ` - ${selectedDomain}`}\n          </h3>\n          <div style={{\n            display: 'grid',\n            gridTemplateColumns: '1fr 100px 80px 60px 60px 80px 120px',\n            gap: '10px',\n            alignItems: 'center',\n            padding: '10px',\n            background: '#333',\n            borderRadius: '4px',\n            marginBottom: '5px',\n            fontWeight: 'bold',\n          }}>\n            <div>Query Key</div>\n            <div>Status</div>\n            <div>Updates</div>\n            <div>Errors</div>\n            <div>Obs</div>\n            <div>Stale</div>\n            <div>Last Updated</div>\n          </div>\n          \n          <div style={{ maxHeight: '400px', overflow: 'auto' }}>\n            {filteredData.map((query, index) => (\n              <div \n                key={index}\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 100px 80px 60px 60px 80px 120px',\n                  gap: '10px',\n                  alignItems: 'center',\n                  padding: '8px 10px',\n                  background: index % 2 === 0 ? '#222' : '#111',\n                  borderRadius: '2px',\n                  fontSize: '11px',\n                }}\n              >\n                <div style={{ \n                  overflow: 'hidden', \n                  textOverflow: 'ellipsis',\n                  fontFamily: 'monospace',\n                }}>\n                  {JSON.stringify(query.queryKey)}\n                </div>\n                <div style={{\n                  color: query.status === 'error' ? '#f44336' :\n                        query.status === 'pending' ? '#ff9800' :\n                        query.status === 'success' ? '#4caf50' : 'white'\n                }}>\n                  {query.status}\n                </div>\n                <div>{query.dataUpdateCount}</div>\n                <div style={{ color: query.errorUpdateCount > 0 ? '#f44336' : '#666' }}>\n                  {query.errorUpdateCount}\n                </div>\n                <div>{query.observersCount}</div>\n                <div style={{ color: query.isStale ? '#ff9800' : '#666' }}>\n                  {query.isStale ? 'Yes' : 'No'}\n                </div>\n                <div>\n                  {query.dataUpdatedAt > 0 \n                    ? new Date(query.dataUpdatedAt).toLocaleTimeString()\n                    : 'Never'\n                  }\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Hook to control dashboard visibility\nexport function useQueryPerformanceDashboard(): {\n  isVisible: boolean;\n  toggle: () => void;\n  show: () => void;\n  hide: () => void;\n} {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Keyboard shortcut to toggle dashboard\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      // Ctrl/Cmd + Shift + P to toggle performance dashboard\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'P') {\n        event.preventDefault();\n        setIsVisible(prev => !prev);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return (): void => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  return {\n    isVisible,\n    toggle: () => setIsVisible(prev => !prev),\n    show: () => setIsVisible(true),\n    hide: () => setIsVisible(false),\n  };\n}"],"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","ignoreList":[]}