{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/dashboard/CreateDashboardModal.tsx"],"sourcesContent":["'use client';\n\nimport { X } from 'lucide-react';\nimport { useState } from 'react';\n\nimport { sanitizeName, sanitizeTextContent } from '@/lib/utils/sanitization';\nimport type { CreateDashboardRequest } from '@/types/dashboard.types';\n\ninterface CreateDashboardModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: CreateDashboardRequest) => Promise<string>;\n  isLoading: boolean;\n}\n\nexport function CreateDashboardModal({ \n  isOpen, \n  onClose, \n  onSubmit, \n  isLoading \n}: CreateDashboardModalProps): React.ReactElement | null {\n  const [formData, setFormData] = useState<CreateDashboardRequest>({\n    name: '',\n    description: '',\n    isPublic: false\n  });\n  const [errors, setErrors] = useState<Partial<CreateDashboardRequest>>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<CreateDashboardRequest> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name ist erforderlich';\n    } else if (formData.name.length < 3) {\n      newErrors.name = 'Name muss mindestens 3 Zeichen lang sein';\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = 'Beschreibung ist erforderlich';\n    } else if (formData.description.length < 10) {\n      newErrors.description = 'Beschreibung muss mindestens 10 Zeichen lang sein';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      // Sanitize input data before submission\n      const sanitizedData: CreateDashboardRequest = {\n        name: sanitizeName(formData.name, 100),\n        description: sanitizeTextContent(formData.description),\n        isPublic: formData.isPublic\n      };\n\n      await onSubmit(sanitizedData);\n      // Reset form on success\n      setFormData({ name: '', description: '', isPublic: false });\n      setErrors({});\n      onClose();\n    } catch (error) {\n      // Check if it's a sanitization error\n      if (error instanceof Error && error.message.includes('Name cannot')) {\n        setErrors({ name: error.message });\n      } else {\n        // Other errors are handled in the parent component\n        throw error;\n      }\n    }\n  };\n\n  const handleClose = (): void => {\n    setFormData({ name: '', description: '', isPublic: false });\n    setErrors({});\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/50 z-40\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"fixed inset-0 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-[#FDF9F3] rounded-lg shadow-xl w-full max-w-md\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-[#E6D7B8]\">\n            <h2 className=\"text-lg font-semibold text-[#3d3d3d]\">\n              Neues Dashboard erstellen\n            </h2>\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"p-2 text-[#5d5d5d] hover:text-[#3d3d3d] hover:bg-[#FBF5ED] rounded-lg transition-colors\"\n              aria-label=\"Close modal\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\n            {/* Name Field */}\n            <div>\n              <label htmlFor=\"dashboard-name\" className=\"block text-sm font-medium text-[#3d3d3d] mb-2\">\n                Dashboard Name\n              </label>\n              <input\n                id=\"dashboard-name\"\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#2F4F73] transition-colors ${\n                  errors.name ? 'border-red-300' : 'border-[#E6D7B8]'\n                }`}\n                placeholder=\"z.B. Sales Analytics\"\n                disabled={isLoading}\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n              )}\n            </div>\n\n            {/* Description Field */}\n            <div>\n              <label htmlFor=\"dashboard-description\" className=\"block text-sm font-medium text-[#3d3d3d] mb-2\">\n                Beschreibung\n              </label>\n              <textarea\n                id=\"dashboard-description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                rows={3}\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#2F4F73] resize-none transition-colors ${\n                  errors.description ? 'border-red-300' : 'border-[#E6D7B8]'\n                }`}\n                placeholder=\"Beschreibe das Dashboard und seinen Zweck...\"\n                disabled={isLoading}\n              />\n              {errors.description && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>\n              )}\n            </div>\n\n            {/* Public/Private Toggle */}\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"isPublic\"\n                checked={formData.isPublic}\n                onChange={(e) => setFormData(prev => ({ ...prev, isPublic: e.target.checked }))}\n                className=\"w-4 h-4 text-[#2F4F73] border-[#E6D7B8] rounded focus:ring-[#2F4F73]\"\n                disabled={isLoading}\n              />\n              <label htmlFor=\"isPublic\" className=\"ml-2 text-sm text-[#3d3d3d]\">\n                Dashboard Ã¶ffentlich machen\n              </label>\n            </div>\n          </form>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-end space-x-3 p-6 border-t border-[#E6D7B8]\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"px-4 py-2 text-sm font-medium text-[#3d3d3d] bg-[#FBF5ED] hover:bg-[#F5EFE7] rounded-lg transition-colors\"\n              disabled={isLoading}\n            >\n              Abbrechen\n            </button>\n            <button\n              type=\"submit\"\n              onClick={handleSubmit}\n              disabled={isLoading}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-[#2F4F73] hover:bg-[#365C83] rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? 'Erstelle...' : 'Dashboard erstellen'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}"],"names":["CreateDashboardModal","isOpen","onClose","onSubmit","isLoading","formData","setFormData","useState","name","description","isPublic","errors","setErrors","validateForm","newErrors","trim","length","Object","keys","handleSubmit","e","preventDefault","sanitizedData","sanitizeName","sanitizeTextContent","error","Error","message","includes","handleClose","div","className","onClick","h2","button","type","aria-label","X","form","label","htmlFor","input","id","value","onChange","prev","target","placeholder","disabled","p","textarea","rows","checked"],"mappings":"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"}