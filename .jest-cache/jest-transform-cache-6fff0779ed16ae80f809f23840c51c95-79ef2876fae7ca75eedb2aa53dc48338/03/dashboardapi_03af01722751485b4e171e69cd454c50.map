{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/dashboard.api.ts"],"sourcesContent":["/**\n * Dashboard API Client\n * RESTful API operations for dashboard management\n */\n\nimport type { Dashboard, DashboardListItem, CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\n// Initial mock data for development - will be replaced with real API calls\nconst initialMockDashboards: DashboardListItem[] = [\n  {\n    id: 'dash-1',\n    name: 'Sales Analytics',\n    description: 'Comprehensive sales performance tracking',\n    isPublic: false,\n    updatedAt: new Date('2024-01-15T10:30:00Z'),\n    widgetCount: 5,\n  },\n  {\n    id: 'dash-2', \n    name: 'Marketing Campaign',\n    description: 'Track campaign performance across channels',\n    isPublic: true,\n    updatedAt: new Date('2024-01-14T16:45:00Z'),\n    widgetCount: 3,\n  },\n  {\n    id: 'dash-3',\n    name: 'Customer Insights',\n    description: 'Customer behavior and demographics analysis',\n    isPublic: false,\n    updatedAt: new Date('2024-01-13T09:15:00Z'),\n    widgetCount: 4,\n  },\n];\n\n// Working copy of mock data that can be mutated\nlet mockDashboards = [...initialMockDashboards];\n\n// Reset function for testing\nexport const resetMockDashboards = (): void => {\n  mockDashboards = initialMockDashboards.map(d => ({ ...d }));\n};\n\nexport const dashboardApi = {\n  /**\n   * Get all dashboards\n   */\n  async getAll(): Promise<DashboardListItem[]> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return [...mockDashboards];\n  },\n\n  /**\n   * Get dashboard by ID\n   */\n  async getById(id: string): Promise<Dashboard> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    const dashboard = mockDashboards.find(d => d.id === id);\n    if (!dashboard) {\n      throw new Error(`Dashboard with ID ${id} not found`);\n    }\n\n    // Convert to full dashboard object\n    return {\n      ...dashboard,\n      createdAt: new Date('2024-01-01T10:00:00Z'),\n      widgets: [],\n      settings: {\n        backgroundColor: '#f8fafc',\n        gridSize: 24,\n        autoRefresh: true,\n        refreshInterval: 300,\n      },\n    };\n  },\n\n  /**\n   * Create new dashboard\n   */\n  async create(data: CreateDashboardRequest): Promise<{ dashboardId: string }> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const newDashboard: DashboardListItem = {\n      id: `dash-${Date.now()}`,\n      name: data.name,\n      description: data.description,\n      isPublic: data.isPublic,\n      updatedAt: new Date(),\n      widgetCount: 0,\n    };\n\n    mockDashboards.push(newDashboard);\n    \n    return { dashboardId: newDashboard.id };\n  },\n\n  /**\n   * Update existing dashboard\n   */\n  async update(id: string, data: UpdateDashboardRequest): Promise<void> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    const index = mockDashboards.findIndex(d => d.id === id);\n    if (index === -1) {\n      throw new Error(`Dashboard with ID ${id} not found`);\n    }\n\n    const existingDashboard = mockDashboards[index];\n    if (!existingDashboard) {\n      throw new Error(`Dashboard with ID ${id} not found`);\n    }\n    \n    mockDashboards[index] = {\n      ...existingDashboard,\n      ...data,\n      id: existingDashboard.id, // Preserve required id\n      name: data.name ?? existingDashboard.name,\n      description: data.description ?? existingDashboard.description,\n      isPublic: data.isPublic ?? existingDashboard.isPublic,\n      updatedAt: new Date(),\n      widgetCount: existingDashboard.widgetCount, // Preserve required widgetCount\n    };\n  },\n\n  /**\n   * Delete dashboard\n   */\n  async delete(id: string): Promise<void> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const index = mockDashboards.findIndex(d => d.id === id);\n    if (index === -1) {\n      throw new Error(`Dashboard with ID ${id} not found`);\n    }\n\n    mockDashboards.splice(index, 1);\n  },\n};"],"names":["dashboardApi","resetMockDashboards","initialMockDashboards","id","name","description","isPublic","updatedAt","Date","widgetCount","mockDashboards","map","d","getAll","Promise","resolve","setTimeout","getById","dashboard","find","Error","createdAt","widgets","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","create","data","newDashboard","now","push","dashboardId","update","index","findIndex","existingDashboard","delete","splice"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QAwCYA;eAAAA;;QAJAC;eAAAA;;;AAhCb,2EAA2E;AAC3E,MAAMC,wBAA6C;IACjD;QACEC,IAAI;QACJC,MAAM;QACNC,aAAa;QACbC,UAAU;QACVC,WAAW,IAAIC,KAAK;QACpBC,aAAa;IACf;IACA;QACEN,IAAI;QACJC,MAAM;QACNC,aAAa;QACbC,UAAU;QACVC,WAAW,IAAIC,KAAK;QACpBC,aAAa;IACf;IACA;QACEN,IAAI;QACJC,MAAM;QACNC,aAAa;QACbC,UAAU;QACVC,WAAW,IAAIC,KAAK;QACpBC,aAAa;IACf;CACD;AAED,gDAAgD;AAChD,IAAIC,iBAAiB;OAAIR;CAAsB;AAGxC,MAAMD,sBAAsB;IACjCS,iBAAiBR,sBAAsBS,GAAG,CAACC,CAAAA,IAAM,CAAA;YAAE,GAAGA,CAAC;QAAC,CAAA;AAC1D;AAEO,MAAMZ,eAAe;IAC1B;;GAEC,GACD,MAAMa;QACJ,qBAAqB;QACrB,MAAM,IAAIC,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QACjD,OAAO;eAAIL;SAAe;IAC5B;IAEA;;GAEC,GACD,MAAMO,SAAQd,EAAU;QACtB,qBAAqB;QACrB,MAAM,IAAIW,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,MAAMG,YAAYR,eAAeS,IAAI,CAACP,CAAAA,IAAKA,EAAET,EAAE,KAAKA;QACpD,IAAI,CAACe,WAAW;YACd,MAAM,IAAIE,MAAM,CAAC,kBAAkB,EAAEjB,GAAG,UAAU,CAAC;QACrD;QAEA,mCAAmC;QACnC,OAAO;YACL,GAAGe,SAAS;YACZG,WAAW,IAAIb,KAAK;YACpBc,SAAS,EAAE;YACXC,UAAU;gBACRC,iBAAiB;gBACjBC,UAAU;gBACVC,aAAa;gBACbC,iBAAiB;YACnB;QACF;IACF;IAEA;;GAEC,GACD,MAAMC,QAAOC,IAA4B;QACvC,qBAAqB;QACrB,MAAM,IAAIf,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,MAAMe,eAAkC;YACtC3B,IAAI,CAAC,KAAK,EAAEK,KAAKuB,GAAG,IAAI;YACxB3B,MAAMyB,KAAKzB,IAAI;YACfC,aAAawB,KAAKxB,WAAW;YAC7BC,UAAUuB,KAAKvB,QAAQ;YACvBC,WAAW,IAAIC;YACfC,aAAa;QACf;QAEAC,eAAesB,IAAI,CAACF;QAEpB,OAAO;YAAEG,aAAaH,aAAa3B,EAAE;QAAC;IACxC;IAEA;;GAEC,GACD,MAAM+B,QAAO/B,EAAU,EAAE0B,IAA4B;QACnD,qBAAqB;QACrB,MAAM,IAAIf,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,MAAMoB,QAAQzB,eAAe0B,SAAS,CAACxB,CAAAA,IAAKA,EAAET,EAAE,KAAKA;QACrD,IAAIgC,UAAU,CAAC,GAAG;YAChB,MAAM,IAAIf,MAAM,CAAC,kBAAkB,EAAEjB,GAAG,UAAU,CAAC;QACrD;QAEA,MAAMkC,oBAAoB3B,cAAc,CAACyB,MAAM;QAC/C,IAAI,CAACE,mBAAmB;YACtB,MAAM,IAAIjB,MAAM,CAAC,kBAAkB,EAAEjB,GAAG,UAAU,CAAC;QACrD;QAEAO,cAAc,CAACyB,MAAM,GAAG;YACtB,GAAGE,iBAAiB;YACpB,GAAGR,IAAI;YACP1B,IAAIkC,kBAAkBlC,EAAE;YACxBC,MAAMyB,KAAKzB,IAAI,IAAIiC,kBAAkBjC,IAAI;YACzCC,aAAawB,KAAKxB,WAAW,IAAIgC,kBAAkBhC,WAAW;YAC9DC,UAAUuB,KAAKvB,QAAQ,IAAI+B,kBAAkB/B,QAAQ;YACrDC,WAAW,IAAIC;YACfC,aAAa4B,kBAAkB5B,WAAW;QAC5C;IACF;IAEA;;GAEC,GACD,MAAM6B,QAAOnC,EAAU;QACrB,qBAAqB;QACrB,MAAM,IAAIW,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,MAAMoB,QAAQzB,eAAe0B,SAAS,CAACxB,CAAAA,IAAKA,EAAET,EAAE,KAAKA;QACrD,IAAIgC,UAAU,CAAC,GAAG;YAChB,MAAM,IAAIf,MAAM,CAAC,kBAAkB,EAAEjB,GAAG,UAAU,CAAC;QACrD;QAEAO,eAAe6B,MAAM,CAACJ,OAAO;IAC/B;AACF"}