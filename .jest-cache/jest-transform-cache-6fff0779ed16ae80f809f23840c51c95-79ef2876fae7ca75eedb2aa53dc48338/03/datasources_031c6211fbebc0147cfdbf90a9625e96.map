{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/data-sources.ts"],"sourcesContent":["/**\n * Data Sources API Service\n * Type-safe data source operations\n */\n\nimport type {\n  DataSource,\n  DataSourceType,\n  DataSourceConfig,\n  AnalyticsQuery,\n  AnalyticsResponse,\n} from '@/types';\n\nimport { apiClient, createQueryFunction } from './index';\n\n/**\n * Data Source Service Class\n */\nexport class DataSourceService {\n  /**\n   * Get all data sources for workspace\n   */\n  static async getDataSources(workspaceId?: string): Promise<DataSource[]> {\n    const endpoint = workspaceId \n      ? `/data-sources?workspaceId=${workspaceId}`\n      : '/data-sources';\n    \n    return createQueryFunction(() => \n      apiClient.get<DataSource[]>(endpoint)\n    )();\n  }\n\n  /**\n   * Get single data source\n   */\n  static async getDataSource(id: string): Promise<DataSource> {\n    return createQueryFunction(() => \n      apiClient.get<DataSource>(`/data-sources/${id}`)\n    )();\n  }\n\n  /**\n   * Create new data source\n   */\n  static async createDataSource(data: {\n    name: string;\n    type: DataSourceType;\n    config: DataSourceConfig;\n    workspaceId?: string;\n  }): Promise<DataSource> {\n    const response = await apiClient.post<DataSource, typeof data>(\n      '/data-sources',\n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to create data source');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Update data source\n   */\n  static async updateDataSource(\n    id: string,\n    data: {\n      name?: string;\n      config?: Partial<DataSourceConfig>;\n    }\n  ): Promise<DataSource> {\n    const response = await apiClient.put<DataSource, typeof data>(\n      `/data-sources/${id}`,\n      data\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to update data source');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Delete data source\n   */\n  static async deleteDataSource(id: string): Promise<void> {\n    const response = await apiClient.delete<void>(`/data-sources/${id}`);\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to delete data source');\n    }\n  }\n\n  /**\n   * Test data source connection\n   */\n  static async testConnection(id: string): Promise<{ connected: boolean; error?: string }> {\n    const response = await apiClient.post<{ connected: boolean; error?: string }>(\n      `/data-sources/${id}/test`\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to test connection');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Sync data source (refresh data)\n   */\n  static async syncDataSource(id: string): Promise<{ success: boolean; lastSync: string }> {\n    const response = await apiClient.post<{ success: boolean; lastSync: string }>(\n      `/data-sources/${id}/sync`\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to sync data source');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Get available metrics for data source\n   */\n  static async getAvailableMetrics(id: string): Promise<string[]> {\n    return createQueryFunction(() => \n      apiClient.get<string[]>(`/data-sources/${id}/metrics`)\n    )();\n  }\n\n  /**\n   * Get available dimensions for data source\n   */\n  static async getAvailableDimensions(id: string): Promise<string[]> {\n    return createQueryFunction(() => \n      apiClient.get<string[]>(`/data-sources/${id}/dimensions`)\n    )();\n  }\n}\n\n/**\n * Analytics Service Class\n */\nexport class AnalyticsService {\n  /**\n   * Execute analytics query\n   */\n  static async query(query: AnalyticsQuery): Promise<AnalyticsResponse> {\n    const response = await apiClient.post<AnalyticsResponse, AnalyticsQuery>(\n      '/analytics/query',\n      query\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Analytics query failed');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Get cached query result\n   */\n  static async getCachedQuery(queryHash: string): Promise<AnalyticsResponse | null> {\n    try {\n      return createQueryFunction(() => \n        apiClient.get<AnalyticsResponse>(`/analytics/cache/${queryHash}`)\n      )();\n    } catch {\n      return null; // Cache miss\n    }\n  }\n\n  /**\n   * Execute multiple queries in batch\n   */\n  static async batchQuery(queries: AnalyticsQuery[]): Promise<AnalyticsResponse[]> {\n    const response = await apiClient.post<AnalyticsResponse[], AnalyticsQuery[]>(\n      '/analytics/batch',\n      queries\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Batch query failed');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Get query suggestions based on data source\n   */\n  static async getQuerySuggestions(dataSourceId: string): Promise<{\n    metrics: string[];\n    dimensions: string[];\n    commonQueries: AnalyticsQuery[];\n  }> {\n    return createQueryFunction(() => \n      apiClient.get<{\n        metrics: string[];\n        dimensions: string[];\n        commonQueries: AnalyticsQuery[];\n      }>(`/analytics/suggestions/${dataSourceId}`)\n    )();\n  }\n}\n\n/**\n * Google APIs Service Class\n */\nexport class GoogleApiService {\n  /**\n   * Get Google Analytics accounts\n   */\n  static async getAnalyticsAccounts(): Promise<Array<{\n    id: string;\n    name: string;\n    properties: Array<{ id: string; name: string }>;\n  }>> {\n    return createQueryFunction(() => \n      apiClient.get<Array<{\n        id: string;\n        name: string;\n        properties: Array<{ id: string; name: string }>;\n      }>>('/google/analytics/accounts')\n    )();\n  }\n\n  /**\n   * Get Google Ads accounts\n   */\n  static async getAdsAccounts(): Promise<Array<{\n    id: string;\n    name: string;\n    currency: string;\n  }>> {\n    return createQueryFunction(() => \n      apiClient.get<Array<{\n        id: string;\n        name: string;\n        currency: string;\n      }>>('/google/ads/accounts')\n    )();\n  }\n\n  /**\n   * Authorize Google services\n   */\n  static async authorizeGoogle(scopes: string[]): Promise<{ authUrl: string }> {\n    const response = await apiClient.post<{ authUrl: string }, { scopes: string[] }>(\n      '/google/auth',\n      { scopes }\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to get Google auth URL');\n    }\n    \n    return response.data;\n  }\n\n  /**\n   * Handle Google OAuth callback\n   */\n  static async handleGoogleCallback(code: string, state: string): Promise<{ success: boolean }> {\n    const response = await apiClient.post<{ success: boolean }, { code: string; state: string }>(\n      '/google/callback',\n      { code, state }\n    );\n    \n    if (!response.success) {\n      throw new Error(response.message || 'Failed to handle Google callback');\n    }\n    \n    return response.data;\n  }\n}\n\n// Export services\nexport { \n  DataSourceService as dataSourceApi, \n  AnalyticsService as analyticsApi,\n  GoogleApiService as googleApi,\n};"],"names":["AnalyticsService","DataSourceService","GoogleApiService","analyticsApi","dataSourceApi","googleApi","getDataSources","workspaceId","endpoint","createQueryFunction","apiClient","get","getDataSource","id","createDataSource","data","response","post","success","Error","message","updateDataSource","put","deleteDataSource","delete","testConnection","syncDataSource","getAvailableMetrics","getAvailableDimensions","query","getCachedQuery","queryHash","batchQuery","queries","getQuerySuggestions","dataSourceId","getAnalyticsAccounts","getAdsAccounts","authorizeGoogle","scopes","handleGoogleCallback","code","state"],"mappings":"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"}