788343ecb3354711b831f8d3407f67b9
/**
 * Authentication Mocks for Testing
 * Provides mock implementations for auth-related functionality
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createAuthenticatedMockContext () {
        return createAuthenticatedMockContext;
    },
    get createErrorMockContext () {
        return createErrorMockContext;
    },
    get createLoadingMockContext () {
        return createLoadingMockContext;
    },
    get createMockAuthContext () {
        return createMockAuthContext;
    },
    get createMockTokenManager () {
        return createMockTokenManager;
    },
    get createUnauthenticatedMockContext () {
        return createUnauthenticatedMockContext;
    },
    get mockAuthResponses () {
        return mockAuthResponses;
    },
    get mockUsers () {
        return mockUsers;
    }
});
function createMockTokenManager(options = {}) {
    const { user = null, isAuthenticated = false, isLoading = false, error = null } = options;
    const mockTokenInfo = {
        token: isAuthenticated ? 'mock-token' : null,
        refreshToken: isAuthenticated ? 'mock-refresh-token' : null,
        expiresAt: isAuthenticated ? new Date(Date.now() + 3600000) : null,
        isValid: isAuthenticated,
        isExpired: !isAuthenticated
    };
    const mockManager = {
        // Token management
        setTokens: jest.fn(),
        clearTokens: jest.fn(),
        getAccessToken: jest.fn().mockReturnValue(isAuthenticated ? 'mock-token' : null),
        getRefreshToken: jest.fn().mockReturnValue(isAuthenticated ? 'mock-refresh-token' : null),
        // Token info
        getTokenInfo: jest.fn().mockReturnValue(mockTokenInfo),
        // Token validation
        needsRefresh: jest.fn().mockReturnValue(false),
        // Token parsing
        parseTokenPayload: jest.fn().mockReturnValue(isAuthenticated && user ? {
            sub: user.id,
            email: user.email,
            name: user.name,
            role: user.role,
            exp: Math.floor(Date.now() / 1000) + 3600,
            iat: Math.floor(Date.now() / 1000)
        } : null),
        // API integration
        updateApiClientToken: jest.fn(),
        // User info from token
        getCurrentUserInfo: jest.fn().mockReturnValue(isAuthenticated && user ? {
            userId: user.id,
            email: user.email,
            role: user.role
        } : null)
    };
    // Add test-specific markers for better detection
    Object.defineProperty(mockManager, '__isTestMock', {
        value: true,
        writable: false,
        enumerable: false,
        configurable: false
    });
    Object.defineProperty(mockManager, '__testEnvironment', {
        value: 'jest',
        writable: false,
        enumerable: false,
        configurable: false
    });
    return mockManager;
}
const mockUsers = {
    user: {
        id: 'user-1',
        email: 'user@example.com',
        name: 'Test User',
        role: 'user'
    },
    admin: {
        id: 'admin-1',
        email: 'admin@example.com',
        name: 'Admin User',
        role: 'admin'
    }
};
const mockAuthResponses = {
    loginSuccess: {
        success: true,
        message: 'Login successful',
        timestamp: new Date().toISOString(),
        data: {
            user: mockUsers.user,
            token: 'mock.jwt.token',
            refreshToken: 'mock.refresh.token',
            expiresAt: new Date(Date.now() + 3600000).toISOString()
        }
    },
    loginError: {
        success: false,
        message: 'Invalid credentials',
        timestamp: new Date().toISOString(),
        error: {
            code: 'INVALID_CREDENTIALS',
            details: 'Email or password is incorrect'
        }
    },
    refreshSuccess: {
        success: true,
        timestamp: new Date().toISOString(),
        data: {
            token: 'new.jwt.token',
            expiresAt: new Date(Date.now() + 3600000).toISOString()
        }
    }
};
function createMockAuthContext(state = {}) {
    return {
        user: state.user || null,
        isAuthenticated: state.isAuthenticated || false,
        isLoading: state.isLoading || false,
        error: state.error || null,
        login: state.login || jest.fn(),
        logout: state.logout || jest.fn(),
        clearError: state.clearError || jest.fn()
    };
}
function createAuthenticatedMockContext(user = mockUsers.user) {
    return createMockAuthContext({
        user,
        isAuthenticated: true,
        isLoading: false,
        error: null
    });
}
function createUnauthenticatedMockContext() {
    return createMockAuthContext({
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null
    });
}
function createLoadingMockContext() {
    return createMockAuthContext({
        user: null,
        isAuthenticated: false,
        isLoading: true,
        error: null
    });
}
function createErrorMockContext(error = 'Authentication failed') {
    return createMockAuthContext({
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error
    });
}

//# sourceMappingURL=data:application/json;base64,