f0699ab4b744f657279812bc23906e5d
"use strict";

/* istanbul ignore next */
function cov_13inb4puli() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/app/api/collect-metrics/route.ts";
  var hash = "a4575598514151036dbceecba3aa1a607ca5b037";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/app/api/collect-metrics/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "7": {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 29
        }
      },
      "8": {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "9": {
        start: {
          line: 22,
          column: 18
        },
        end: {
          line: 22,
          column: 59
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 77
        }
      },
      "12": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 54
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 96
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 61
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "19": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 62,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 22
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 23
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 57,
            column: 18
          }
        },
        loc: {
          start: {
            line: 57,
            column: 21
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 57
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 19
          },
          end: {
            line: 50,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 50,
            column: 44
          },
          end: {
            line: 50,
            column: 57
          }
        }, {
          start: {
            line: 50,
            column: 60
          },
          end: {
            line: 50,
            column: 75
          }
        }],
        line: 50
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/app/api/collect-metrics/route.ts"],
      sourcesContent: ["import { exec } from 'child_process';\nimport { promisify } from 'util';\n\nimport { NextResponse } from 'next/server';\n\nconst execAsync = promisify(exec);\n\n/**\n * API Endpoint: Trigger Metrics Collection\n * Executes the collect-real-metrics.sh script and returns updated metrics\n */\nexport async function POST(): Promise<NextResponse> {\n  try {\n    // eslint-disable-next-line no-console\n    console.log('\uD83D\uDD04 Manual metrics collection triggered from dashboard');\n    \n    // Execute the metrics collection script\n    const { stdout, stderr } = await execAsync('./scripts/collect-real-metrics.sh', {\n      cwd: process.cwd(),\n      timeout: 30000, // 30 second timeout\n    });\n    \n    if (stderr) {\n      // eslint-disable-next-line no-console\n      console.warn('\u26A0\uFE0F Script stderr:', stderr);\n    }\n    \n    // eslint-disable-next-line no-console\n    console.log('\u2705 Metrics collection completed:', stdout.split('\\n').slice(-6).join('\\n'));\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Metrics collection completed successfully',\n      timestamp: new Date().toISOString(),\n      output: stdout.split('\\n').slice(-6), // Last 6 lines of output\n    });\n    \n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('\u274C Failed to collect metrics:', error);\n    \n    return NextResponse.json({\n      success: false,\n      message: 'Failed to collect metrics',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString(),\n    }, {\n      status: 500\n    });\n  }\n}\n\n/**\n * Handle unsupported methods\n */\nexport async function GET(): Promise<NextResponse> {\n  return NextResponse.json({\n    message: 'Method not allowed. Use POST to trigger metrics collection.',\n  }, {\n    status: 405\n  });\n}"],
      names: ["GET", "POST", "execAsync", "promisify", "exec", "console", "log", "stdout", "stderr", "cwd", "process", "timeout", "warn", "split", "slice", "join", "NextResponse", "json", "success", "message", "timestamp", "Date", "toISOString", "output", "error", "Error", "status"],
      mappings: ";;;;;;;;;;;QAuDsBA;eAAAA;;QA5CAC;eAAAA;;;+BAXD;sBACK;wBAEG;AAE7B,MAAMC,YAAYC,IAAAA,eAAS,EAACC,mBAAI;AAMzB,eAAeH;IACpB,IAAI;QACF,sCAAsC;QACtCI,QAAQC,GAAG,CAAC;QAEZ,wCAAwC;QACxC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMN,UAAU,qCAAqC;YAC9EO,KAAKC,QAAQD,GAAG;YAChBE,SAAS;QACX;QAEA,IAAIH,QAAQ;YACV,sCAAsC;YACtCH,QAAQO,IAAI,CAAC,qBAAqBJ;QACpC;QAEA,sCAAsC;QACtCH,QAAQC,GAAG,CAAC,mCAAmCC,OAAOM,KAAK,CAAC,MAAMC,KAAK,CAAC,CAAC,GAAGC,IAAI,CAAC;QAEjF,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,SAAS;YACTC,WAAW,IAAIC,OAAOC,WAAW;YACjCC,QAAQhB,OAAOM,KAAK,CAAC,MAAMC,KAAK,CAAC,CAAC;QACpC;IAEF,EAAE,OAAOU,OAAO;QACd,sCAAsC;QACtCnB,QAAQmB,KAAK,CAAC,gCAAgCA;QAE9C,OAAOR,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,SAAS;YACTK,OAAOA,iBAAiBC,QAAQD,MAAML,OAAO,GAAG;YAChDC,WAAW,IAAIC,OAAOC,WAAW;QACnC,GAAG;YACDI,QAAQ;QACV;IACF;AACF;AAKO,eAAe1B;IACpB,OAAOgB,oBAAY,CAACC,IAAI,CAAC;QACvBE,SAAS;IACX,GAAG;QACDO,QAAQ;IACV;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a4575598514151036dbceecba3aa1a607ca5b037"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13inb4puli = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13inb4puli();
cov_13inb4puli().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_13inb4puli().f[0]++;
  cov_13inb4puli().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_13inb4puli().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_13inb4puli().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_13inb4puli().f[1]++;
    cov_13inb4puli().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_13inb4puli().f[2]++;
    cov_13inb4puli().s[5]++;
    return POST;
  }
});
const _child_process =
/* istanbul ignore next */
(cov_13inb4puli().s[6]++, require("child_process"));
const _util =
/* istanbul ignore next */
(cov_13inb4puli().s[7]++, require("util"));
const _server =
/* istanbul ignore next */
(cov_13inb4puli().s[8]++, require("next/server"));
const execAsync =
/* istanbul ignore next */
(cov_13inb4puli().s[9]++, (0, _util.promisify)(_child_process.exec));
async function POST() {
  /* istanbul ignore next */
  cov_13inb4puli().f[3]++;
  cov_13inb4puli().s[10]++;
  try {
    /* istanbul ignore next */
    cov_13inb4puli().s[11]++;
    // eslint-disable-next-line no-console
    console.log('🔄 Manual metrics collection triggered from dashboard');
    // Execute the metrics collection script
    const {
      stdout,
      stderr
    } =
    /* istanbul ignore next */
    (cov_13inb4puli().s[12]++, await execAsync('./scripts/collect-real-metrics.sh', {
      cwd: process.cwd(),
      timeout: 30000
    }));
    /* istanbul ignore next */
    cov_13inb4puli().s[13]++;
    if (stderr) {
      /* istanbul ignore next */
      cov_13inb4puli().b[0][0]++;
      cov_13inb4puli().s[14]++;
      // eslint-disable-next-line no-console
      console.warn('⚠️ Script stderr:', stderr);
    } else
    /* istanbul ignore next */
    {
      cov_13inb4puli().b[0][1]++;
    }
    // eslint-disable-next-line no-console
    cov_13inb4puli().s[15]++;
    console.log('✅ Metrics collection completed:', stdout.split('\n').slice(-6).join('\n'));
    /* istanbul ignore next */
    cov_13inb4puli().s[16]++;
    return _server.NextResponse.json({
      success: true,
      message: 'Metrics collection completed successfully',
      timestamp: new Date().toISOString(),
      output: stdout.split('\n').slice(-6)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_13inb4puli().s[17]++;
    // eslint-disable-next-line no-console
    console.error('❌ Failed to collect metrics:', error);
    /* istanbul ignore next */
    cov_13inb4puli().s[18]++;
    return _server.NextResponse.json({
      success: false,
      message: 'Failed to collect metrics',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_13inb4puli().b[1][0]++, error.message) :
      /* istanbul ignore next */
      (cov_13inb4puli().b[1][1]++, 'Unknown error'),
      timestamp: new Date().toISOString()
    }, {
      status: 500
    });
  }
}
async function GET() {
  /* istanbul ignore next */
  cov_13inb4puli().f[4]++;
  cov_13inb4puli().s[19]++;
  return _server.NextResponse.json({
    message: 'Method not allowed. Use POST to trigger metrics collection.'
  }, {
    status: 405
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMTNpbmI0cHVsaSIsImYiLCJzIiwiUE9TVCIsImV4ZWNBc3luYyIsIl91dGlsIiwicHJvbWlzaWZ5IiwiX2NoaWxkX3Byb2Nlc3MiLCJleGVjIiwiY29uc29sZSIsImxvZyIsInN0ZG91dCIsInN0ZGVyciIsImN3ZCIsInByb2Nlc3MiLCJ0aW1lb3V0IiwiYiIsIndhcm4iLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJvdXRwdXQiLCJlcnJvciIsIkVycm9yIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3p3ZWlnZW4vU2l0ZXMvZGF0ZW4tc2VlLXYyL3NyYy9hcHAvYXBpL2NvbGxlY3QtbWV0cmljcy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcblxuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG5jb25zdCBleGVjQXN5bmMgPSBwcm9taXNpZnkoZXhlYyk7XG5cbi8qKlxuICogQVBJIEVuZHBvaW50OiBUcmlnZ2VyIE1ldHJpY3MgQ29sbGVjdGlvblxuICogRXhlY3V0ZXMgdGhlIGNvbGxlY3QtcmVhbC1tZXRyaWNzLnNoIHNjcmlwdCBhbmQgcmV0dXJucyB1cGRhdGVkIG1ldHJpY3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QoKTogUHJvbWlzZTxOZXh0UmVzcG9uc2U+IHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKCfwn5SEIE1hbnVhbCBtZXRyaWNzIGNvbGxlY3Rpb24gdHJpZ2dlcmVkIGZyb20gZGFzaGJvYXJkJyk7XG4gICAgXG4gICAgLy8gRXhlY3V0ZSB0aGUgbWV0cmljcyBjb2xsZWN0aW9uIHNjcmlwdFxuICAgIGNvbnN0IHsgc3Rkb3V0LCBzdGRlcnIgfSA9IGF3YWl0IGV4ZWNBc3luYygnLi9zY3JpcHRzL2NvbGxlY3QtcmVhbC1tZXRyaWNzLnNoJywge1xuICAgICAgY3dkOiBwcm9jZXNzLmN3ZCgpLFxuICAgICAgdGltZW91dDogMzAwMDAsIC8vIDMwIHNlY29uZCB0aW1lb3V0XG4gICAgfSk7XG4gICAgXG4gICAgaWYgKHN0ZGVycikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFNjcmlwdCBzdGRlcnI6Jywgc3RkZXJyKTtcbiAgICB9XG4gICAgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygn4pyFIE1ldHJpY3MgY29sbGVjdGlvbiBjb21wbGV0ZWQ6Jywgc3Rkb3V0LnNwbGl0KCdcXG4nKS5zbGljZSgtNikuam9pbignXFxuJykpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ01ldHJpY3MgY29sbGVjdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgb3V0cHV0OiBzdGRvdXQuc3BsaXQoJ1xcbicpLnNsaWNlKC02KSwgLy8gTGFzdCA2IGxpbmVzIG9mIG91dHB1dFxuICAgIH0pO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBjb2xsZWN0IG1ldHJpY3M6JywgZXJyb3IpO1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY29sbGVjdCBtZXRyaWNzJyxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0sIHtcbiAgICAgIHN0YXR1czogNTAwXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIYW5kbGUgdW5zdXBwb3J0ZWQgbWV0aG9kc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZC4gVXNlIFBPU1QgdG8gdHJpZ2dlciBtZXRyaWNzIGNvbGxlY3Rpb24uJyxcbiAgfSwge1xuICAgIHN0YXR1czogNDA1XG4gIH0pO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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