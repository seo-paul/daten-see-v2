{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/auth/__tests__/token.test.ts"],"sourcesContent":["/**\n * Token Manager Tests - JWT Security (95% Coverage Target)\n * Critical business logic for authentication and authorization\n * \n * Test Categories:\n * 1. Token Storage & Retrieval Operations\n * 2. Expiration Validation & Refresh Logic  \n * 3. JWT Payload Parsing & User Info Extraction\n * 4. API Client Integration\n * 5. Security Edge Cases & Error Handling\n * 6. Server-Side vs Client-Side Behavior\n */\n\nimport { tokenManager, type TokenData } from '../token';\n\n// Mock logger to avoid console noise in tests (allowing actual logging for debugging)\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    info: jest.fn(),\n  },\n}));\n\n// Mock API client to avoid circular dependencies\njest.mock('@/lib/api/client', () => ({\n  apiClient: {\n    setAuthToken: jest.fn(),\n    clearAuthToken: jest.fn(),\n  },\n}));\n\ndescribe('TokenManager - JWT Security Tests (95% Coverage)', () => {\n  // Test data\n  const validTokenData: TokenData = {\n    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLTEiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE3MDAwMDAwMDAsImlhdCI6MTY5OTk5OTAwMH0.test-signature',\n    refreshToken: 'refresh-token-123',\n    expiresAt: new Date(Date.now() + 3600000).toISOString(), // 1 hour from now\n  };\n\n  const expiredTokenData: TokenData = {\n    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLTEiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE2MDAwMDAwMDAsImlhdCI6MTU5OTk5OTAwMH0.test-signature',\n    refreshToken: 'refresh-token-expired',\n    expiresAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\n  };\n\n  // Mock localStorage\n  const localStorageMock = {\n    getItem: jest.fn(),\n    setItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn(),\n  };\n\n  const originalWindow = global.window;\n  const originalLocalStorage = global.localStorage;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock window and localStorage for client-side tests\n    Object.defineProperty(global, 'window', {\n      value: { localStorage: localStorageMock },\n      writable: true,\n      configurable: true,\n    });\n    Object.defineProperty(global, 'localStorage', {\n      value: localStorageMock,\n      writable: true,\n      configurable: true,\n    });\n  });\n\n  afterEach(() => {\n    // Restore original window\n    if (originalWindow) {\n      global.window = originalWindow;\n    } else {\n      delete (global as any).window;\n    }\n    global.localStorage = originalLocalStorage;\n  });\n\n  describe('Token Storage Operations', () => {\n    it('should store tokens successfully on client side', () => {\n      tokenManager.setTokens(validTokenData);\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', validTokenData.token);\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('refresh_token', validTokenData.refreshToken);\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('token_expiry', validTokenData.expiresAt);\n    });\n\n    it('should handle server side gracefully', () => {\n      // Since TokenManager is a singleton, isClient is set once at module load\n      // This test verifies the method doesn't throw rather than testing the exact server behavior\n      expect(() => tokenManager.setTokens(validTokenData)).not.toThrow();\n      \n      // The actual server-side behavior would be tested in a fresh Node.js environment\n      // where window is undefined from the start\n    });\n\n    it('should handle localStorage errors during storage', () => {\n      localStorageMock.setItem.mockImplementation(() => {\n        throw new Error('Storage quota exceeded');\n      });\n\n      expect(() => tokenManager.setTokens(validTokenData)).toThrow('Token storage failed');\n    });\n\n    it('should clear all tokens successfully', () => {\n      tokenManager.clearTokens();\n\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith('auth_token');\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith('refresh_token');\n      expect(localStorageMock.removeItem).toHaveBeenCalledWith('token_expiry');\n    });\n\n    it('should handle localStorage errors during clearing', () => {\n      localStorageMock.removeItem.mockImplementation(() => {\n        throw new Error('localStorage access denied');\n      });\n\n      // Should not throw, just log error\n      expect(() => tokenManager.clearTokens()).not.toThrow();\n    });\n\n    it('should handle server side clearing gracefully', () => {\n      // Similar to storage, since TokenManager is a singleton, this tests graceful handling\n      expect(() => tokenManager.clearTokens()).not.toThrow();\n    });\n  });\n\n  describe('Token Retrieval & Validation', () => {\n    it('should retrieve valid token info', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo).toEqual({\n        token: validTokenData.token,\n        refreshToken: validTokenData.refreshToken,\n        expiresAt: new Date(validTokenData.expiresAt),\n        isValid: true,\n        isExpired: false,\n      });\n    });\n\n    it('should handle expired tokens correctly', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(expiredTokenData.token)\n        .mockReturnValueOnce(expiredTokenData.refreshToken)\n        .mockReturnValueOnce(expiredTokenData.expiresAt);\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo).toEqual({\n        token: expiredTokenData.token,\n        refreshToken: expiredTokenData.refreshToken,\n        expiresAt: new Date(expiredTokenData.expiresAt),\n        isValid: false,\n        isExpired: true,\n      });\n    });\n\n    it('should handle missing tokens', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo).toEqual({\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      });\n    });\n\n    it('should handle invalid expiry date format', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce('invalid-date');\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      // Test current behavior: invalid date string creates a Date object but represents Invalid Date\n      expect(tokenInfo.expiresAt).toBeInstanceOf(Date);\n      \n      // JavaScript Date('invalid-date') creates a Date that isNaN but still truthy\n      const isInvalidDate = isNaN(tokenInfo.expiresAt!.getTime());\n      expect(isInvalidDate).toBe(true); // The date should be invalid\n      \n      // Current implementation doesn't check for invalid dates in the isValid logic\n      // This test documents the current behavior - could be improved in future\n      // For now, we test that it doesn't crash and returns a consistent structure\n      expect(typeof tokenInfo.isValid).toBe('boolean');\n      expect(typeof tokenInfo.isExpired).toBe('boolean');\n    });\n\n    it('should handle server side token retrieval gracefully', () => {\n      // Since TokenManager is a singleton, this tests graceful handling rather than true server behavior\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      // The method should not throw and should return a valid TokenInfo structure\n      expect(tokenInfo).toHaveProperty('token');\n      expect(tokenInfo).toHaveProperty('refreshToken');\n      expect(tokenInfo).toHaveProperty('expiresAt');\n      expect(tokenInfo).toHaveProperty('isValid');\n      expect(tokenInfo).toHaveProperty('isExpired');\n    });\n\n    it('should handle localStorage errors during retrieval', () => {\n      localStorageMock.getItem.mockImplementation(() => {\n        throw new Error('localStorage access denied');\n      });\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo.isValid).toBe(false);\n    });\n\n    it('should get access token when valid', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const accessToken = tokenManager.getAccessToken();\n\n      expect(accessToken).toBe(validTokenData.token);\n    });\n\n    it('should return null access token when invalid', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      const accessToken = tokenManager.getAccessToken();\n\n      expect(accessToken).toBeNull();\n    });\n\n    it('should get refresh token when available', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const refreshToken = tokenManager.getRefreshToken();\n\n      expect(refreshToken).toBe(validTokenData.refreshToken);\n    });\n\n    it('should return null refresh token when unavailable', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      const refreshToken = tokenManager.getRefreshToken();\n\n      expect(refreshToken).toBeNull();\n    });\n  });\n\n  describe('Expiration & Refresh Logic', () => {\n    it('should detect when token needs refresh (within 5 minutes)', () => {\n      const soonToExpireData = {\n        ...validTokenData,\n        expiresAt: new Date(Date.now() + 4 * 60 * 1000).toISOString(), // 4 minutes from now\n      };\n\n      localStorageMock.getItem\n        .mockReturnValueOnce(soonToExpireData.token)\n        .mockReturnValueOnce(soonToExpireData.refreshToken)\n        .mockReturnValueOnce(soonToExpireData.expiresAt);\n\n      const needsRefresh = tokenManager.needsRefresh();\n\n      expect(needsRefresh).toBe(true);\n    });\n\n    it('should not need refresh when token has plenty of time', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const needsRefresh = tokenManager.needsRefresh();\n\n      expect(needsRefresh).toBe(false);\n    });\n\n    it('should not need refresh when no token exists', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      const needsRefresh = tokenManager.needsRefresh();\n\n      expect(needsRefresh).toBe(false);\n    });\n\n    it('should not need refresh when no expiry date exists', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(null);\n\n      const needsRefresh = tokenManager.needsRefresh();\n\n      expect(needsRefresh).toBe(false);\n    });\n  });\n\n  describe('JWT Payload Parsing', () => {\n    it('should parse valid JWT payload correctly', () => {\n      const payload = tokenManager.parseTokenPayload(validTokenData.token);\n\n      expect(payload).toEqual({\n        sub: 'user-1',\n        email: 'test@example.com',\n        role: 'admin',\n        exp: 1700000000,\n        iat: 1699999000,\n      });\n    });\n\n    it('should handle malformed JWT tokens', () => {\n      const malformedToken = 'invalid.token.format';\n\n      const payload = tokenManager.parseTokenPayload(malformedToken);\n\n      expect(payload).toBeNull();\n    });\n\n    it('should handle JWT with missing payload section', () => {\n      const tokenWithoutPayload = 'header..signature';\n\n      const payload = tokenManager.parseTokenPayload(tokenWithoutPayload);\n\n      expect(payload).toBeNull();\n    });\n\n    it('should handle invalid base64 in JWT payload', () => {\n      const tokenWithInvalidBase64 = 'header.invalid-base64-payload.signature';\n\n      const payload = tokenManager.parseTokenPayload(tokenWithInvalidBase64);\n\n      expect(payload).toBeNull();\n    });\n\n    it('should get current user info from valid token', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const userInfo = tokenManager.getCurrentUserInfo();\n\n      expect(userInfo).toEqual({\n        userId: 'user-1',\n        email: 'test@example.com',\n        role: 'admin',\n      });\n    });\n\n    it('should return null user info when no token', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      const userInfo = tokenManager.getCurrentUserInfo();\n\n      expect(userInfo).toBeNull();\n    });\n\n    it('should return null user info when token payload is invalid', () => {\n      const invalidToken = 'invalid.token.format';\n      localStorageMock.getItem\n        .mockReturnValueOnce(invalidToken)\n        .mockReturnValueOnce('refresh')\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const userInfo = tokenManager.getCurrentUserInfo();\n\n      expect(userInfo).toBeNull();\n    });\n  });\n\n  describe('API Client Integration', () => {\n    it('should call updateApiClientToken without errors', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      // Should not throw\n      expect(() => tokenManager.updateApiClientToken()).not.toThrow();\n    });\n\n    it('should call updateApiClientToken with no token without errors', () => {\n      localStorageMock.getItem.mockReturnValue(null);\n\n      // Should not throw\n      expect(() => tokenManager.updateApiClientToken()).not.toThrow();\n    });\n\n    it('should handle API client integration gracefully', () => {\n      // API client integration is async and handled separately\n      // This test ensures the method exists and can be called\n      expect(typeof tokenManager.updateApiClientToken).toBe('function');\n      \n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(validTokenData.refreshToken)\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      tokenManager.updateApiClientToken();\n      \n      // Should complete without throwing\n      expect(true).toBe(true);\n    });\n  });\n\n  describe('Security Edge Cases', () => {\n    it('should handle partial token data gracefully', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce(validTokenData.token)\n        .mockReturnValueOnce(null) // Missing refresh token\n        .mockReturnValueOnce(validTokenData.expiresAt);\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo.isValid).toBe(false);\n      expect(tokenInfo.token).toBe(validTokenData.token);\n      expect(tokenInfo.refreshToken).toBeNull();\n    });\n\n    it('should handle empty string tokens', () => {\n      localStorageMock.getItem\n        .mockReturnValueOnce('')\n        .mockReturnValueOnce('')\n        .mockReturnValueOnce('');\n\n      const tokenInfo = tokenManager.getTokenInfo();\n\n      expect(tokenInfo.isValid).toBe(false);\n    });\n\n    it('should handle very large tokens', () => {\n      const largeToken = 'a'.repeat(10000); // 10KB token\n      const largeTokenData = {\n        ...validTokenData,\n        token: largeToken,\n      };\n\n      // Reset localStorage mock to allow large token storage\n      localStorageMock.setItem.mockClear();\n      localStorageMock.setItem.mockImplementation(() => {}); // Success\n\n      expect(() => tokenManager.setTokens(largeTokenData)).not.toThrow();\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', largeToken);\n    });\n\n    it('should handle concurrent token operations', () => {\n      // Reset localStorage mock for this test\n      localStorageMock.setItem.mockClear();\n      localStorageMock.getItem.mockClear();\n      localStorageMock.removeItem.mockClear();\n      localStorageMock.setItem.mockImplementation(() => {}); // Success\n      localStorageMock.removeItem.mockImplementation(() => {}); // Success\n\n      // Simulate concurrent calls\n      expect(() => {\n        tokenManager.setTokens(validTokenData);\n        tokenManager.getTokenInfo();\n        tokenManager.clearTokens();\n      }).not.toThrow();\n\n      // Should not cause any errors\n      expect(localStorageMock.setItem).toHaveBeenCalled();\n      expect(localStorageMock.getItem).toHaveBeenCalled();\n      expect(localStorageMock.removeItem).toHaveBeenCalled();\n    });\n\n    it('should validate token format before storage', () => {\n      const invalidTokenData = {\n        token: '', // Empty token\n        refreshToken: 'valid-refresh',\n        expiresAt: validTokenData.expiresAt,\n      };\n\n      // Reset localStorage mock for this test\n      localStorageMock.setItem.mockClear();\n      localStorageMock.setItem.mockImplementation(() => {}); // Success\n\n      tokenManager.setTokens(invalidTokenData);\n\n      // Should still store (validation happens on retrieval)\n      expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', '');\n    });\n  });\n\n  describe('Instance Management', () => {\n    it('should be a singleton instance', () => {\n      const instance1 = tokenManager;\n      const instance2 = tokenManager;\n\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should provide consistent interface', () => {\n      expect(typeof tokenManager.setTokens).toBe('function');\n      expect(typeof tokenManager.getTokenInfo).toBe('function');\n      expect(typeof tokenManager.clearTokens).toBe('function');\n      expect(typeof tokenManager.getAccessToken).toBe('function');\n      expect(typeof tokenManager.getRefreshToken).toBe('function');\n      expect(typeof tokenManager.needsRefresh).toBe('function');\n      expect(typeof tokenManager.updateApiClientToken).toBe('function');\n      expect(typeof tokenManager.getCurrentUserInfo).toBe('function');\n      expect(typeof tokenManager.parseTokenPayload).toBe('function');\n    });\n  });\n});"],"names":["jest","mock","appLogger","debug","fn","warn","error","info","apiClient","setAuthToken","clearAuthToken","describe","validTokenData","token","refreshToken","expiresAt","Date","now","toISOString","expiredTokenData","localStorageMock","getItem","setItem","removeItem","clear","originalWindow","global","window","originalLocalStorage","localStorage","beforeEach","clearAllMocks","Object","defineProperty","value","writable","configurable","afterEach","it","tokenManager","setTokens","expect","toHaveBeenCalledWith","not","toThrow","mockImplementation","Error","clearTokens","mockReturnValueOnce","tokenInfo","getTokenInfo","toEqual","isValid","isExpired","mockReturnValue","toBeInstanceOf","isInvalidDate","isNaN","getTime","toBe","toHaveProperty","accessToken","getAccessToken","toBeNull","getRefreshToken","soonToExpireData","needsRefresh","payload","parseTokenPayload","sub","email","role","exp","iat","malformedToken","tokenWithoutPayload","tokenWithInvalidBase64","userInfo","getCurrentUserInfo","userId","invalidToken","updateApiClientToken","largeToken","repeat","largeTokenData","mockClear","toHaveBeenCalled","invalidTokenData","instance1","instance2"],"mappings":"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"}