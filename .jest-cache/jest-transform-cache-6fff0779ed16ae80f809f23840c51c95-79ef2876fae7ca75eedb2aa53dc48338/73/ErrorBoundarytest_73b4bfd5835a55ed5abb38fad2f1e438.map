{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/shared/components/__tests__/ErrorBoundary.test.tsx"],"sourcesContent":["/**\n * ErrorBoundary Component Tests\n * Testing error handling, Sentry integration, and user interactions\n */\n\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport React from 'react';\n\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\n// Mock Sentry\njest.mock('@sentry/nextjs', () => {\n  const mockCaptureException = jest.fn();\n  const mockSetTag = jest.fn();\n  const mockSetLevel = jest.fn();\n  const mockSetContext = jest.fn();\n  \n  return {\n    withScope: jest.fn((callback) => {\n      const mockScope = {\n        setTag: mockSetTag,\n        setLevel: mockSetLevel,\n        setContext: mockSetContext,\n      };\n      callback(mockScope);\n      return 'mock-error-id';\n    }),\n    captureException: mockCaptureException,\n  };\n});\n\n// Mock logger\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    error: jest.fn(),\n    info: jest.fn(),\n    userAction: jest.fn(),\n  },\n}));\n\n// Mock console.error to avoid noise in tests\nconst originalConsoleError = console.error;\nbeforeAll(() => {\n  console.error = jest.fn();\n});\n\nafterAll(() => {\n  console.error = originalConsoleError;\n});\n\n// Component that throws an error\nfunction ThrowError({ shouldThrow = false }: { shouldThrow?: boolean }): React.ReactElement {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div data-testid=\"working-component\">Working Component</div>;\n}\n\ndescribe('ErrorBoundary', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    const { captureException } = require('@sentry/nextjs');\n    captureException.mockReturnValue('mock-error-id');\n  });\n\n  describe('Normal Operation', () => {\n    it('should render children when no error occurs', () => {\n      render(\n        <ErrorBoundary>\n          <div data-testid=\"child-component\">Child Content</div>\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByTestId('child-component')).toBeInTheDocument();\n    });\n\n    it('should render multiple children normally', () => {\n      render(\n        <ErrorBoundary>\n          <div data-testid=\"child-1\">Child 1</div>\n          <div data-testid=\"child-2\">Child 2</div>\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByTestId('child-1')).toBeInTheDocument();\n      expect(screen.getByTestId('child-2')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should catch and display error when child component throws', () => {\n      // Mock development environment to show error details\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n      \n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      // Should not show the working component\n      expect(screen.queryByTestId('working-component')).not.toBeInTheDocument();\n      \n      // Should show error UI\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n      expect(screen.getByText(/Test error/i)).toBeInTheDocument();\n      \n      // Restore environment\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('should log error with appLogger', () => {\n      render(\n        <ErrorBoundary level=\"component\">\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(appLogger.error).toHaveBeenCalledWith(\n        'Error Boundary Triggered (component)',\n        expect.objectContaining({\n          error: expect.any(Error),\n          component: 'error-boundary-component',\n          metadata: expect.objectContaining({\n            componentStack: expect.any(String),\n            errorBoundaryLevel: 'component',\n          }),\n        })\n      );\n    });\n\n    it('should capture error to Sentry with proper context', () => {\n      render(\n        <ErrorBoundary level=\"page\" context={{ userId: '123', feature: 'dashboard' }}>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const { withScope, captureException } = require('@sentry/nextjs');\n      expect(withScope).toHaveBeenCalled();\n      expect(captureException).toHaveBeenCalledWith(expect.any(Error));\n    });\n\n    it('should handle different error boundary levels', () => {\n      const levels = ['page', 'widget', 'component'] as const;\n      \n      levels.forEach((level, index) => {\n        const { unmount } = render(\n          <ErrorBoundary level={level} key={index}>\n            <ThrowError shouldThrow={true} />\n          </ErrorBoundary>\n        );\n\n        expect(appLogger.error).toHaveBeenCalledWith(\n          `Error Boundary Triggered (${level})`,\n          expect.objectContaining({\n            component: `error-boundary-${level}`,\n            metadata: expect.objectContaining({\n              errorBoundaryLevel: level,\n            }),\n          })\n        );\n\n        unmount();\n        jest.clearAllMocks();\n      });\n    });\n\n    it('should default to component level when no level specified', () => {\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(appLogger.error).toHaveBeenCalledWith(\n        'Error Boundary Triggered (component)',\n        expect.objectContaining({\n          component: 'error-boundary-component',\n        })\n      );\n    });\n  });\n\n  describe('Custom Fallback', () => {\n    it('should render custom fallback when provided', () => {\n      const customFallback = <div data-testid=\"custom-fallback\">Custom Error UI</div>;\n\n      render(\n        <ErrorBoundary fallback={customFallback}>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByTestId('custom-fallback')).toBeInTheDocument();\n      expect(screen.getByText('Custom Error UI')).toBeInTheDocument();\n    });\n\n    it('should render default fallback when no custom fallback provided', () => {\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument();\n      // Report issue button only shows in production with errorId\n    });\n  });\n\n  describe('Error Recovery', () => {\n    it('should allow retry and reset error state', () => {\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      // Should show error UI\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n      \n      // Click retry button\n      const retryButton = screen.getByRole('button', { name: /try again/i });\n      fireEvent.click(retryButton);\n\n      // Should log retry attempt\n      expect(appLogger.info).toHaveBeenCalledWith(\n        'Error Boundary Retry Attempted',\n        expect.objectContaining({\n          component: 'error-boundary-component',\n          action: 'retry',\n        })\n      );\n\n      // After retry, component would re-render and potentially throw again\n      // This is normal behavior - retry doesn't magically fix broken components\n      // It just resets the error boundary state for another attempt\n    });\n\n    it('should handle retry with different error boundary levels', () => {\n      render(\n        <ErrorBoundary level=\"widget\">\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const retryButton = screen.getByRole('button', { name: /try again/i });\n      fireEvent.click(retryButton);\n\n      expect(appLogger.info).toHaveBeenCalledWith(\n        'Error Boundary Retry Attempted',\n        expect.objectContaining({\n          component: 'error-boundary-widget',\n          action: 'retry',\n        })\n      );\n    });\n  });\n\n  describe('Error Reporting', () => {\n    it('should handle report issue action in production', () => {\n      // Mock production environment\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n      \n      render(\n        <ErrorBoundary level=\"page\">\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const reportButton = screen.getByRole('button', { name: /report issue/i });\n      fireEvent.click(reportButton);\n\n      expect(appLogger.userAction).toHaveBeenCalledWith(\n        'report-error',\n        undefined,\n        expect.objectContaining({\n          errorId: 'mock-error-id',\n          errorBoundaryLevel: 'page',\n        })\n      );\n      \n      // Restore environment\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('should not show report button when no error ID available', () => {\n      // Mock Sentry to not return error ID\n      const { captureException } = require('@sentry/nextjs');\n      captureException.mockReturnValue(undefined);\n      \n      // Mock production environment\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      // Should not show report button when no errorId\n      expect(screen.queryByRole('button', { name: /report issue/i })).not.toBeInTheDocument();\n      \n      // Restore environment  \n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('should open support URL in new window when in browser', () => {\n      // Mock production environment\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n      \n      // Mock window.open\n      const mockOpen = jest.fn();\n      Object.defineProperty(window, 'open', {\n        value: mockOpen,\n        configurable: true,\n      });\n\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const reportButton = screen.getByRole('button', { name: /report issue/i });\n      fireEvent.click(reportButton);\n\n      expect(mockOpen).toHaveBeenCalledWith(\n        expect.stringContaining('mailto:support@'),\n        '_blank'\n      );\n      \n      // Restore environment\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n\n  describe('Context Integration', () => {\n    it('should include custom context in error logging', () => {\n      const customContext = {\n        userId: 'user-123',\n        sessionId: 'session-456',\n        feature: 'analytics',\n        experiment: 'test-variant',\n      };\n\n      render(\n        <ErrorBoundary context={customContext}>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(appLogger.error).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          metadata: expect.objectContaining(customContext),\n        })\n      );\n\n      // Verify Sentry integration was called\n      const { withScope } = require('@sentry/nextjs');\n      expect(withScope).toHaveBeenCalled();\n    });\n\n    it('should handle empty context gracefully', () => {\n      render(\n        <ErrorBoundary context={{}}>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(appLogger.error).toHaveBeenCalled();\n      const { withScope } = require('@sentry/nextjs');\n      expect(withScope).toHaveBeenCalled();\n    });\n\n    it('should handle undefined context gracefully', () => {\n      render(\n        <ErrorBoundary context={undefined}>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      expect(appLogger.error).toHaveBeenCalled();\n      const { withScope } = require('@sentry/nextjs');\n      expect(withScope).toHaveBeenCalled();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle component that throws during render', () => {\n      // Mock development environment to show error details\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n      \n      function BrokenComponent(): React.ReactElement {\n        throw new Error('Render error');\n      }\n\n      render(\n        <ErrorBoundary>\n          <BrokenComponent />\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n      expect(screen.getByText(/Render error/i)).toBeInTheDocument();\n      \n      // Restore environment\n      process.env.NODE_ENV = originalEnv;\n    });\n\n    it('should handle async errors gracefully', async () => {\n      function AsyncErrorComponent(): React.ReactElement {\n        React.useEffect(() => {\n          // Async errors won't be caught by error boundary\n          // but component should still render normally\n          setTimeout(() => {\n            throw new Error('Async error');\n          }, 0);\n        }, []);\n\n        return <div data-testid=\"async-component\">Async Component</div>;\n      }\n\n      render(\n        <ErrorBoundary>\n          <AsyncErrorComponent />\n        </ErrorBoundary>\n      );\n\n      // Component should render normally since async errors aren't caught\n      expect(screen.getByTestId('async-component')).toBeInTheDocument();\n    });\n\n    it('should handle nested error boundaries', () => {\n      render(\n        <ErrorBoundary level=\"page\">\n          <div>\n            <ErrorBoundary level=\"widget\">\n              <ThrowError shouldThrow={true} />\n            </ErrorBoundary>\n          </div>\n        </ErrorBoundary>\n      );\n\n      // Inner error boundary should catch the error\n      expect(appLogger.error).toHaveBeenCalledWith(\n        'Error Boundary Triggered (widget)',\n        expect.objectContaining({\n          component: 'error-boundary-widget',\n        })\n      );\n\n      // Should show error UI\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n    });\n\n    it('should handle very long error messages', () => {\n      function LongErrorComponent(): React.ReactElement {\n        throw new Error('A'.repeat(1000));\n      }\n\n      render(\n        <ErrorBoundary>\n          <LongErrorComponent />\n        </ErrorBoundary>\n      );\n\n      expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();\n      // Should still log the full error\n      expect(appLogger.error).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          error: expect.objectContaining({\n            message: 'A'.repeat(1000),\n          }),\n        })\n      );\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA attributes on error UI', () => {\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const errorContainer = screen.getByRole('alert');\n      expect(errorContainer).toBeInTheDocument();\n      \n      const retryButton = screen.getByRole('button', { name: /try again/i });\n      expect(retryButton).toBeInTheDocument();\n      \n      // Report button only available in production with errorId\n      // In test environment (development), it won't be shown\n    });\n\n    it('should be keyboard navigable', () => {\n      render(\n        <ErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </ErrorBoundary>\n      );\n\n      const retryButton = screen.getByRole('button', { name: /try again/i });\n\n      // Button should be focusable\n      retryButton.focus();\n      expect(document.activeElement).toBe(retryButton);\n    });\n  });\n});"],"names":["jest","mock","mockCaptureException","fn","mockSetTag","mockSetLevel","mockSetContext","withScope","callback","mockScope","setTag","setLevel","setContext","captureException","appLogger","error","info","userAction","originalConsoleError","console","beforeAll","afterAll","ThrowError","shouldThrow","Error","div","data-testid","describe","beforeEach","clearAllMocks","require","mockReturnValue","it","render","ErrorBoundary","expect","screen","getByTestId","toBeInTheDocument","originalEnv","process","env","NODE_ENV","queryByTestId","not","getByText","level","toHaveBeenCalledWith","objectContaining","any","component","metadata","componentStack","String","errorBoundaryLevel","context","userId","feature","toHaveBeenCalled","levels","forEach","index","unmount","customFallback","fallback","getByRole","name","retryButton","fireEvent","click","action","reportButton","undefined","errorId","queryByRole","mockOpen","Object","defineProperty","window","value","configurable","stringContaining","customContext","sessionId","experiment","BrokenComponent","AsyncErrorComponent","React","useEffect","setTimeout","LongErrorComponent","repeat","message","errorContainer","focus","document","activeElement","toBe"],"mappings":"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"}