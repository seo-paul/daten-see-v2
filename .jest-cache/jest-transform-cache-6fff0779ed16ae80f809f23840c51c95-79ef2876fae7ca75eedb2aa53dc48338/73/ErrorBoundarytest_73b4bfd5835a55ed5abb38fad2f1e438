ce36fa02128c0bf28efe5213e179cbed
/**
 * ErrorBoundary Component Tests
 * Testing error handling, Sentry integration, and user interactions
 */ "use strict";
// Mock Sentry
jest.mock('@sentry/nextjs', ()=>{
    const mockCaptureException = jest.fn();
    const mockSetTag = jest.fn();
    const mockSetLevel = jest.fn();
    const mockSetContext = jest.fn();
    return {
        withScope: jest.fn((callback)=>{
            const mockScope = {
                setTag: mockSetTag,
                setLevel: mockSetLevel,
                setContext: mockSetContext
            };
            callback(mockScope);
            return 'mock-error-id';
        }),
        captureException: mockCaptureException
    };
});
// Mock logger
jest.mock('@/lib/monitoring/logger.config', ()=>({
        appLogger: {
            error: jest.fn(),
            info: jest.fn(),
            userAction: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _ErrorBoundary = require("../ErrorBoundary");
const _loggerconfig = require("../../../lib/monitoring/logger.config");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock console.error to avoid noise in tests
const originalConsoleError = console.error;
beforeAll(()=>{
    console.error = jest.fn();
});
afterAll(()=>{
    console.error = originalConsoleError;
});
// Component that throws an error
function ThrowError({ shouldThrow = false }) {
    if (shouldThrow) {
        throw new Error('Test error');
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "working-component",
        children: "Working Component"
    });
}
describe('ErrorBoundary', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        const { captureException } = require('@sentry/nextjs');
        captureException.mockReturnValue('mock-error-id');
    });
    describe('Normal Operation', ()=>{
        it('should render children when no error occurs', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "child-component",
                    children: "Child Content"
                })
            }));
            expect(_react.screen.getByTestId('child-component')).toBeInTheDocument();
        });
        it('should render multiple children normally', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_ErrorBoundary.ErrorBoundary, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "child-1",
                        children: "Child 1"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "child-2",
                        children: "Child 2"
                    })
                ]
            }));
            expect(_react.screen.getByTestId('child-1')).toBeInTheDocument();
            expect(_react.screen.getByTestId('child-2')).toBeInTheDocument();
        });
    });
    describe('Error Handling', ()=>{
        it('should catch and display error when child component throws', ()=>{
            // Mock development environment to show error details
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            // Should not show the working component
            expect(_react.screen.queryByTestId('working-component')).not.toBeInTheDocument();
            // Should show error UI
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
            expect(_react.screen.getByText(/Test error/i)).toBeInTheDocument();
            // Restore environment
            process.env.NODE_ENV = originalEnv;
        });
        it('should log error with appLogger', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                level: "component",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith('Error Boundary Triggered (component)', expect.objectContaining({
                error: expect.any(Error),
                component: 'error-boundary-component',
                metadata: expect.objectContaining({
                    componentStack: expect.any(String),
                    errorBoundaryLevel: 'component'
                })
            }));
        });
        it('should capture error to Sentry with proper context', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                level: "page",
                context: {
                    userId: '123',
                    feature: 'dashboard'
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const { withScope, captureException } = require('@sentry/nextjs');
            expect(withScope).toHaveBeenCalled();
            expect(captureException).toHaveBeenCalledWith(expect.any(Error));
        });
        it('should handle different error boundary levels', ()=>{
            const levels = [
                'page',
                'widget',
                'component'
            ];
            levels.forEach((level, index)=>{
                const { unmount } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                    level: level,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                        shouldThrow: true
                    })
                }, index));
                expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith(`Error Boundary Triggered (${level})`, expect.objectContaining({
                    component: `error-boundary-${level}`,
                    metadata: expect.objectContaining({
                        errorBoundaryLevel: level
                    })
                }));
                unmount();
                jest.clearAllMocks();
            });
        });
        it('should default to component level when no level specified', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith('Error Boundary Triggered (component)', expect.objectContaining({
                component: 'error-boundary-component'
            }));
        });
    });
    describe('Custom Fallback', ()=>{
        it('should render custom fallback when provided', ()=>{
            const customFallback = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "custom-fallback",
                children: "Custom Error UI"
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                fallback: customFallback,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_react.screen.getByTestId('custom-fallback')).toBeInTheDocument();
            expect(_react.screen.getByText('Custom Error UI')).toBeInTheDocument();
        });
        it('should render default fallback when no custom fallback provided', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
            expect(_react.screen.getByRole('button', {
                name: /try again/i
            })).toBeInTheDocument();
        // Report issue button only shows in production with errorId
        });
    });
    describe('Error Recovery', ()=>{
        it('should allow retry and reset error state', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            // Should show error UI
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
            // Click retry button
            const retryButton = _react.screen.getByRole('button', {
                name: /try again/i
            });
            _react.fireEvent.click(retryButton);
            // Should log retry attempt
            expect(_loggerconfig.appLogger.info).toHaveBeenCalledWith('Error Boundary Retry Attempted', expect.objectContaining({
                component: 'error-boundary-component',
                action: 'retry'
            }));
        // After retry, component would re-render and potentially throw again
        // This is normal behavior - retry doesn't magically fix broken components
        // It just resets the error boundary state for another attempt
        });
        it('should handle retry with different error boundary levels', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                level: "widget",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const retryButton = _react.screen.getByRole('button', {
                name: /try again/i
            });
            _react.fireEvent.click(retryButton);
            expect(_loggerconfig.appLogger.info).toHaveBeenCalledWith('Error Boundary Retry Attempted', expect.objectContaining({
                component: 'error-boundary-widget',
                action: 'retry'
            }));
        });
    });
    describe('Error Reporting', ()=>{
        it('should handle report issue action in production', ()=>{
            // Mock production environment
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                level: "page",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const reportButton = _react.screen.getByRole('button', {
                name: /report issue/i
            });
            _react.fireEvent.click(reportButton);
            expect(_loggerconfig.appLogger.userAction).toHaveBeenCalledWith('report-error', undefined, expect.objectContaining({
                errorId: 'mock-error-id',
                errorBoundaryLevel: 'page'
            }));
            // Restore environment
            process.env.NODE_ENV = originalEnv;
        });
        it('should not show report button when no error ID available', ()=>{
            // Mock Sentry to not return error ID
            const { captureException } = require('@sentry/nextjs');
            captureException.mockReturnValue(undefined);
            // Mock production environment
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            // Should not show report button when no errorId
            expect(_react.screen.queryByRole('button', {
                name: /report issue/i
            })).not.toBeInTheDocument();
            // Restore environment  
            process.env.NODE_ENV = originalEnv;
        });
        it('should open support URL in new window when in browser', ()=>{
            // Mock production environment
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            // Mock window.open
            const mockOpen = jest.fn();
            Object.defineProperty(window, 'open', {
                value: mockOpen,
                configurable: true
            });
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const reportButton = _react.screen.getByRole('button', {
                name: /report issue/i
            });
            _react.fireEvent.click(reportButton);
            expect(mockOpen).toHaveBeenCalledWith(expect.stringContaining('mailto:support@'), '_blank');
            // Restore environment
            process.env.NODE_ENV = originalEnv;
        });
    });
    describe('Context Integration', ()=>{
        it('should include custom context in error logging', ()=>{
            const customContext = {
                userId: 'user-123',
                sessionId: 'session-456',
                feature: 'analytics',
                experiment: 'test-variant'
            };
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                context: customContext,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                metadata: expect.objectContaining(customContext)
            }));
            // Verify Sentry integration was called
            const { withScope } = require('@sentry/nextjs');
            expect(withScope).toHaveBeenCalled();
        });
        it('should handle empty context gracefully', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                context: {},
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_loggerconfig.appLogger.error).toHaveBeenCalled();
            const { withScope } = require('@sentry/nextjs');
            expect(withScope).toHaveBeenCalled();
        });
        it('should handle undefined context gracefully', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                context: undefined,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            expect(_loggerconfig.appLogger.error).toHaveBeenCalled();
            const { withScope } = require('@sentry/nextjs');
            expect(withScope).toHaveBeenCalled();
        });
    });
    describe('Edge Cases', ()=>{
        it('should handle component that throws during render', ()=>{
            // Mock development environment to show error details
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'development';
            function BrokenComponent() {
                throw new Error('Render error');
            }
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(BrokenComponent, {})
            }));
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
            expect(_react.screen.getByText(/Render error/i)).toBeInTheDocument();
            // Restore environment
            process.env.NODE_ENV = originalEnv;
        });
        it('should handle async errors gracefully', async ()=>{
            function AsyncErrorComponent() {
                _react1.default.useEffect(()=>{
                    // Async errors won't be caught by error boundary
                    // but component should still render normally
                    setTimeout(()=>{
                        throw new Error('Async error');
                    }, 0);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "async-component",
                    children: "Async Component"
                });
            }
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AsyncErrorComponent, {})
            }));
            // Component should render normally since async errors aren't caught
            expect(_react.screen.getByTestId('async-component')).toBeInTheDocument();
        });
        it('should handle nested error boundaries', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                level: "page",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                        level: "widget",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                            shouldThrow: true
                        })
                    })
                })
            }));
            // Inner error boundary should catch the error
            expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith('Error Boundary Triggered (widget)', expect.objectContaining({
                component: 'error-boundary-widget'
            }));
            // Should show error UI
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
        });
        it('should handle very long error messages', ()=>{
            function LongErrorComponent() {
                throw new Error('A'.repeat(1000));
            }
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LongErrorComponent, {})
            }));
            expect(_react.screen.getByText(/Something went wrong/i)).toBeInTheDocument();
            // Should still log the full error
            expect(_loggerconfig.appLogger.error).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                error: expect.objectContaining({
                    message: 'A'.repeat(1000)
                })
            }));
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper ARIA attributes on error UI', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const errorContainer = _react.screen.getByRole('alert');
            expect(errorContainer).toBeInTheDocument();
            const retryButton = _react.screen.getByRole('button', {
                name: /try again/i
            });
            expect(retryButton).toBeInTheDocument();
        // Report button only available in production with errorId
        // In test environment (development), it won't be shown
        });
        it('should be keyboard navigable', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            const retryButton = _react.screen.getByRole('button', {
                name: /try again/i
            });
            // Button should be focusable
            retryButton.focus();
            expect(document.activeElement).toBe(retryButton);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,