{"version":3,"names":["cov_hp1krkxd6","actualCoverage","s","DonutProgress","f","DoughnutChart","PieChart","_chart","Chart","register","ArcElement","Title","Tooltip","Legend","data","title","height","b","showLegend","showTooltips","showPercentages","doughnut","centerText","centerValue","className","options","responsive","maintainAspectRatio","plugins","display","text","font","family","size","weight","color","_config","CHART_COLORS","textPrimary","padding","bottom","legend","position","labels","usePointStyle","pointStyle","generateLabels","chart","datasets","length","dataset","total","reduce","sum","value","map","label","index","percentage","toFixed","fillStyle","Array","isArray","backgroundColor","dataColors","strokeStyle","borderColor","background","lineWidth","tooltip","enabled","titleColor","bodyColor","textSecondary","border","borderWidth","cornerRadius","titleFont","bodyFont","callbacks","context","parsed","formatTooltip","animation","animateRotate","animateScale","duration","interaction","intersect","styledData","hoverBorderWidth","hoverOffset","ChartComponent","_reactchartjs2","Doughnut","Pie","_jsxruntime","jsx","style","jsxs","item","displayValue","toLocaleString","displayText","chartData","undefined","maxValue","primary","Math","min","remaining","width"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/charts/PieChart.tsx"],"sourcesContent":["'use client';\n\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  type ChartData,\n  type ChartOptions,\n} from 'chart.js';\nimport { Pie, Doughnut } from 'react-chartjs-2';\n\nimport { getDefaultChartOptions, formatTooltip, CHART_COLORS } from '@/lib/charts/config';\n\n// Register Chart.js components\nChartJS.register(\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport interface PieChartProps {\n  data: ChartData<'pie'>;\n  title?: string;\n  height?: number;\n  showLegend?: boolean;\n  showTooltips?: boolean;\n  showPercentages?: boolean;\n  doughnut?: boolean;\n  centerText?: string;\n  centerValue?: string;\n  className?: string;\n}\n\n/**\n * Professional Pie Chart Component\n * Optimized for part-to-whole data visualization\n */\nexport function PieChart({\n  data,\n  title,\n  height = 300,\n  showLegend = true,\n  showTooltips = true,\n  showPercentages = true,\n  doughnut = false,\n  centerText,\n  centerValue,\n  className = '',\n}: PieChartProps): React.ReactElement {\n  \n  const options: ChartOptions<'pie'> = {\n    responsive: true,\n    maintainAspectRatio: false,\n    \n    plugins: {\n      title: title ? {\n        display: true,\n        text: title,\n        font: {\n          family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',\n          size: 16,\n          weight: 600,\n        },\n        color: CHART_COLORS.textPrimary,\n        padding: {\n          bottom: 20,\n        },\n      } : { display: false },\n      \n      legend: {\n        display: showLegend,\n        position: 'bottom' as const,\n        labels: {\n          font: {\n            family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',\n            size: 12,\n            weight: 400,\n          },\n          color: CHART_COLORS.textPrimary,\n          padding: 15,\n          usePointStyle: true,\n          pointStyle: 'circle',\n          generateLabels: (chart) => {\n            const datasets = chart.data.datasets;\n            if (datasets.length > 0) {\n              const dataset = datasets[0];\n              const labels = chart.data.labels || [];\n              const data = dataset.data as number[];\n              const total = data.reduce((sum, value) => sum + value, 0);\n              \n              return labels.map((label, index) => {\n                const value = data[index];\n                const percentage = ((value / total) * 100).toFixed(1);\n                \n                return {\n                  text: showPercentages ? `${label} (${percentage}%)` : label as string,\n                  fillStyle: Array.isArray(dataset.backgroundColor) \n                    ? dataset.backgroundColor[index] \n                    : dataset.backgroundColor || CHART_COLORS.dataColors[index],\n                  strokeStyle: Array.isArray(dataset.borderColor)\n                    ? dataset.borderColor[index]\n                    : dataset.borderColor || CHART_COLORS.background,\n                  lineWidth: 2,\n                  pointStyle: 'circle',\n                  index,\n                };\n              });\n            }\n            return [];\n          },\n        },\n      },\n      \n      tooltip: {\n        enabled: showTooltips,\n        backgroundColor: CHART_COLORS.background,\n        titleColor: CHART_COLORS.textPrimary,\n        bodyColor: CHART_COLORS.textSecondary,\n        borderColor: CHART_COLORS.border,\n        borderWidth: 1,\n        cornerRadius: 8,\n        padding: 12,\n        titleFont: {\n          family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',\n          size: 13,\n          weight: 600,\n        },\n        bodyFont: {\n          family: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif',\n          size: 12,\n          weight: 400,\n        },\n        callbacks: {\n          label: (context) => {\n            const label = context.label || '';\n            const value = context.parsed;\n            const total = context.dataset.data.reduce((sum: number, data: number) => sum + data, 0);\n            const percentage = ((value / total) * 100).toFixed(1);\n            return `${label}: ${formatTooltip(context)} (${percentage}%)`;\n          },\n        },\n      },\n    },\n    \n    animation: {\n      animateRotate: true,\n      animateScale: true,\n      duration: 800,\n    },\n    \n    interaction: {\n      intersect: false,\n    },\n  };\n\n  // Apply styling to dataset\n  const styledData: ChartData<'pie'> = {\n    ...data,\n    datasets: data.datasets.map((dataset) => ({\n      ...dataset,\n      backgroundColor: dataset.backgroundColor || CHART_COLORS.dataColors,\n      borderColor: dataset.borderColor || CHART_COLORS.background,\n      borderWidth: 2,\n      hoverBorderWidth: 3,\n      hoverOffset: 8,\n    })),\n  };\n\n  const ChartComponent = doughnut ? Doughnut : Pie;\n\n  return (\n    <div \n      className={`w-full bg-[#FDF9F3] rounded-lg border border-[#E6D7B8] p-4 ${className}`}\n      style={{ height: height + 40 }} // Add padding for container\n    >\n      <div className=\"w-full h-full relative\">\n        <ChartComponent \n          data={styledData} \n          options={options}\n          aria-label={title || 'Pie chart'}\n        />\n        \n        {/* Center text for doughnut charts */}\n        {doughnut && (centerText || centerValue) && (\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center pointer-events-none\">\n            {centerValue && (\n              <div className=\"text-2xl font-bold text-[#3d3d3d]\">\n                {centerValue}\n              </div>\n            )}\n            {centerText && (\n              <div className=\"text-sm text-[#5d5d5d] mt-1\">\n                {centerText}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Doughnut Chart with center value display\n */\nexport function DoughnutChart({\n  data,\n  title,\n  centerText,\n  centerValue,\n  height = 300,\n  className = '',\n}: {\n  data: Array<{\n    label: string;\n    value: number;\n    color?: string;\n  }>;\n  title?: string;\n  centerText?: string;\n  centerValue?: string;\n  height?: number;\n  className?: string;\n}): React.ReactElement {\n  \n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const displayValue = centerValue || total.toLocaleString('de-DE');\n  const displayText = centerText || 'Gesamt';\n  \n  const chartData: ChartData<'pie'> = {\n    labels: data.map(item => item.label),\n    datasets: [{\n      data: data.map(item => item.value),\n      backgroundColor: data.map((item, index) => \n        item.color || CHART_COLORS.dataColors[index]\n      ),\n      borderColor: CHART_COLORS.background,\n      borderWidth: 2,\n      hoverBorderWidth: 3,\n      hoverOffset: 8,\n    }],\n  };\n\n  return (\n    <PieChart\n      data={chartData}\n      title={title || undefined}\n      height={height}\n      doughnut={true}\n      centerText={displayText}\n      centerValue={displayValue}\n      className={className}\n    />\n  );\n}\n\n/**\n * Simple donut progress indicator\n */\nexport function DonutProgress({\n  value,\n  maxValue,\n  label,\n  color = CHART_COLORS.primary,\n  size = 120,\n  className = '',\n}: {\n  value: number;\n  maxValue: number;\n  label?: string;\n  color?: string;\n  size?: number;\n  className?: string;\n}): React.ReactElement {\n  \n  const percentage = Math.min((value / maxValue) * 100, 100);\n  const remaining = 100 - percentage;\n  \n  const chartData: ChartData<'doughnut'> = {\n    labels: ['Erreicht', 'Verbleibend'],\n    datasets: [{\n      data: [percentage, remaining],\n      backgroundColor: [color, '#F5EFE7'],\n      borderColor: CHART_COLORS.background,\n      borderWidth: 0,\n      // cutout: '75%', // Removed - not supported in this dataset type\n    }],\n  };\n  \n  const options: ChartOptions<'doughnut'> = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: { display: false },\n      tooltip: { enabled: false },\n    },\n    animation: {\n      animateRotate: true,\n      duration: 1000,\n    },\n  };\n\n  return (\n    <div className={`relative ${className}`} style={{ width: size, height: size }}>\n      <Doughnut data={chartData} options={options} />\n      <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n        <div className=\"text-xl font-bold text-[#3d3d3d]\">\n          {percentage.toFixed(0)}%\n        </div>\n        {label && (\n          <div className=\"text-xs text-[#5d5d5d] text-center mt-1\">\n            {label}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]}