707aebb54672c2c31bf2faae6ab1ad28
/**
 * Token Manager Tests - JWT Security (95% Coverage Target)
 * Critical business logic for authentication and authorization
 * 
 * Test Categories:
 * 1. Token Storage & Retrieval Operations
 * 2. Expiration Validation & Refresh Logic  
 * 3. JWT Payload Parsing & User Info Extraction
 * 4. API Client Integration
 * 5. Security Edge Cases & Error Handling
 * 6. Server-Side vs Client-Side Behavior
 */ "use strict";
// Mock logger to avoid console noise in tests (allowing actual logging for debugging)
jest.mock('@/lib/monitoring/logger.config', ()=>({
        appLogger: {
            debug: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            info: jest.fn()
        }
    }));
// Mock API client to avoid circular dependencies
jest.mock('@/lib/api/client', ()=>({
        apiClient: {
            setAuthToken: jest.fn(),
            clearAuthToken: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _token = require("../token");
describe('TokenManager - JWT Security Tests (95% Coverage)', ()=>{
    // Test data
    const validTokenData = {
        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLTEiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE3MDAwMDAwMDAsImlhdCI6MTY5OTk5OTAwMH0.test-signature',
        refreshToken: 'refresh-token-123',
        expiresAt: new Date(Date.now() + 3600000).toISOString()
    };
    const expiredTokenData = {
        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLTEiLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE2MDAwMDAwMDAsImlhdCI6MTU5OTk5OTAwMH0.test-signature',
        refreshToken: 'refresh-token-expired',
        expiresAt: new Date(Date.now() - 3600000).toISOString()
    };
    // Mock localStorage
    const localStorageMock = {
        getItem: jest.fn(),
        setItem: jest.fn(),
        removeItem: jest.fn(),
        clear: jest.fn()
    };
    const originalWindow = global.window;
    const originalLocalStorage = global.localStorage;
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock window and localStorage for client-side tests
        Object.defineProperty(global, 'window', {
            value: {
                localStorage: localStorageMock
            },
            writable: true,
            configurable: true
        });
        Object.defineProperty(global, 'localStorage', {
            value: localStorageMock,
            writable: true,
            configurable: true
        });
    });
    afterEach(()=>{
        // Restore original window
        if (originalWindow) {
            global.window = originalWindow;
        } else {
            delete global.window;
        }
        global.localStorage = originalLocalStorage;
    });
    describe('Token Storage Operations', ()=>{
        it('should store tokens successfully on client side', ()=>{
            _token.tokenManager.setTokens(validTokenData);
            expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', validTokenData.token);
            expect(localStorageMock.setItem).toHaveBeenCalledWith('refresh_token', validTokenData.refreshToken);
            expect(localStorageMock.setItem).toHaveBeenCalledWith('token_expiry', validTokenData.expiresAt);
        });
        it('should handle server side gracefully', ()=>{
            // Since TokenManager is a singleton, isClient is set once at module load
            // This test verifies the method doesn't throw rather than testing the exact server behavior
            expect(()=>_token.tokenManager.setTokens(validTokenData)).not.toThrow();
        // The actual server-side behavior would be tested in a fresh Node.js environment
        // where window is undefined from the start
        });
        it('should handle localStorage errors during storage', ()=>{
            localStorageMock.setItem.mockImplementation(()=>{
                throw new Error('Storage quota exceeded');
            });
            expect(()=>_token.tokenManager.setTokens(validTokenData)).toThrow('Token storage failed');
        });
        it('should clear all tokens successfully', ()=>{
            _token.tokenManager.clearTokens();
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('auth_token');
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('refresh_token');
            expect(localStorageMock.removeItem).toHaveBeenCalledWith('token_expiry');
        });
        it('should handle localStorage errors during clearing', ()=>{
            localStorageMock.removeItem.mockImplementation(()=>{
                throw new Error('localStorage access denied');
            });
            // Should not throw, just log error
            expect(()=>_token.tokenManager.clearTokens()).not.toThrow();
        });
        it('should handle server side clearing gracefully', ()=>{
            // Similar to storage, since TokenManager is a singleton, this tests graceful handling
            expect(()=>_token.tokenManager.clearTokens()).not.toThrow();
        });
    });
    describe('Token Retrieval & Validation', ()=>{
        it('should retrieve valid token info', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo).toEqual({
                token: validTokenData.token,
                refreshToken: validTokenData.refreshToken,
                expiresAt: new Date(validTokenData.expiresAt),
                isValid: true,
                isExpired: false
            });
        });
        it('should handle expired tokens correctly', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(expiredTokenData.token).mockReturnValueOnce(expiredTokenData.refreshToken).mockReturnValueOnce(expiredTokenData.expiresAt);
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo).toEqual({
                token: expiredTokenData.token,
                refreshToken: expiredTokenData.refreshToken,
                expiresAt: new Date(expiredTokenData.expiresAt),
                isValid: false,
                isExpired: true
            });
        });
        it('should handle missing tokens', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo).toEqual({
                token: null,
                refreshToken: null,
                expiresAt: null,
                isValid: false,
                isExpired: true
            });
        });
        it('should handle invalid expiry date format', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce('invalid-date');
            const tokenInfo = _token.tokenManager.getTokenInfo();
            // Test current behavior: invalid date string creates a Date object but represents Invalid Date
            expect(tokenInfo.expiresAt).toBeInstanceOf(Date);
            // JavaScript Date('invalid-date') creates a Date that isNaN but still truthy
            const isInvalidDate = isNaN(tokenInfo.expiresAt.getTime());
            expect(isInvalidDate).toBe(true); // The date should be invalid
            // Current implementation doesn't check for invalid dates in the isValid logic
            // This test documents the current behavior - could be improved in future
            // For now, we test that it doesn't crash and returns a consistent structure
            expect(typeof tokenInfo.isValid).toBe('boolean');
            expect(typeof tokenInfo.isExpired).toBe('boolean');
        });
        it('should handle server side token retrieval gracefully', ()=>{
            // Since TokenManager is a singleton, this tests graceful handling rather than true server behavior
            const tokenInfo = _token.tokenManager.getTokenInfo();
            // The method should not throw and should return a valid TokenInfo structure
            expect(tokenInfo).toHaveProperty('token');
            expect(tokenInfo).toHaveProperty('refreshToken');
            expect(tokenInfo).toHaveProperty('expiresAt');
            expect(tokenInfo).toHaveProperty('isValid');
            expect(tokenInfo).toHaveProperty('isExpired');
        });
        it('should handle localStorage errors during retrieval', ()=>{
            localStorageMock.getItem.mockImplementation(()=>{
                throw new Error('localStorage access denied');
            });
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo.isValid).toBe(false);
        });
        it('should get access token when valid', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            const accessToken = _token.tokenManager.getAccessToken();
            expect(accessToken).toBe(validTokenData.token);
        });
        it('should return null access token when invalid', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            const accessToken = _token.tokenManager.getAccessToken();
            expect(accessToken).toBeNull();
        });
        it('should get refresh token when available', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            const refreshToken = _token.tokenManager.getRefreshToken();
            expect(refreshToken).toBe(validTokenData.refreshToken);
        });
        it('should return null refresh token when unavailable', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            const refreshToken = _token.tokenManager.getRefreshToken();
            expect(refreshToken).toBeNull();
        });
    });
    describe('Expiration & Refresh Logic', ()=>{
        it('should detect when token needs refresh (within 5 minutes)', ()=>{
            const soonToExpireData = {
                ...validTokenData,
                expiresAt: new Date(Date.now() + 4 * 60 * 1000).toISOString()
            };
            localStorageMock.getItem.mockReturnValueOnce(soonToExpireData.token).mockReturnValueOnce(soonToExpireData.refreshToken).mockReturnValueOnce(soonToExpireData.expiresAt);
            const needsRefresh = _token.tokenManager.needsRefresh();
            expect(needsRefresh).toBe(true);
        });
        it('should not need refresh when token has plenty of time', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            const needsRefresh = _token.tokenManager.needsRefresh();
            expect(needsRefresh).toBe(false);
        });
        it('should not need refresh when no token exists', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            const needsRefresh = _token.tokenManager.needsRefresh();
            expect(needsRefresh).toBe(false);
        });
        it('should not need refresh when no expiry date exists', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(null);
            const needsRefresh = _token.tokenManager.needsRefresh();
            expect(needsRefresh).toBe(false);
        });
    });
    describe('JWT Payload Parsing', ()=>{
        it('should parse valid JWT payload correctly', ()=>{
            const payload = _token.tokenManager.parseTokenPayload(validTokenData.token);
            expect(payload).toEqual({
                sub: 'user-1',
                email: 'test@example.com',
                role: 'admin',
                exp: 1700000000,
                iat: 1699999000
            });
        });
        it('should handle malformed JWT tokens', ()=>{
            const malformedToken = 'invalid.token.format';
            const payload = _token.tokenManager.parseTokenPayload(malformedToken);
            expect(payload).toBeNull();
        });
        it('should handle JWT with missing payload section', ()=>{
            const tokenWithoutPayload = 'header..signature';
            const payload = _token.tokenManager.parseTokenPayload(tokenWithoutPayload);
            expect(payload).toBeNull();
        });
        it('should handle invalid base64 in JWT payload', ()=>{
            const tokenWithInvalidBase64 = 'header.invalid-base64-payload.signature';
            const payload = _token.tokenManager.parseTokenPayload(tokenWithInvalidBase64);
            expect(payload).toBeNull();
        });
        it('should get current user info from valid token', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            const userInfo = _token.tokenManager.getCurrentUserInfo();
            expect(userInfo).toEqual({
                userId: 'user-1',
                email: 'test@example.com',
                role: 'admin'
            });
        });
        it('should return null user info when no token', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            const userInfo = _token.tokenManager.getCurrentUserInfo();
            expect(userInfo).toBeNull();
        });
        it('should return null user info when token payload is invalid', ()=>{
            const invalidToken = 'invalid.token.format';
            localStorageMock.getItem.mockReturnValueOnce(invalidToken).mockReturnValueOnce('refresh').mockReturnValueOnce(validTokenData.expiresAt);
            const userInfo = _token.tokenManager.getCurrentUserInfo();
            expect(userInfo).toBeNull();
        });
    });
    describe('API Client Integration', ()=>{
        it('should call updateApiClientToken without errors', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            // Should not throw
            expect(()=>_token.tokenManager.updateApiClientToken()).not.toThrow();
        });
        it('should call updateApiClientToken with no token without errors', ()=>{
            localStorageMock.getItem.mockReturnValue(null);
            // Should not throw
            expect(()=>_token.tokenManager.updateApiClientToken()).not.toThrow();
        });
        it('should handle API client integration gracefully', ()=>{
            // API client integration is async and handled separately
            // This test ensures the method exists and can be called
            expect(typeof _token.tokenManager.updateApiClientToken).toBe('function');
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(validTokenData.refreshToken).mockReturnValueOnce(validTokenData.expiresAt);
            _token.tokenManager.updateApiClientToken();
            // Should complete without throwing
            expect(true).toBe(true);
        });
    });
    describe('Security Edge Cases', ()=>{
        it('should handle partial token data gracefully', ()=>{
            localStorageMock.getItem.mockReturnValueOnce(validTokenData.token).mockReturnValueOnce(null) // Missing refresh token
            .mockReturnValueOnce(validTokenData.expiresAt);
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo.isValid).toBe(false);
            expect(tokenInfo.token).toBe(validTokenData.token);
            expect(tokenInfo.refreshToken).toBeNull();
        });
        it('should handle empty string tokens', ()=>{
            localStorageMock.getItem.mockReturnValueOnce('').mockReturnValueOnce('').mockReturnValueOnce('');
            const tokenInfo = _token.tokenManager.getTokenInfo();
            expect(tokenInfo.isValid).toBe(false);
        });
        it('should handle very large tokens', ()=>{
            const largeToken = 'a'.repeat(10000); // 10KB token
            const largeTokenData = {
                ...validTokenData,
                token: largeToken
            };
            // Reset localStorage mock to allow large token storage
            localStorageMock.setItem.mockClear();
            localStorageMock.setItem.mockImplementation(()=>{}); // Success
            expect(()=>_token.tokenManager.setTokens(largeTokenData)).not.toThrow();
            expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', largeToken);
        });
        it('should handle concurrent token operations', ()=>{
            // Reset localStorage mock for this test
            localStorageMock.setItem.mockClear();
            localStorageMock.getItem.mockClear();
            localStorageMock.removeItem.mockClear();
            localStorageMock.setItem.mockImplementation(()=>{}); // Success
            localStorageMock.removeItem.mockImplementation(()=>{}); // Success
            // Simulate concurrent calls
            expect(()=>{
                _token.tokenManager.setTokens(validTokenData);
                _token.tokenManager.getTokenInfo();
                _token.tokenManager.clearTokens();
            }).not.toThrow();
            // Should not cause any errors
            expect(localStorageMock.setItem).toHaveBeenCalled();
            expect(localStorageMock.getItem).toHaveBeenCalled();
            expect(localStorageMock.removeItem).toHaveBeenCalled();
        });
        it('should validate token format before storage', ()=>{
            const invalidTokenData = {
                token: '',
                refreshToken: 'valid-refresh',
                expiresAt: validTokenData.expiresAt
            };
            // Reset localStorage mock for this test
            localStorageMock.setItem.mockClear();
            localStorageMock.setItem.mockImplementation(()=>{}); // Success
            _token.tokenManager.setTokens(invalidTokenData);
            // Should still store (validation happens on retrieval)
            expect(localStorageMock.setItem).toHaveBeenCalledWith('auth_token', '');
        });
    });
    describe('Instance Management', ()=>{
        it('should be a singleton instance', ()=>{
            const instance1 = _token.tokenManager;
            const instance2 = _token.tokenManager;
            expect(instance1).toBe(instance2);
        });
        it('should provide consistent interface', ()=>{
            expect(typeof _token.tokenManager.setTokens).toBe('function');
            expect(typeof _token.tokenManager.getTokenInfo).toBe('function');
            expect(typeof _token.tokenManager.clearTokens).toBe('function');
            expect(typeof _token.tokenManager.getAccessToken).toBe('function');
            expect(typeof _token.tokenManager.getRefreshToken).toBe('function');
            expect(typeof _token.tokenManager.needsRefresh).toBe('function');
            expect(typeof _token.tokenManager.updateApiClientToken).toBe('function');
            expect(typeof _token.tokenManager.getCurrentUserInfo).toBe('function');
            expect(typeof _token.tokenManager.parseTokenPayload).toBe('function');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,