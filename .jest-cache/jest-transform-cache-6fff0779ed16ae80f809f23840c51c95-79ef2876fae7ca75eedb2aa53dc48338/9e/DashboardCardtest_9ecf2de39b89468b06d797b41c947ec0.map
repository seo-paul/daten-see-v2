{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/dashboard/__tests__/DashboardCard.test.tsx"],"sourcesContent":["/**\n * DashboardCard Component Tests - Streamlined\n * Testing core dashboard card functionality only\n */\n\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport type { DashboardListItem } from '@/types/dashboard.types';\n\nimport { DashboardCard } from '../DashboardCard';\n\n// Mock next/navigation\nconst mockRouter = {\n  push: jest.fn(),\n};\n\njest.mock('next/navigation', () => ({\n  useRouter: () => mockRouter,\n}));\n\nconst mockDashboard: DashboardListItem = {\n  id: 'dashboard-1',\n  name: 'Analytics Dashboard',\n  description: 'Key metrics and performance indicators',\n  isPublic: false,\n  updatedAt: new Date('2024-01-15T10:30:00Z'),\n  widgetCount: 5,\n};\n\ndescribe('DashboardCard Component', () => {\n  const mockOnEdit = jest.fn();\n  const mockOnDelete = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render dashboard information correctly', () => {\n    render(\n      <DashboardCard \n        dashboard={mockDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    expect(screen.getByText('Analytics Dashboard')).toBeInTheDocument();\n    expect(screen.getByText('Key metrics and performance indicators')).toBeInTheDocument();\n    expect(screen.getByText('5 Widgets')).toBeInTheDocument();\n    expect(screen.getByText('Privat')).toBeInTheDocument();\n  });\n\n  it('should have clickable title link', () => {\n    render(\n      <DashboardCard \n        dashboard={mockDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    const titleLink = screen.getByText('Analytics Dashboard').closest('a');\n    expect(titleLink).toHaveAttribute('href', '/dashboard/dashboard-1');\n  });\n\n  it('should call onEdit when edit action is clicked', async () => {\n    const user = userEvent.setup();\n    render(\n      <DashboardCard \n        dashboard={mockDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    await user.click(screen.getByRole('button'));\n    await user.click(screen.getByText('Bearbeiten'));\n    \n    expect(mockOnEdit).toHaveBeenCalledWith(mockDashboard);\n  });\n\n  it('should call onDelete when delete action is clicked', async () => {\n    const user = userEvent.setup();\n    render(\n      <DashboardCard \n        dashboard={mockDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    await user.click(screen.getByRole('button'));\n    await user.click(screen.getByText('Löschen'));\n    \n    expect(mockOnDelete).toHaveBeenCalledWith(mockDashboard.id);\n  });\n\n  it('should display public status correctly', () => {\n    const publicDashboard = { ...mockDashboard, isPublic: true };\n    render(\n      <DashboardCard \n        dashboard={publicDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    expect(screen.getByText('Öffentlich')).toBeInTheDocument();\n  });\n\n  it('should show actions menu when button is clicked', async () => {\n    const user = userEvent.setup();\n    render(\n      <DashboardCard \n        dashboard={mockDashboard}\n        onEdit={mockOnEdit}\n        onDelete={mockOnDelete}\n      />\n    );\n\n    await user.click(screen.getByRole('button'));\n\n    expect(screen.getByText('Bearbeiten')).toBeInTheDocument();\n    expect(screen.getByText('Löschen')).toBeInTheDocument();\n  });\n});"],"names":["jest","mock","useRouter","mockRouter","push","fn","mockDashboard","id","name","description","isPublic","updatedAt","Date","widgetCount","describe","mockOnEdit","mockOnDelete","beforeEach","clearAllMocks","it","render","DashboardCard","dashboard","onEdit","onDelete","expect","screen","getByText","toBeInTheDocument","titleLink","closest","toHaveAttribute","user","userEvent","setup","click","getByRole","toHaveBeenCalledWith","publicDashboard"],"mappings":"AAAA;;;CAGC;AAeDA,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCC,WAAW,IAAMC;IACnB,CAAA;;;;;uBAf+B;kEACT;+DACJ;+BAIY;;;;;;AAE9B,uBAAuB;AACvB,MAAMA,aAAa;IACjBC,MAAMJ,KAAKK,EAAE;AACf;AAMA,MAAMC,gBAAmC;IACvCC,IAAI;IACJC,MAAM;IACNC,aAAa;IACbC,UAAU;IACVC,WAAW,IAAIC,KAAK;IACpBC,aAAa;AACf;AAEAC,SAAS,2BAA2B;IAClC,MAAMC,aAAaf,KAAKK,EAAE;IAC1B,MAAMW,eAAehB,KAAKK,EAAE;IAE5BY,WAAW;QACTjB,KAAKkB,aAAa;IACpB;IAEAC,GAAG,iDAAiD;QAClDC,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWhB;YACXiB,QAAQR;YACRS,UAAUR;;QAIdS,OAAOC,aAAM,CAACC,SAAS,CAAC,wBAAwBC,iBAAiB;QACjEH,OAAOC,aAAM,CAACC,SAAS,CAAC,2CAA2CC,iBAAiB;QACpFH,OAAOC,aAAM,CAACC,SAAS,CAAC,cAAcC,iBAAiB;QACvDH,OAAOC,aAAM,CAACC,SAAS,CAAC,WAAWC,iBAAiB;IACtD;IAEAT,GAAG,oCAAoC;QACrCC,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWhB;YACXiB,QAAQR;YACRS,UAAUR;;QAId,MAAMa,YAAYH,aAAM,CAACC,SAAS,CAAC,uBAAuBG,OAAO,CAAC;QAClEL,OAAOI,WAAWE,eAAe,CAAC,QAAQ;IAC5C;IAEAZ,GAAG,kDAAkD;QACnD,MAAMa,OAAOC,kBAAS,CAACC,KAAK;QAC5Bd,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWhB;YACXiB,QAAQR;YACRS,UAAUR;;QAId,MAAMgB,KAAKG,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC;QAClC,MAAMJ,KAAKG,KAAK,CAACT,aAAM,CAACC,SAAS,CAAC;QAElCF,OAAOV,YAAYsB,oBAAoB,CAAC/B;IAC1C;IAEAa,GAAG,sDAAsD;QACvD,MAAMa,OAAOC,kBAAS,CAACC,KAAK;QAC5Bd,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWhB;YACXiB,QAAQR;YACRS,UAAUR;;QAId,MAAMgB,KAAKG,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC;QAClC,MAAMJ,KAAKG,KAAK,CAACT,aAAM,CAACC,SAAS,CAAC;QAElCF,OAAOT,cAAcqB,oBAAoB,CAAC/B,cAAcC,EAAE;IAC5D;IAEAY,GAAG,0CAA0C;QAC3C,MAAMmB,kBAAkB;YAAE,GAAGhC,aAAa;YAAEI,UAAU;QAAK;QAC3DU,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWgB;YACXf,QAAQR;YACRS,UAAUR;;QAIdS,OAAOC,aAAM,CAACC,SAAS,CAAC,eAAeC,iBAAiB;IAC1D;IAEAT,GAAG,mDAAmD;QACpD,MAAMa,OAAOC,kBAAS,CAACC,KAAK;QAC5Bd,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;YACZC,WAAWhB;YACXiB,QAAQR;YACRS,UAAUR;;QAId,MAAMgB,KAAKG,KAAK,CAACT,aAAM,CAACU,SAAS,CAAC;QAElCX,OAAOC,aAAM,CAACC,SAAS,CAAC,eAAeC,iBAAiB;QACxDH,OAAOC,aAAM,CAACC,SAAS,CAAC,YAAYC,iBAAiB;IACvD;AACF"}