0c62413e051897ae6dfcaf9626bcc90e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Input () {
        return Input;
    },
    get Textarea () {
        return Textarea;
    },
    get default () {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _classvarianceauthority = require("class-variance-authority");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _cn = require("../../lib/utils/cn");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Input variants following DATEN-SEE design system
const inputVariants = (0, _classvarianceauthority.cva)(// Base input styles
[
    'block w-full px-3 py-2 border rounded-lg transition-all duration-200',
    'bg-surface-primary text-text-primary placeholder-text-tertiary',
    'focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-brand-primary',
    'disabled:bg-surface-secondary disabled:text-text-disabled disabled:cursor-not-allowed',
    'disabled:border-border-primary disabled:opacity-60'
], {
    variants: {
        variant: {
            default: 'border-border-primary',
            error: 'border-danger focus:ring-danger focus:border-danger',
            success: 'border-success focus:ring-success focus:border-success'
        },
        size: {
            sm: 'h-8 text-sm px-2',
            md: 'h-10 text-base px-3',
            lg: 'h-12 text-lg px-4'
        }
    },
    defaultVariants: {
        variant: 'default',
        size: 'md'
    }
});
const Input = /*#__PURE__*/ _react.default.forwardRef(({ className, variant, size, leftIcon, rightIcon, error, helperText, label, id, ...props }, ref)=>{
    const inputId = id || `input-${Math.random().toString(36).substring(2, 9)}`;
    const hasError = Boolean(error);
    const finalVariant = hasError ? 'error' : variant;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "w-full",
        children: [
            label && /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                htmlFor: inputId,
                className: "block text-sm font-medium text-text-primary mb-1",
                children: label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    leftIcon && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-text-tertiary",
                            children: leftIcon
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        ref: ref,
                        id: inputId,
                        className: (0, _cn.cn)(inputVariants({
                            variant: finalVariant,
                            size
                        }), leftIcon && 'pl-10', rightIcon && 'pr-10', className),
                        ...props
                    }),
                    rightIcon && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-text-tertiary",
                            children: rightIcon
                        })
                    })
                ]
            }),
            (error || helperText) && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: (0, _cn.cn)('mt-1 text-sm', hasError ? 'text-danger' : 'text-text-tertiary'),
                children: error || helperText
            })
        ]
    });
});
Input.displayName = 'Input';
const Textarea = /*#__PURE__*/ _react.default.forwardRef(({ className, variant, error, helperText, label, id, resize = 'vertical', rows = 3, ...props }, ref)=>{
    const textareaId = id || `textarea-${Math.random().toString(36).substring(2, 9)}`;
    const hasError = Boolean(error);
    const finalVariant = hasError ? 'error' : variant;
    const resizeClasses = {
        none: 'resize-none',
        vertical: 'resize-y',
        horizontal: 'resize-x',
        both: 'resize'
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "w-full",
        children: [
            label && /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                htmlFor: textareaId,
                className: "block text-sm font-medium text-text-primary mb-1",
                children: label
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                ref: ref,
                id: textareaId,
                rows: rows,
                className: (0, _cn.cn)(inputVariants({
                    variant: finalVariant,
                    size: 'md'
                }), 'min-h-[80px] py-2', resizeClasses[resize], className),
                ...props
            }),
            (error || helperText) && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: (0, _cn.cn)('mt-1 text-sm', hasError ? 'text-danger' : 'text-text-tertiary'),
                children: error || helperText
            })
        ]
    });
});
Textarea.displayName = 'Textarea';
const _default = Input;

//# sourceMappingURL=data:application/json;base64,