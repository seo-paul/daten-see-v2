{"version":3,"names":["cov_2ek8ykyv91","actualCoverage","s","queryClient","_reactquery","QueryClient","defaultOptions","queries","staleTime","gcTime","retry","retryDelay","attemptIndex","f","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","mutations","onError","error","_loggerconfig","appLogger","Error","b","message","stack","undefined","getQueryCache","subscribe","event","type","action","queryKey","query","process","env","NODE_ENV","debug"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/query/client.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\n\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\n// Query Client Configuration with optimized defaults\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Cache data for 5 minutes by default\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      // Keep data in cache for 10 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes (renamed from cacheTime in v5)\n      // Retry failed requests 2 times\n      retry: 2,\n      // Retry with exponential backoff\n      retryDelay: (attemptIndex: number): number => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Refetch on window focus (useful for dashboard data)\n      refetchOnWindowFocus: true,\n      // Don't refetch on reconnect for better UX\n      refetchOnReconnect: false,\n      // Refetch on mount only if data is stale\n      refetchOnMount: true\n    },\n    mutations: {\n      // Retry mutations once on failure\n      retry: 1,\n      // Log mutation errors\n      onError: (error: Error): void => {\n        appLogger.error('Mutation failed', { \n          error: error instanceof Error ? error.message : 'Unknown error',\n          stack: error instanceof Error ? error.stack : undefined\n        });\n      }\n    }\n  }\n});\n\n// Global error handler for queries via cache subscription\nqueryClient.getQueryCache().subscribe((event) => {\n  if (event?.type === 'updated' && event.action?.type === 'error') {\n    const { error } = event.action;\n    appLogger.error('Query failed', { \n      queryKey: event.query.queryKey,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    });\n  }\n});\n\n// Development logging for cache events\nif (process.env.NODE_ENV === 'development') {\n  queryClient.getQueryCache().subscribe((event) => {\n    if (event?.type === 'updated' && event.action?.type === 'success') {\n      appLogger.debug('Query cache updated', {\n        queryKey: event.query.queryKey,\n        type: event.type\n      });\n    }\n  });\n}"],"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","ignoreList":[]}