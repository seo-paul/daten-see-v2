f7883d82304a62ec2290e2c31a30add1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "tokenManager", {
    enumerable: true,
    get: function() {
        return tokenManager;
    }
});
const _loggerconfig = require("../monitoring/logger.config");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Token storage keys
const TOKEN_KEY = 'auth_token';
const REFRESH_TOKEN_KEY = 'refresh_token';
const TOKEN_EXPIRY_KEY = 'token_expiry';
/**
 * Secure Token Manager
 * Handles JWT token storage, validation, and expiration checks
 * Uses localStorage for client-side storage (will be enhanced with httpOnly cookies later)
 */ class TokenManager {
    constructor(){
        this.isClient = typeof window !== 'undefined';
    }
    /**
   * Store authentication tokens securely
   */ setTokens(tokenData) {
        if (!this.isClient) {
            _loggerconfig.appLogger.warn('Token storage attempted on server side');
            return;
        }
        try {
            localStorage.setItem(TOKEN_KEY, tokenData.token);
            localStorage.setItem(REFRESH_TOKEN_KEY, tokenData.refreshToken);
            localStorage.setItem(TOKEN_EXPIRY_KEY, tokenData.expiresAt);
            _loggerconfig.appLogger.debug('Tokens stored successfully', {
                expiresAt: tokenData.expiresAt,
                hasToken: !!tokenData.token,
                hasRefreshToken: !!tokenData.refreshToken
            });
        } catch (error) {
            _loggerconfig.appLogger.error('Failed to store tokens', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            throw new Error('Token storage failed');
        }
    }
    /**
   * Retrieve stored tokens with validation
   */ getTokenInfo() {
        if (!this.isClient) {
            return {
                token: null,
                refreshToken: null,
                expiresAt: null,
                isValid: false,
                isExpired: true
            };
        }
        try {
            const token = localStorage.getItem(TOKEN_KEY);
            const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);
            const expiryString = localStorage.getItem(TOKEN_EXPIRY_KEY);
            const expiresAt = expiryString ? new Date(expiryString) : null;
            const now = new Date();
            const isExpired = expiresAt ? expiresAt <= now : true;
            const isValid = !!(token && refreshToken && expiresAt && !isExpired);
            if (token && isExpired) {
                _loggerconfig.appLogger.debug('Token expired', {
                    expiresAt: expiresAt?.toISOString(),
                    now: now.toISOString()
                });
            }
            return {
                token,
                refreshToken,
                expiresAt,
                isValid,
                isExpired
            };
        } catch (error) {
            _loggerconfig.appLogger.error('Failed to retrieve tokens', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return {
                token: null,
                refreshToken: null,
                expiresAt: null,
                isValid: false,
                isExpired: true
            };
        }
    }
    /**
   * Get current valid access token
   */ getAccessToken() {
        const tokenInfo = this.getTokenInfo();
        return tokenInfo.isValid ? tokenInfo.token : null;
    }
    /**
   * Get refresh token for token renewal
   */ getRefreshToken() {
        const tokenInfo = this.getTokenInfo();
        return tokenInfo.refreshToken;
    }
    /**
   * Check if token needs refresh (expires in next 5 minutes)
   */ needsRefresh() {
        const tokenInfo = this.getTokenInfo();
        if (!tokenInfo.expiresAt || !tokenInfo.token) {
            return false;
        }
        const now = new Date();
        const fiveMinutesFromNow = new Date(now.getTime() + 5 * 60 * 1000);
        return tokenInfo.expiresAt <= fiveMinutesFromNow;
    }
    /**
   * Clear all stored tokens
   */ clearTokens() {
        if (!this.isClient) {
            return;
        }
        try {
            localStorage.removeItem(TOKEN_KEY);
            localStorage.removeItem(REFRESH_TOKEN_KEY);
            localStorage.removeItem(TOKEN_EXPIRY_KEY);
            _loggerconfig.appLogger.debug('Tokens cleared successfully');
        } catch (error) {
            _loggerconfig.appLogger.error('Failed to clear tokens', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    }
    /**
   * Update API client with current token
   */ updateApiClientToken() {
        const token = this.getAccessToken();
        if (token) {
            // Import dynamically to avoid circular dependency
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../api/client"))).then(({ apiClient })=>{
                apiClient.setAuthToken(token);
                _loggerconfig.appLogger.debug('API client token updated');
            }).catch((error)=>{
                _loggerconfig.appLogger.error('Failed to update API client token', {
                    error
                });
            });
        } else {
            // Clear token from API client
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../api/client"))).then(({ apiClient })=>{
                apiClient.clearAuthToken();
                _loggerconfig.appLogger.debug('API client token cleared');
            }).catch((error)=>{
                _loggerconfig.appLogger.error('Failed to clear API client token', {
                    error
                });
            });
        }
    }
    /**
   * Parse JWT token payload (without verification - for client-side info only)
   */ parseTokenPayload(token) {
        try {
            const base64Url = token.split('.')[1];
            if (!base64Url) return null;
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map((c)=>'%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
            return JSON.parse(jsonPayload);
        } catch (error) {
            _loggerconfig.appLogger.warn('Failed to parse token payload', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return null;
        }
    }
    /**
   * Get user info from current token
   */ getCurrentUserInfo() {
        const token = this.getAccessToken();
        if (!token) return null;
        const payload = this.parseTokenPayload(token);
        if (!payload) return null;
        return {
            userId: payload.sub,
            email: payload.email,
            role: payload.role
        };
    }
}
const tokenManager = new TokenManager();

//# sourceMappingURL=data:application/json;base64,