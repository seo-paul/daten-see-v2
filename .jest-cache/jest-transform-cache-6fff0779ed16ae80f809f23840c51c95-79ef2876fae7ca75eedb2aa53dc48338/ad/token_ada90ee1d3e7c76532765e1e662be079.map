{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/auth/token.ts"],"sourcesContent":["import { appLogger } from '@/lib/monitoring/logger.config';\n\n// Token storage keys\nconst TOKEN_KEY = 'auth_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n\n// Token interfaces\nexport interface TokenData {\n  token: string;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface StoredTokenInfo {\n  token: string | null;\n  refreshToken: string | null;\n  expiresAt: Date | null;\n  isValid: boolean;\n  isExpired: boolean;\n}\n\n/**\n * Secure Token Manager\n * Handles JWT token storage, validation, and expiration checks\n * Uses localStorage for client-side storage (will be enhanced with httpOnly cookies later)\n */\nclass TokenManager {\n  private isClient: boolean;\n\n  constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  /**\n   * Store authentication tokens securely\n   */\n  public setTokens(tokenData: TokenData): void {\n    if (!this.isClient) {\n      appLogger.warn('Token storage attempted on server side');\n      return;\n    }\n\n    try {\n      localStorage.setItem(TOKEN_KEY, tokenData.token);\n      localStorage.setItem(REFRESH_TOKEN_KEY, tokenData.refreshToken);\n      localStorage.setItem(TOKEN_EXPIRY_KEY, tokenData.expiresAt);\n\n      appLogger.debug('Tokens stored successfully', {\n        expiresAt: tokenData.expiresAt,\n        hasToken: !!tokenData.token,\n        hasRefreshToken: !!tokenData.refreshToken,\n      });\n    } catch (error) {\n      appLogger.error('Failed to store tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw new Error('Token storage failed');\n    }\n  }\n\n  /**\n   * Retrieve stored tokens with validation\n   */\n  public getTokenInfo(): StoredTokenInfo {\n    if (!this.isClient) {\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n\n    try {\n      const token = localStorage.getItem(TOKEN_KEY);\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\n      const expiryString = localStorage.getItem(TOKEN_EXPIRY_KEY);\n\n      const expiresAt = expiryString ? new Date(expiryString) : null;\n      const now = new Date();\n\n      const isExpired = expiresAt ? expiresAt <= now : true;\n      const isValid = !!(token && refreshToken && expiresAt && !isExpired);\n\n      if (token && isExpired) {\n        appLogger.debug('Token expired', {\n          expiresAt: expiresAt?.toISOString(),\n          now: now.toISOString(),\n        });\n      }\n\n      return {\n        token,\n        refreshToken,\n        expiresAt,\n        isValid,\n        isExpired,\n      };\n    } catch (error) {\n      appLogger.error('Failed to retrieve tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n  }\n\n  /**\n   * Get current valid access token\n   */\n  public getAccessToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.isValid ? tokenInfo.token : null;\n  }\n\n  /**\n   * Get refresh token for token renewal\n   */\n  public getRefreshToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.refreshToken;\n  }\n\n  /**\n   * Check if token needs refresh (expires in next 5 minutes)\n   */\n  public needsRefresh(): boolean {\n    const tokenInfo = this.getTokenInfo();\n    \n    if (!tokenInfo.expiresAt || !tokenInfo.token) {\n      return false;\n    }\n\n    const now = new Date();\n    const fiveMinutesFromNow = new Date(now.getTime() + 5 * 60 * 1000);\n    \n    return tokenInfo.expiresAt <= fiveMinutesFromNow;\n  }\n\n  /**\n   * Clear all stored tokens\n   */\n  public clearTokens(): void {\n    if (!this.isClient) {\n      return;\n    }\n\n    try {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(TOKEN_EXPIRY_KEY);\n\n      appLogger.debug('Tokens cleared successfully');\n    } catch (error) {\n      appLogger.error('Failed to clear tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n\n  /**\n   * Update API client with current token\n   */\n  public updateApiClientToken(): void {\n    const token = this.getAccessToken();\n    \n    if (token) {\n      // Import dynamically to avoid circular dependency\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.setAuthToken(token);\n        appLogger.debug('API client token updated');\n      }).catch((error) => {\n        appLogger.error('Failed to update API client token', { error });\n      });\n    } else {\n      // Clear token from API client\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.clearAuthToken();\n        appLogger.debug('API client token cleared');\n      }).catch((error) => {\n        appLogger.error('Failed to clear API client token', { error });\n      });\n    }\n  }\n\n  /**\n   * Parse JWT token payload (without verification - for client-side info only)\n   */\n  public parseTokenPayload(token: string): Record<string, unknown> | null {\n    try {\n      const base64Url = token.split('.')[1];\n      if (!base64Url) return null;\n\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      appLogger.warn('Failed to parse token payload', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get user info from current token\n   */\n  public getCurrentUserInfo(): { userId?: string; email?: string; role?: string } | null {\n    const token = this.getAccessToken();\n    if (!token) return null;\n\n    const payload = this.parseTokenPayload(token);\n    if (!payload) return null;\n\n    return {\n      userId: payload.sub as string,\n      email: payload.email as string,\n      role: payload.role as string,\n    };\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = new TokenManager();\n\n// Export types\nexport type { TokenManager };"],"names":["tokenManager","TOKEN_KEY","REFRESH_TOKEN_KEY","TOKEN_EXPIRY_KEY","TokenManager","isClient","window","setTokens","tokenData","appLogger","warn","localStorage","setItem","token","refreshToken","expiresAt","debug","hasToken","hasRefreshToken","error","Error","message","getTokenInfo","isValid","isExpired","getItem","expiryString","Date","now","toISOString","getAccessToken","tokenInfo","getRefreshToken","needsRefresh","fiveMinutesFromNow","getTime","clearTokens","removeItem","updateApiClientToken","then","apiClient","setAuthToken","catch","clearAuthToken","parseTokenPayload","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","getCurrentUserInfo","payload","userId","sub","email","role"],"mappings":"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"}