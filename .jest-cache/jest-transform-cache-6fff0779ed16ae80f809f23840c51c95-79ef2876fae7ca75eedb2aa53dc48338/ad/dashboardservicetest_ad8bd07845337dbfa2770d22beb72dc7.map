{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/dashboard.service.test.ts"],"sourcesContent":["import type { Dashboard, CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\nimport { DashboardService } from '../dashboard';\nimport { apiClient } from '../index';\n\n// Mock the API client\njest.mock('../index', () => ({\n  apiClient: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    getPaginated: jest.fn(),\n  },\n  createQueryFunction: (fn: Function) => async () => {\n    const response = await fn();\n    if (!response.success) {\n      throw new Error(response.message || 'API request failed');\n    }\n    return response.data;\n  },\n}));\n\nconst mockApiClient = apiClient as jest.Mocked<typeof apiClient>;\n\ndescribe('DashboardService', () => {\n  const mockDashboard: Dashboard = {\n    id: '1',\n    name: 'Test Dashboard',\n    description: 'Test description',\n    isPublic: false,\n    createdAt: new Date('2024-01-01T00:00:00Z'),\n    updatedAt: new Date('2024-01-01T00:00:00Z'),\n    widgets: [],\n    settings: {\n      backgroundColor: '#ffffff',\n      gridSize: 12,\n      autoRefresh: false,\n      refreshInterval: 300,\n    },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getDashboards', () => {\n    it('should return dashboards array', async () => {\n      const mockResponse = {\n        data: [mockDashboard],\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValue(mockResponse);\n\n      const result = await DashboardService.getDashboards();\n\n      expect(result).toEqual([mockDashboard]);\n      expect(mockApiClient.get).toHaveBeenCalledWith('/dashboards');\n    });\n  });\n\n  describe('createDashboard', () => {\n    it('should create dashboard successfully', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'New description',\n        isPublic: false,\n      };\n      const mockResponse = {\n        data: mockDashboard,\n        success: true,\n      };\n      mockApiClient.post.mockResolvedValue(mockResponse);\n\n      const result = await DashboardService.createDashboard(createRequest);\n\n      expect(result).toEqual(mockDashboard);\n      expect(mockApiClient.post).toHaveBeenCalledWith('/dashboards', createRequest);\n    });\n  });\n\n  describe('updateDashboard', () => {\n    it('should update dashboard successfully', async () => {\n      const updateRequest: UpdateDashboardRequest = {\n        id: '1',\n        name: 'Updated Dashboard',\n        description: 'Updated description',\n        isPublic: true,\n      };\n      const updatedDashboard = { ...mockDashboard, ...updateRequest };\n      const mockResponse = {\n        data: updatedDashboard,\n        success: true,\n      };\n      mockApiClient.put.mockResolvedValue(mockResponse);\n\n      const result = await DashboardService.updateDashboard('1', updateRequest);\n\n      expect(result).toEqual(updatedDashboard);\n      expect(mockApiClient.put).toHaveBeenCalledWith('/dashboards/1', updateRequest);\n    });\n  });\n\n  describe('deleteDashboard', () => {\n    it('should delete dashboard successfully', async () => {\n      const mockResponse = {\n        data: undefined,\n        success: true,\n      };\n      mockApiClient.delete.mockResolvedValue(mockResponse);\n\n      await DashboardService.deleteDashboard('1');\n\n      expect(mockApiClient.delete).toHaveBeenCalledWith('/dashboards/1');\n    });\n  });\n\n  describe('getDashboard', () => {\n    it('should return single dashboard', async () => {\n      const mockResponse = {\n        data: mockDashboard,\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValue(mockResponse);\n\n      const result = await DashboardService.getDashboard('1');\n\n      expect(result).toEqual(mockDashboard);\n      expect(mockApiClient.get).toHaveBeenCalledWith('/dashboards/1');\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle network errors', async () => {\n      mockApiClient.get.mockRejectedValue(new Error('Network error'));\n\n      await expect(DashboardService.getDashboard('1')).rejects.toThrow('Network error');\n    });\n  });\n});"],"names":["jest","mock","apiClient","get","fn","post","put","delete","getPaginated","createQueryFunction","response","success","Error","message","data","mockApiClient","describe","mockDashboard","id","name","description","isPublic","createdAt","Date","updatedAt","widgets","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","beforeEach","clearAllMocks","it","mockResponse","mockResolvedValue","result","DashboardService","getDashboards","expect","toEqual","toHaveBeenCalledWith","createRequest","createDashboard","updateRequest","updatedDashboard","updateDashboard","undefined","deleteDashboard","getDashboard","mockRejectedValue","rejects","toThrow"],"mappings":"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"}