{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/scripts/__tests__/coverage-gates.test.js"],"sourcesContent":["/**\n * Coverage Gates Tests\n * Tests the coverage gates implementation for AI Safety\n */\n\nconst { \n  checkFileCoverage, \n  getThresholdForFile, \n  COVERAGE_THRESHOLDS, \n  GLOBAL_MINIMUMS \n} = require('../../../scripts/coverage-gates');\n\ndescribe('Coverage Gates Implementation', () => {\n  describe('Threshold Detection', () => {\n    it('should identify critical files correctly', () => {\n      const criticalFiles = [\n        'src/lib/auth/token.ts',\n        'src/contexts/AuthContext.tsx',\n        'src/lib/api/client.ts',\n        'src/hooks/useDashboards.ts'\n      ];\n\n      criticalFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold.category).toBe('critical');\n        expect(threshold.statements).toBe(90);\n        expect(threshold.branches).toBe(85);\n      });\n    });\n\n    it('should identify core files correctly', () => {\n      const coreFiles = [\n        'src/components/auth/LoginForm.tsx',\n        'src/components/dashboard/DashboardCard.tsx',\n        'src/lib/tanstack-query/config.ts',\n        'src/lib/monitoring/logger.config.ts'\n      ];\n\n      coreFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold.category).toBe('core');\n        expect(threshold.statements).toBe(80);\n        expect(threshold.branches).toBe(75);\n      });\n    });\n\n    it('should identify UI files correctly', () => {\n      const uiFiles = [\n        'src/components/ui/Button.tsx',\n        'src/components/brand/Logo.tsx',\n        'src/components/layout/MainLayout.tsx'\n      ];\n\n      uiFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold.category).toBe('ui');\n        expect(threshold.statements).toBe(60);\n        expect(threshold.branches).toBe(50);\n      });\n    });\n\n    it('should exclude test files and stories', () => {\n      const excludedFiles = [\n        'src/components/__tests__/Button.test.tsx',\n        'src/components/Button.stories.tsx',\n        'src/types/api.d.ts',\n        'src/app/dashboard/page.tsx',\n        'src/app/layout.tsx'\n      ];\n\n      excludedFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold).toBeNull();\n      });\n    });\n\n    it('should fall back to global minimums for unmatched files', () => {\n      const unmatchedFiles = [\n        'src/some/random/file.ts',\n        'src/new/feature/component.tsx'\n      ];\n\n      unmatchedFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold.category).toBe('global');\n        expect(threshold.statements).toBe(GLOBAL_MINIMUMS.statements);\n      });\n    });\n  });\n\n  describe('Coverage Validation', () => {\n    it('should pass files with adequate coverage', () => {\n      const mockFileCoverage = {\n        statements: { pct: 95 },\n        branches: { pct: 90 },\n        functions: { pct: 95 },\n        lines: { pct: 95 }\n      };\n\n      const result = checkFileCoverage('src/lib/auth/token.ts', mockFileCoverage);\n      \n      expect(result.passed).toBe(true);\n      expect(result.category).toBe('critical');\n      expect(result.failures).toEqual([]);\n      expect(result.excluded).toBe(false);\n    });\n\n    it('should fail files with inadequate coverage', () => {\n      const mockFileCoverage = {\n        statements: { pct: 70 }, // Below 90% critical threshold\n        branches: { pct: 60 },   // Below 85% critical threshold\n        functions: { pct: 95 },  // Above threshold\n        lines: { pct: 85 }       // Below 90% critical threshold\n      };\n\n      const result = checkFileCoverage('src/lib/auth/token.ts', mockFileCoverage);\n      \n      expect(result.passed).toBe(false);\n      expect(result.category).toBe('critical');\n      expect(result.failures).toHaveLength(3);\n      expect(result.excluded).toBe(false);\n\n      // Check specific failures\n      const failureMetrics = result.failures.map(f => f.metric);\n      expect(failureMetrics).toContain('statements');\n      expect(failureMetrics).toContain('branches');\n      expect(failureMetrics).toContain('lines');\n      expect(failureMetrics).not.toContain('functions');\n    });\n\n    it('should calculate coverage gaps correctly', () => {\n      const mockFileCoverage = {\n        statements: { pct: 75 }, // 15% gap from 90%\n        branches: { pct: 70 },   // 15% gap from 85%\n        functions: { pct: 85 },  // 5% gap from 90%\n        lines: { pct: 80 }       // 10% gap from 90%\n      };\n\n      const result = checkFileCoverage('src/lib/auth/token.ts', mockFileCoverage);\n      \n      expect(result.passed).toBe(false);\n      expect(result.failures).toHaveLength(4);\n\n      // Check gap calculations\n      const statementsFailure = result.failures.find(f => f.metric === 'statements');\n      expect(statementsFailure.gap).toBe(15);\n\n      const branchesFailure = result.failures.find(f => f.metric === 'branches');\n      expect(branchesFailure.gap).toBe(15);\n\n      const functionsFailure = result.failures.find(f => f.metric === 'functions');\n      expect(functionsFailure.gap).toBe(5);\n\n      const linesFailure = result.failures.find(f => f.metric === 'lines');\n      expect(linesFailure.gap).toBe(10);\n    });\n\n    it('should handle UI files with lower thresholds', () => {\n      const mockFileCoverage = {\n        statements: { pct: 65 }, // Above 60% UI threshold\n        branches: { pct: 55 },   // Above 50% UI threshold\n        functions: { pct: 65 },  // Above 60% UI threshold\n        lines: { pct: 65 }       // Above 60% UI threshold\n      };\n\n      const result = checkFileCoverage('src/components/ui/Button.tsx', mockFileCoverage);\n      \n      expect(result.passed).toBe(true);\n      expect(result.category).toBe('ui');\n      expect(result.failures).toEqual([]);\n    });\n\n    it('should exclude specified files from coverage requirements', () => {\n      const mockFileCoverage = {\n        statements: { pct: 0 },\n        branches: { pct: 0 },\n        functions: { pct: 0 },\n        lines: { pct: 0 }\n      };\n\n      const result = checkFileCoverage('src/components/__tests__/Button.test.tsx', mockFileCoverage);\n      \n      expect(result.passed).toBe(true);\n      expect(result.excluded).toBe(true);\n    });\n  });\n\n  describe('Configuration Validation', () => {\n    it('should have valid coverage thresholds', () => {\n      // Check that all threshold categories have required metrics\n      const requiredMetrics = ['statements', 'branches', 'functions', 'lines'];\n      \n      Object.entries(COVERAGE_THRESHOLDS).forEach(([category, config]) => {\n        requiredMetrics.forEach(metric => {\n          expect(config[metric]).toBeDefined();\n          expect(typeof config[metric]).toBe('number');\n          expect(config[metric]).toBeGreaterThan(0);\n          expect(config[metric]).toBeLessThanOrEqual(100);\n        });\n\n        // Check files array exists\n        expect(Array.isArray(config.files)).toBe(true);\n        expect(config.files.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should have reasonable threshold ordering', () => {\n      // Critical should have highest thresholds\n      expect(COVERAGE_THRESHOLDS.critical.statements).toBeGreaterThan(COVERAGE_THRESHOLDS.core.statements);\n      expect(COVERAGE_THRESHOLDS.critical.statements).toBeGreaterThan(COVERAGE_THRESHOLDS.ui.statements);\n      \n      // Core should be higher than UI\n      expect(COVERAGE_THRESHOLDS.core.statements).toBeGreaterThan(COVERAGE_THRESHOLDS.ui.statements);\n      \n      // UI should be higher than utils\n      expect(COVERAGE_THRESHOLDS.ui.statements).toBeGreaterThan(COVERAGE_THRESHOLDS.utils.statements);\n    });\n\n    it('should have global minimums below category thresholds', () => {\n      // Global minimums should be achievable fallbacks\n      expect(GLOBAL_MINIMUMS.statements).toBeLessThan(COVERAGE_THRESHOLDS.utils.statements);\n      expect(GLOBAL_MINIMUMS.branches).toBeLessThan(COVERAGE_THRESHOLDS.utils.branches);\n      expect(GLOBAL_MINIMUMS.functions).toBeLessThan(COVERAGE_THRESHOLDS.utils.functions);\n      expect(GLOBAL_MINIMUMS.lines).toBeLessThan(COVERAGE_THRESHOLDS.utils.lines);\n    });\n  });\n\n  describe('AI Safety Requirements', () => {\n    it('should enforce high coverage for authentication code', () => {\n      const authFiles = [\n        'src/lib/auth/token.ts',\n        'src/contexts/AuthContext.tsx'\n      ];\n\n      authFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        \n        // Auth code should require very high coverage for security\n        expect(threshold.statements).toBeGreaterThanOrEqual(90);\n        expect(threshold.branches).toBeGreaterThanOrEqual(85);\n        expect(threshold.functions).toBeGreaterThanOrEqual(90);\n        expect(threshold.lines).toBeGreaterThanOrEqual(90);\n      });\n    });\n\n    it('should enforce high coverage for API integration code', () => {\n      const apiFiles = [\n        'src/lib/api/client.ts',\n        'src/lib/api/dashboard.ts'\n      ];\n\n      apiFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        \n        // API code should require high coverage to prevent data corruption\n        expect(threshold.statements).toBeGreaterThanOrEqual(90);\n        expect(threshold.branches).toBeGreaterThanOrEqual(85);\n      });\n    });\n\n    it('should allow reasonable coverage for UI components', () => {\n      const uiFiles = [\n        'src/components/ui/Button.tsx',\n        'src/components/brand/Logo.tsx'\n      ];\n\n      uiFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        \n        // UI components can have lower coverage as they're less critical\n        expect(threshold.statements).toBeLessThanOrEqual(60);\n        expect(threshold.branches).toBeLessThanOrEqual(50);\n      });\n    });\n\n    it('should completely exclude non-testable files', () => {\n      const nonTestableFiles = [\n        'src/app/page.tsx',                    // Next.js pages\n        'src/app/layout.tsx',                  // Next.js layouts\n        'src/components/Button.stories.tsx',  // Storybook stories\n        'src/types/global.d.ts',              // TypeScript definitions\n        'src/__tests__/setup.ts'              // Test setup files\n      ];\n\n      nonTestableFiles.forEach(filePath => {\n        const threshold = getThresholdForFile(filePath);\n        expect(threshold).toBeNull();\n      });\n    })\n  });\n});"],"names":["checkFileCoverage","getThresholdForFile","COVERAGE_THRESHOLDS","GLOBAL_MINIMUMS","require","describe","it","criticalFiles","forEach","filePath","threshold","expect","category","toBe","statements","branches","coreFiles","uiFiles","excludedFiles","toBeNull","unmatchedFiles","mockFileCoverage","pct","functions","lines","result","passed","failures","toEqual","excluded","toHaveLength","failureMetrics","map","f","metric","toContain","not","statementsFailure","find","gap","branchesFailure","functionsFailure","linesFailure","requiredMetrics","Object","entries","config","toBeDefined","toBeGreaterThan","toBeLessThanOrEqual","Array","isArray","files","length","critical","core","ui","utils","toBeLessThan","authFiles","toBeGreaterThanOrEqual","apiFiles","nonTestableFiles"],"mappings":"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"}