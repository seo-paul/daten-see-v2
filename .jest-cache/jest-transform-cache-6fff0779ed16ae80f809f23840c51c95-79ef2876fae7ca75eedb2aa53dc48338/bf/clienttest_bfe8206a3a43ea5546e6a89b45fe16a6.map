{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/client.test.ts"],"sourcesContent":["/**\n * API Client Unit Tests - Streamlined\n * Testing core API client functionality only (Reduced from 97 â†’ 20 tests)\n */\n\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\nimport { apiClient, ApiClient, ApiClientError, NetworkError, TimeoutError } from '../client';\n\n// Mock logger\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe('ApiClient', () => {\n  let client: ApiClient;\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    client = new ApiClient('http://localhost:3001/api');\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  // Constructor test\n  it('should initialize with correct defaults', () => {\n    expect(client).toBeDefined();\n    expect(client).toBeInstanceOf(ApiClient);\n  });\n\n  // GET request test\n  it('should make successful GET request', async () => {\n    const mockData = { id: 1, name: 'Test' };\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => mockData,\n    } as Response);\n\n    const result = await client.get('/test');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      expect.objectContaining({ method: 'GET' })\n    );\n    expect(result).toEqual(mockData);\n  });\n\n  // POST request test\n  it('should make successful POST request with data', async () => {\n    const postData = { name: 'Test Item' };\n    const responseData = { id: 1, ...postData };\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 201,\n      json: async () => responseData,\n    } as Response);\n\n    const result = await client.post('/test', postData);\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      expect.objectContaining({\n        method: 'POST',\n        body: JSON.stringify(postData),\n      })\n    );\n    expect(result).toEqual(responseData);\n  });\n\n  // PUT request test\n  it('should make successful PUT request', async () => {\n    const putData = { id: 1, name: 'Updated' };\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => putData,\n    } as Response);\n\n    const result = await client.put('/test/1', putData);\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test/1',\n      expect.objectContaining({ method: 'PUT' })\n    );\n    expect(result).toEqual(putData);\n  });\n\n  // DELETE request test\n  it('should make successful DELETE request', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 204,\n      json: async () => ({}),\n    } as Response);\n\n    await client.delete('/test/1');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test/1',\n      expect.objectContaining({ method: 'DELETE' })\n    );\n  });\n\n  // Authentication token test\n  it('should include auth token in requests', async () => {\n    client.setAuthToken('test-token');\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.get('/protected');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/protected',\n      expect.objectContaining({\n        headers: expect.objectContaining({\n          'Authorization': 'Bearer test-token',\n        }),\n      })\n    );\n  });\n\n  // Clear auth token test\n  it('should clear auth token from requests', async () => {\n    client.setAuthToken('test-token');\n    client.clearAuthToken();\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.get('/test');\n    \n    const callArgs = mockFetch.mock.calls[0]?.[1];\n    expect(callArgs?.headers).not.toHaveProperty('Authorization');\n  });\n\n  // 404 error handling test\n  it('should handle 404 errors correctly', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 404,\n      statusText: 'Not Found',\n      json: async () => ({ message: 'Resource not found' }),\n    } as Response);\n\n    await expect(client.get('/nonexistent')).rejects.toThrow(ApiClientError);\n  });\n\n  // Network error test\n  it('should handle network errors', async () => {\n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n    await expect(client.get('/test')).rejects.toThrow(NetworkError);\n  });\n\n  // Timeout error test\n  it('should handle timeout errors', async () => {\n    mockFetch.mockImplementationOnce(() => \n      new Promise((resolve) => setTimeout(resolve, 10000))\n    );\n\n    const shortTimeoutClient = new ApiClient('http://localhost:3001/api', 100);\n    \n    await expect(shortTimeoutClient.get('/test')).rejects.toThrow(TimeoutError);\n  });\n\n  // Custom headers test\n  it('should accept custom headers', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.get('/test', { 'X-Custom-Header': 'custom-value' });\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      expect.objectContaining({\n        headers: expect.objectContaining({\n          'X-Custom-Header': 'custom-value',\n        }),\n      })\n    );\n  });\n\n  // JSON response parsing test\n  it('should parse JSON responses correctly', async () => {\n    const responseData = { message: 'success', data: [1, 2, 3] };\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => responseData,\n    } as Response);\n\n    const result = await client.get('/test');\n    expect(result).toEqual(responseData);\n  });\n\n  // Error response parsing test\n  it('should parse error responses with details', async () => {\n    const errorResponse = { \n      message: 'Validation failed', \n      errors: { name: 'Required field' } \n    };\n    \n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 400,\n      statusText: 'Bad Request',\n      json: async () => errorResponse,\n    } as Response);\n\n    try {\n      await client.post('/test', {});\n    } catch (error) {\n      expect(error).toBeInstanceOf(ApiClientError);\n      expect((error as ApiClientError).message).toBe('Validation failed');\n      expect((error as ApiClientError).details).toEqual(errorResponse.errors);\n    }\n  });\n\n  // Content-Type header test\n  it('should set correct Content-Type for JSON requests', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.post('/test', { data: 'test' });\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      expect.objectContaining({\n        headers: expect.objectContaining({\n          'Content-Type': 'application/json',\n        }),\n      })\n    );\n  });\n\n  // Empty response handling test\n  it('should handle empty responses correctly', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 204,\n      json: async () => null,\n    } as Response);\n\n    const result = await client.delete('/test/1');\n    expect(result).toBeNull();\n  });\n\n  // Base URL handling test\n  it('should construct URLs correctly with base URL', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.get('/endpoint');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/endpoint',\n      expect.any(Object)\n    );\n  });\n\n  // Query parameters test\n  it('should handle query parameters in URLs', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({}),\n    } as Response);\n\n    await client.get('/test?param1=value1&param2=value2');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test?param1=value1&param2=value2',\n      expect.any(Object)\n    );\n  });\n\n  // Logging test\n  it('should log requests and responses', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      status: 200,\n      json: async () => ({ data: 'test' }),\n    } as Response);\n\n    await client.get('/test');\n    \n    expect(appLogger.debug).toHaveBeenCalled();\n  });\n\n  // Singleton instance test\n  it('should provide singleton instance', () => {\n    expect(apiClient).toBeInstanceOf(ApiClient);\n  });\n\n  // Error code mapping test\n  it('should map HTTP status codes to appropriate errors', async () => {\n    const testCases = [\n      { status: 401, errorType: ApiClientError },\n      { status: 403, errorType: ApiClientError },\n      { status: 500, errorType: ApiClientError },\n    ];\n\n    for (const testCase of testCases) {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: testCase.status,\n        statusText: 'Error',\n        json: async () => ({ message: 'Error' }),\n      } as Response);\n\n      await expect(client.get('/test')).rejects.toThrow(testCase.errorType);\n    }\n  });\n});"],"names":["jest","mock","appLogger","debug","fn","info","warn","error","global","fetch","describe","client","mockFetch","beforeEach","clearAllMocks","ApiClient","afterEach","resetAllMocks","it","expect","toBeDefined","toBeInstanceOf","mockData","id","name","mockResolvedValueOnce","ok","status","json","result","get","toHaveBeenCalledWith","objectContaining","method","toEqual","postData","responseData","post","body","JSON","stringify","putData","put","delete","setAuthToken","headers","clearAuthToken","callArgs","calls","not","toHaveProperty","statusText","message","rejects","toThrow","ApiClientError","mockRejectedValueOnce","Error","NetworkError","mockImplementationOnce","Promise","resolve","setTimeout","shortTimeoutClient","TimeoutError","data","errorResponse","errors","toBe","details","toBeNull","any","Object","toHaveBeenCalled","apiClient","testCases","errorType","testCase"],"mappings":"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"}