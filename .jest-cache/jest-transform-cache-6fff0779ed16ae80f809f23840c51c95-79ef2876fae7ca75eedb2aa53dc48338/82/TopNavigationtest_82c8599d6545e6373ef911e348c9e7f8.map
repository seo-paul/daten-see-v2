{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/layout/__tests__/TopNavigation.test.tsx"],"sourcesContent":["/**\n * TopNavigation Component Tests - Streamlined\n * Testing core navigation functionality only (Reduced from 109 → 10 tests)\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport { TopNavigation } from '../TopNavigation';\n\n// Mock next/navigation\nconst mockPush = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\ndescribe('TopNavigation Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Core rendering test\n  it('should render navigation with essential elements', () => {\n    render(<TopNavigation />);\n    \n    expect(screen.getByText('DATEN-SEE')).toBeInTheDocument();\n    expect(screen.getByText('Zur Dashboard-Übersicht')).toBeInTheDocument();\n    expect(screen.getByText('🐛 Debug Dashboard')).toBeInTheDocument();\n    expect(screen.getByLabelText('Menü öffnen')).toBeInTheDocument();\n  });\n\n  // Navigation functionality test\n  it('should handle navigation clicks', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const dashboardLink = screen.getByText('Zur Dashboard-Übersicht');\n    await user.click(dashboardLink);\n    \n    expect(mockPush).toHaveBeenCalledWith('/dashboard');\n  });\n\n  // Mobile menu toggle test\n  it('should toggle mobile menu', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const menuButton = screen.getByLabelText('Menü öffnen');\n    await user.click(menuButton);\n    \n    // Mobile menu should be visible\n    expect(screen.getByRole('navigation')).toBeInTheDocument();\n  });\n\n  // Settings menu test\n  it('should open settings menu', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const settingsButton = screen.getByLabelText('Einstellungen');\n    await user.click(settingsButton);\n    \n    // Settings dropdown should appear\n    await waitFor(() => {\n      expect(screen.getByText('Profil')).toBeInTheDocument();\n    });\n  });\n\n  // Logo click navigation test\n  it('should navigate to home on logo click', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const logo = screen.getByText('DATEN-SEE');\n    await user.click(logo);\n    \n    expect(mockPush).toHaveBeenCalledWith('/');\n  });\n\n  // Keyboard navigation test\n  it('should handle keyboard navigation', async () => {\n    render(<TopNavigation />);\n\n    const dashboardLink = screen.getByText('Zur Dashboard-Übersicht');\n    \n    fireEvent.keyDown(dashboardLink, { key: 'Enter' });\n    expect(mockPush).toHaveBeenCalledWith('/dashboard');\n  });\n\n  // External link test\n  it('should handle external links correctly', () => {\n    render(<TopNavigation />);\n\n    const communityLink = screen.getByText('Community');\n    expect(communityLink.closest('a')).toHaveAttribute('target', '_blank');\n    expect(communityLink.closest('a')).toHaveAttribute('rel', 'noopener noreferrer');\n  });\n\n  // Responsive behavior test\n  it('should hide desktop menu on small screens', () => {\n    // Mock window size\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 640, // Small screen\n    });\n\n    render(<TopNavigation />);\n    \n    const desktopNav = screen.getByRole('navigation');\n    expect(desktopNav).toHaveClass('hidden', 'md:flex');\n  });\n\n  // Search functionality test\n  it('should handle search input', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const searchInput = screen.getByPlaceholderText('Dashboards durchsuchen...');\n    await user.type(searchInput, 'test search');\n    \n    expect(searchInput).toHaveValue('test search');\n  });\n\n  // User menu test\n  it('should display user information in menu', async () => {\n    const user = userEvent.setup();\n    render(<TopNavigation />);\n\n    const userButton = screen.getByLabelText('Benutzerkonto');\n    await user.click(userButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Abmelden')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","mockPush","replace","fn","back","forward","refresh","prefetch","describe","beforeEach","clearAllMocks","it","render","TopNavigation","expect","screen","getByText","toBeInTheDocument","getByLabelText","user","userEvent","setup","dashboardLink","click","toHaveBeenCalledWith","menuButton","getByRole","settingsButton","waitFor","logo","fireEvent","keyDown","key","communityLink","closest","toHaveAttribute","Object","defineProperty","window","writable","configurable","value","desktopNav","toHaveClass","searchInput","getByPlaceholderText","type","toHaveValue","userButton"],"mappings":"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"}