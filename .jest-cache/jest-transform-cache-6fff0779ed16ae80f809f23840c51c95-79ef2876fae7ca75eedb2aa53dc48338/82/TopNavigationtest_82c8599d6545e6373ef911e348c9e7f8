7c039342feb6b045aec308bcaa8c4987
/**
 * TopNavigation Component Tests - Streamlined
 * Testing core navigation functionality only (Reduced from 109 → 10 tests)
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _TopNavigation = require("../TopNavigation");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock next/navigation
const mockPush = jest.fn();
describe('TopNavigation Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // Core rendering test
    it('should render navigation with essential elements', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        expect(_react.screen.getByText('DATEN-SEE')).toBeInTheDocument();
        expect(_react.screen.getByText('Zur Dashboard-Übersicht')).toBeInTheDocument();
        expect(_react.screen.getByText('🐛 Debug Dashboard')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Menü öffnen')).toBeInTheDocument();
    });
    // Navigation functionality test
    it('should handle navigation clicks', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const dashboardLink = _react.screen.getByText('Zur Dashboard-Übersicht');
        await user.click(dashboardLink);
        expect(mockPush).toHaveBeenCalledWith('/dashboard');
    });
    // Mobile menu toggle test
    it('should toggle mobile menu', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const menuButton = _react.screen.getByLabelText('Menü öffnen');
        await user.click(menuButton);
        // Mobile menu should be visible
        expect(_react.screen.getByRole('navigation')).toBeInTheDocument();
    });
    // Settings menu test
    it('should open settings menu', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const settingsButton = _react.screen.getByLabelText('Einstellungen');
        await user.click(settingsButton);
        // Settings dropdown should appear
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Profil')).toBeInTheDocument();
        });
    });
    // Logo click navigation test
    it('should navigate to home on logo click', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const logo = _react.screen.getByText('DATEN-SEE');
        await user.click(logo);
        expect(mockPush).toHaveBeenCalledWith('/');
    });
    // Keyboard navigation test
    it('should handle keyboard navigation', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const dashboardLink = _react.screen.getByText('Zur Dashboard-Übersicht');
        _react.fireEvent.keyDown(dashboardLink, {
            key: 'Enter'
        });
        expect(mockPush).toHaveBeenCalledWith('/dashboard');
    });
    // External link test
    it('should handle external links correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const communityLink = _react.screen.getByText('Community');
        expect(communityLink.closest('a')).toHaveAttribute('target', '_blank');
        expect(communityLink.closest('a')).toHaveAttribute('rel', 'noopener noreferrer');
    });
    // Responsive behavior test
    it('should hide desktop menu on small screens', ()=>{
        // Mock window size
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 640
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const desktopNav = _react.screen.getByRole('navigation');
        expect(desktopNav).toHaveClass('hidden', 'md:flex');
    });
    // Search functionality test
    it('should handle search input', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const searchInput = _react.screen.getByPlaceholderText('Dashboards durchsuchen...');
        await user.type(searchInput, 'test search');
        expect(searchInput).toHaveValue('test search');
    });
    // User menu test
    it('should display user information in menu', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TopNavigation.TopNavigation, {}));
        const userButton = _react.screen.getByLabelText('Benutzerkonto');
        await user.click(userButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Abmelden')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,