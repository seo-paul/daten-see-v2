{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/store/dashboard.store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\n\nimport { appLogger as logger } from '@/lib/monitoring/logger.config';\nimport type { \n  Dashboard, \n  DashboardListItem, \n  CreateDashboardRequest, \n  UpdateDashboardRequest \n} from '@/types/dashboard.types';\n\ninterface DashboardStore {\n  // State\n  dashboards: DashboardListItem[];\n  currentDashboard: Dashboard | null;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  fetchDashboards: () => Promise<void>;\n  fetchDashboard: (id: string) => Promise<Dashboard | null>;\n  createDashboard: (data: CreateDashboardRequest) => Promise<string>;\n  updateDashboard: (data: UpdateDashboardRequest) => Promise<void>;\n  deleteDashboard: (id: string) => Promise<void>;\n  setCurrentDashboard: (dashboard: Dashboard | null) => void;\n  clearError: () => void;\n}\n\n// Mock data for development\nconst mockDashboards: DashboardListItem[] = [\n  {\n    id: 'dash-1',\n    name: 'Sales Analytics',\n    description: 'Übersicht über Verkaufsdaten und KPIs',\n    isPublic: false,\n    updatedAt: new Date('2024-01-15T10:30:00Z'),\n    widgetCount: 6\n  },\n  {\n    id: 'dash-2', \n    name: 'Marketing Dashboard',\n    description: 'Social Media und Kampagnen Performance',\n    isPublic: true,\n    updatedAt: new Date('2024-01-14T16:45:00Z'),\n    widgetCount: 4\n  },\n  {\n    id: 'dash-3',\n    name: 'Operations Monitor',\n    description: 'System Health und Performance Metriken',\n    isPublic: false,\n    updatedAt: new Date('2024-01-13T09:15:00Z'),\n    widgetCount: 8\n  }\n];\n\nconst mockFullDashboard: Dashboard = {\n  id: 'dash-1',\n  name: 'Sales Analytics',\n  description: 'Übersicht über Verkaufsdaten und KPIs',\n  isPublic: false,\n  createdAt: new Date('2024-01-01T10:00:00Z'),\n  updatedAt: new Date('2024-01-15T10:30:00Z'),\n  widgets: [],\n  settings: {\n    backgroundColor: '#f8fafc',\n    gridSize: 24,\n    autoRefresh: true,\n    refreshInterval: 300\n  }\n};\n\nexport const useDashboardStore = create<DashboardStore>()(\n  subscribeWithSelector((set) => ({\n    // Initial state\n    dashboards: [],\n    currentDashboard: null,\n    isLoading: false,\n    error: null,\n\n    // Actions\n    fetchDashboards: async (): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Fetching dashboards list');\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        set({ \n          dashboards: mockDashboards,\n          isLoading: false \n        });\n        \n        logger.info('Dashboards loaded successfully', { \n          count: mockDashboards.length \n        });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboards';\n        logger.error('Failed to fetch dashboards', { error });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    fetchDashboard: async (id: string): Promise<Dashboard | null> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Fetching dashboard details', { dashboardId: id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Mock: return the full dashboard with given ID\n        const dashboard: Dashboard = {\n          ...mockFullDashboard,\n          id,\n          name: mockDashboards.find(d => d.id === id)?.name || 'Unknown Dashboard'\n        };\n        \n        set({ \n          currentDashboard: dashboard,\n          isLoading: false \n        });\n        \n        logger.info('Dashboard loaded successfully', { dashboardId: id });\n        return dashboard;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard';\n        logger.error('Failed to fetch dashboard', { error, dashboardId: id });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n        return null;\n      }\n    },\n\n    createDashboard: async (data: CreateDashboardRequest): Promise<string> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Creating new dashboard', { name: data.name });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        const newDashboard: DashboardListItem = {\n          id: `dash-${Date.now()}`,\n          name: data.name,\n          description: data.description,\n          isPublic: data.isPublic,\n          updatedAt: new Date(),\n          widgetCount: 0\n        };\n        \n        set(state => ({\n          dashboards: [newDashboard, ...state.dashboards],\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard created successfully', { \n          dashboardId: newDashboard.id,\n          name: data.name\n        });\n        \n        return newDashboard.id;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create dashboard';\n        logger.error('Failed to create dashboard', { error, data });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n        throw new Error(errorMessage);\n      }\n    },\n\n    updateDashboard: async (data: UpdateDashboardRequest): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Updating dashboard', { dashboardId: data.id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 600));\n        \n        set(state => ({\n          dashboards: state.dashboards.map(dashboard => \n            dashboard.id === data.id\n              ? {\n                  ...dashboard,\n                  ...(data.name && { name: data.name }),\n                  ...(data.description && { description: data.description }),\n                  ...(data.isPublic !== undefined && { isPublic: data.isPublic }),\n                  updatedAt: new Date()\n                }\n              : dashboard\n          ),\n          currentDashboard: state.currentDashboard?.id === data.id\n            ? {\n                ...state.currentDashboard,\n                ...(data.name && { name: data.name }),\n                ...(data.description && { description: data.description }),\n                ...(data.isPublic !== undefined && { isPublic: data.isPublic }),\n                ...(data.settings && { settings: { ...state.currentDashboard.settings, ...data.settings } }),\n                updatedAt: new Date()\n              }\n            : state.currentDashboard,\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard updated successfully', { dashboardId: data.id });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update dashboard';\n        logger.error('Failed to update dashboard', { error, data });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    deleteDashboard: async (id: string): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Deleting dashboard', { dashboardId: id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 400));\n        \n        set(state => ({\n          dashboards: state.dashboards.filter(dashboard => dashboard.id !== id),\n          currentDashboard: state.currentDashboard?.id === id ? null : state.currentDashboard,\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard deleted successfully', { dashboardId: id });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete dashboard';\n        logger.error('Failed to delete dashboard', { error, dashboardId: id });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    setCurrentDashboard: (dashboard: Dashboard | null): void => {\n      set({ currentDashboard: dashboard });\n    },\n\n    clearError: (): void => {\n      set({ error: null });\n    }\n  }))\n);"],"names":["useDashboardStore","mockDashboards","id","name","description","isPublic","updatedAt","Date","widgetCount","mockFullDashboard","createdAt","widgets","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","create","subscribeWithSelector","set","dashboards","currentDashboard","isLoading","error","fetchDashboards","logger","info","Promise","resolve","setTimeout","count","length","errorMessage","Error","message","fetchDashboard","dashboardId","dashboard","find","d","createDashboard","data","newDashboard","now","state","updateDashboard","map","undefined","deleteDashboard","filter","setCurrentDashboard","clearError"],"mappings":"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"}