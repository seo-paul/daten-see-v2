383d9b00d2499707542ee42a14a53be0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDashboardStore", {
    enumerable: true,
    get: function() {
        return useDashboardStore;
    }
});
const _zustand = require("zustand");
const _middleware = require("zustand/middleware");
const _loggerconfig = require("../lib/monitoring/logger.config");
// Mock data for development
const mockDashboards = [
    {
        id: 'dash-1',
        name: 'Sales Analytics',
        description: 'Ãœbersicht Ã¼ber Verkaufsdaten und KPIs',
        isPublic: false,
        updatedAt: new Date('2024-01-15T10:30:00Z'),
        widgetCount: 6
    },
    {
        id: 'dash-2',
        name: 'Marketing Dashboard',
        description: 'Social Media und Kampagnen Performance',
        isPublic: true,
        updatedAt: new Date('2024-01-14T16:45:00Z'),
        widgetCount: 4
    },
    {
        id: 'dash-3',
        name: 'Operations Monitor',
        description: 'System Health und Performance Metriken',
        isPublic: false,
        updatedAt: new Date('2024-01-13T09:15:00Z'),
        widgetCount: 8
    }
];
const mockFullDashboard = {
    id: 'dash-1',
    name: 'Sales Analytics',
    description: 'Ãœbersicht Ã¼ber Verkaufsdaten und KPIs',
    isPublic: false,
    createdAt: new Date('2024-01-01T10:00:00Z'),
    updatedAt: new Date('2024-01-15T10:30:00Z'),
    widgets: [],
    settings: {
        backgroundColor: '#f8fafc',
        gridSize: 24,
        autoRefresh: true,
        refreshInterval: 300
    }
};
const useDashboardStore = (0, _zustand.create)()((0, _middleware.subscribeWithSelector)((set)=>({
        // Initial state
        dashboards: [],
        currentDashboard: null,
        isLoading: false,
        error: null,
        // Actions
        fetchDashboards: async ()=>{
            set({
                isLoading: true,
                error: null
            });
            try {
                _loggerconfig.appLogger.info('Fetching dashboards list');
                // Simulate API call
                await new Promise((resolve)=>setTimeout(resolve, 500));
                set({
                    dashboards: mockDashboards,
                    isLoading: false
                });
                _loggerconfig.appLogger.info('Dashboards loaded successfully', {
                    count: mockDashboards.length
                });
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboards';
                _loggerconfig.appLogger.error('Failed to fetch dashboards', {
                    error
                });
                set({
                    error: errorMessage,
                    isLoading: false
                });
            }
        },
        fetchDashboard: async (id)=>{
            set({
                isLoading: true,
                error: null
            });
            try {
                _loggerconfig.appLogger.info('Fetching dashboard details', {
                    dashboardId: id
                });
                // Simulate API call
                await new Promise((resolve)=>setTimeout(resolve, 300));
                // Mock: return the full dashboard with given ID
                const dashboard = {
                    ...mockFullDashboard,
                    id,
                    name: mockDashboards.find((d)=>d.id === id)?.name || 'Unknown Dashboard'
                };
                set({
                    currentDashboard: dashboard,
                    isLoading: false
                });
                _loggerconfig.appLogger.info('Dashboard loaded successfully', {
                    dashboardId: id
                });
                return dashboard;
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard';
                _loggerconfig.appLogger.error('Failed to fetch dashboard', {
                    error,
                    dashboardId: id
                });
                set({
                    error: errorMessage,
                    isLoading: false
                });
                return null;
            }
        },
        createDashboard: async (data)=>{
            set({
                isLoading: true,
                error: null
            });
            try {
                _loggerconfig.appLogger.info('Creating new dashboard', {
                    name: data.name
                });
                // Simulate API call
                await new Promise((resolve)=>setTimeout(resolve, 800));
                const newDashboard = {
                    id: `dash-${Date.now()}`,
                    name: data.name,
                    description: data.description,
                    isPublic: data.isPublic,
                    updatedAt: new Date(),
                    widgetCount: 0
                };
                set((state)=>({
                        dashboards: [
                            newDashboard,
                            ...state.dashboards
                        ],
                        isLoading: false
                    }));
                _loggerconfig.appLogger.info('Dashboard created successfully', {
                    dashboardId: newDashboard.id,
                    name: data.name
                });
                return newDashboard.id;
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : 'Failed to create dashboard';
                _loggerconfig.appLogger.error('Failed to create dashboard', {
                    error,
                    data
                });
                set({
                    error: errorMessage,
                    isLoading: false
                });
                throw new Error(errorMessage);
            }
        },
        updateDashboard: async (data)=>{
            set({
                isLoading: true,
                error: null
            });
            try {
                _loggerconfig.appLogger.info('Updating dashboard', {
                    dashboardId: data.id
                });
                // Simulate API call
                await new Promise((resolve)=>setTimeout(resolve, 600));
                set((state)=>({
                        dashboards: state.dashboards.map((dashboard)=>dashboard.id === data.id ? {
                                ...dashboard,
                                ...data.name && {
                                    name: data.name
                                },
                                ...data.description && {
                                    description: data.description
                                },
                                ...data.isPublic !== undefined && {
                                    isPublic: data.isPublic
                                },
                                updatedAt: new Date()
                            } : dashboard),
                        currentDashboard: state.currentDashboard?.id === data.id ? {
                            ...state.currentDashboard,
                            ...data.name && {
                                name: data.name
                            },
                            ...data.description && {
                                description: data.description
                            },
                            ...data.isPublic !== undefined && {
                                isPublic: data.isPublic
                            },
                            ...data.settings && {
                                settings: {
                                    ...state.currentDashboard.settings,
                                    ...data.settings
                                }
                            },
                            updatedAt: new Date()
                        } : state.currentDashboard,
                        isLoading: false
                    }));
                _loggerconfig.appLogger.info('Dashboard updated successfully', {
                    dashboardId: data.id
                });
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : 'Failed to update dashboard';
                _loggerconfig.appLogger.error('Failed to update dashboard', {
                    error,
                    data
                });
                set({
                    error: errorMessage,
                    isLoading: false
                });
            }
        },
        deleteDashboard: async (id)=>{
            set({
                isLoading: true,
                error: null
            });
            try {
                _loggerconfig.appLogger.info('Deleting dashboard', {
                    dashboardId: id
                });
                // Simulate API call
                await new Promise((resolve)=>setTimeout(resolve, 400));
                set((state)=>({
                        dashboards: state.dashboards.filter((dashboard)=>dashboard.id !== id),
                        currentDashboard: state.currentDashboard?.id === id ? null : state.currentDashboard,
                        isLoading: false
                    }));
                _loggerconfig.appLogger.info('Dashboard deleted successfully', {
                    dashboardId: id
                });
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : 'Failed to delete dashboard';
                _loggerconfig.appLogger.error('Failed to delete dashboard', {
                    error,
                    dashboardId: id
                });
                set({
                    error: errorMessage,
                    isLoading: false
                });
            }
        },
        setCurrentDashboard: (dashboard)=>{
            set({
                currentDashboard: dashboard
            });
        },
        clearError: ()=>{
            set({
                error: null
            });
        }
    })));

//# sourceMappingURL=data:application/json;base64,