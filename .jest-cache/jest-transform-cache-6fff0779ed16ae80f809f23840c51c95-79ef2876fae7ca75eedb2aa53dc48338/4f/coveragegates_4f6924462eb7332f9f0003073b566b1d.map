{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/scripts/coverage-gates.js"],"sourcesContent":["\n\n/**\n * Coverage Gates Implementation\n * AI Safety Infrastructure - Prevents deployment of under-tested code\n * \n * CRITICAL for AI Safety - ensures code coverage never drops below safe thresholds\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Coverage thresholds for different file types\nconst COVERAGE_THRESHOLDS = {\n  // Critical business logic - highest coverage required\n  critical: {\n    statements: 90,\n    branches: 85,\n    functions: 90,\n    lines: 90,\n    files: [\n      'src/lib/auth/**',\n      'src/contexts/**',\n      'src/lib/api/**',\n      'src/hooks/**'\n    ]\n  },\n  \n  // Core application logic - high coverage required\n  core: {\n    statements: 80,\n    branches: 75,\n    functions: 80,\n    lines: 80,\n    files: [\n      'src/components/auth/**',\n      'src/components/dashboard/**',\n      'src/lib/tanstack-query/**',\n      'src/lib/monitoring/**'\n    ]\n  },\n  \n  // UI components - moderate coverage acceptable\n  ui: {\n    statements: 60,\n    branches: 50,\n    functions: 60,\n    lines: 60,\n    files: [\n      'src/components/ui/**',\n      'src/components/brand/**',\n      'src/components/layout/**'\n    ]\n  },\n  \n  // Configuration and utilities - basic coverage\n  utils: {\n    statements: 50,\n    branches: 40,\n    functions: 50,\n    lines: 50,\n    files: [\n      'src/lib/utils/**',\n      'src/types/**',\n      'src/config/**'\n    ]\n  }\n};\n\n// Global minimum thresholds (fallback)\nconst GLOBAL_MINIMUMS = {\n  statements: 35,\n  branches: 30,\n  functions: 35,\n  lines: 35\n};\n\n// Files to exclude from coverage requirements\nconst EXCLUDED_FILES = [\n  '**/*.d.ts',\n  '**/*.stories.js',\n  '**/*.stories.jsx', \n  '**/*.stories.ts',\n  '**/*.stories.tsx',\n  '**/__tests__/**',\n  '**/__mocks__/**',\n  '**/node_modules/**',\n  'src/app/**/page.tsx',           // Next.js pages (UI focused)\n  'src/app/**/layout.tsx',         // Next.js layouts (UI focused)\n  'src/app/**/loading.tsx',        // Next.js loading components\n  'src/app/**/error.tsx',          // Next.js error components\n];\n\n/**\n * Load coverage summary from Jest output\n */\nfunction loadCoverageSummary() {\n  const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');\n  \n  if (!fs.existsSync(coveragePath)) {\n    console.error('‚ùå Coverage summary not found. Run tests with coverage first: npm run test:coverage');\n    process.exit(1);\n  }\n  \n  try {\n    const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));\n    return coverage;\n  } catch (error) {\n    console.error('‚ùå Failed to parse coverage summary:', error.message);\n    process.exit(1);\n  }\n}\n\n/**\n * Check if file matches any pattern in array\n */\nfunction matchesPatterns(filePath, patterns) {\n  return patterns.some(pattern => {\n    // Simple pattern matching that handles the most common cases\n    \n    // Exact match\n    if (pattern === filePath) {\n      return true;\n    }\n    \n    // Handle **/__tests__/** specifically\n    if (pattern === '**/__tests__/**') {\n      return filePath.includes('/__tests__/');\n    }\n    \n    // Handle **/__mocks__/** specifically\n    if (pattern === '**/__mocks__/**') {\n      return filePath.includes('/__mocks__/');\n    }\n    \n    // Handle ** at start with specific extension patterns\n    if (pattern.startsWith('**/')) {\n      const suffix = pattern.slice(3);\n      \n      // For file patterns like **/*.d.ts\n      if (suffix.includes('*')) {\n        // Convert to simple regex\n        const regexSuffix = suffix\n          .replace(/\\./g, '\\\\.')\n          .replace(/\\*/g, '[^/]*');\n        const regex = new RegExp(regexSuffix + '$');\n        const fileName = filePath.split('/').pop() || '';\n        return regex.test(fileName);\n      }\n      \n      return filePath.endsWith('/' + suffix) || filePath.includes('/' + suffix);\n    }\n    \n    // Handle ** at end (e.g., \"src/components/**\")\n    if (pattern.endsWith('/**')) {\n      const prefix = pattern.slice(0, -3);\n      return filePath.startsWith(prefix + '/');\n    }\n    \n    // Handle patterns with ** in middle (e.g., \"src/app/**/page.tsx\")\n    if (pattern.includes('**/')) {\n      const parts = pattern.split('**/');\n      if (parts.length === 2) {\n        const [prefix, suffix] = parts;\n        return filePath.startsWith(prefix) && filePath.endsWith(suffix);\n      }\n    }\n    \n    // Handle single * (e.g., \"*.test.js\")\n    // Convert to regex, escaping dots but keeping * as wildcard\n    const regexPattern = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*/g, '[^/]*')\n      .replace(/\\?/g, '.');\n    \n    const regex = new RegExp(`^${regexPattern}$`);\n    return regex.test(filePath);\n  });\n}\n\n/**\n * Determine coverage threshold for a file\n */\nfunction getThresholdForFile(filePath) {\n  // Check if file should be excluded\n  if (matchesPatterns(filePath, EXCLUDED_FILES)) {\n    return null;\n  }\n  \n  // Find matching threshold category\n  for (const [category, config] of Object.entries(COVERAGE_THRESHOLDS)) {\n    if (matchesPatterns(filePath, config.files)) {\n      return { category, ...config };\n    }\n  }\n  \n  // Return global minimums as fallback\n  return { category: 'global', ...GLOBAL_MINIMUMS };\n}\n\n/**\n * Check individual file coverage\n */\nfunction checkFileCoverage(filePath, fileCoverage) {\n  const threshold = getThresholdForFile(filePath);\n  \n  if (!threshold) {\n    return { passed: true, excluded: true };\n  }\n  \n  const failures = [];\n  const metrics = ['statements', 'branches', 'functions', 'lines'];\n  \n  for (const metric of metrics) {\n    const actual = fileCoverage[metric].pct;\n    const required = threshold[metric];\n    \n    if (actual < required) {\n      failures.push({\n        metric,\n        actual,\n        required,\n        gap: required - actual\n      });\n    }\n  }\n  \n  return {\n    passed: failures.length === 0,\n    category: threshold.category,\n    failures,\n    excluded: false\n  };\n}\n\n/**\n * Generate coverage report with recommendations\n */\nfunction generateCoverageReport(results) {\n  const totalFiles = results.length;\n  const passedFiles = results.filter(r => r.result.passed).length;\n  const excludedFiles = results.filter(r => r.result.excluded).length;\n  const failedFiles = results.filter(r => !r.result.passed && !r.result.excluded).length;\n  \n  console.log('\\nüìä Coverage Gates Report');\n  console.log('========================\\n');\n  \n  console.log(`Total Files Analyzed: ${totalFiles}`);\n  console.log(`‚úÖ Passed: ${passedFiles}`);\n  console.log(`‚ùå Failed: ${failedFiles}`);\n  console.log(`‚è≠Ô∏è  Excluded: ${excludedFiles}\\n`);\n  \n  if (failedFiles > 0) {\n    console.log('‚ùå COVERAGE FAILURES:');\n    console.log('====================\\n');\n    \n    // Group failures by category\n    const failuresByCategory = {};\n    \n    results\n      .filter(r => !r.result.passed && !r.result.excluded)\n      .forEach(({ filePath, result }) => {\n        if (!failuresByCategory[result.category]) {\n          failuresByCategory[result.category] = [];\n        }\n        failuresByCategory[result.category].push({ filePath, result });\n      });\n    \n    for (const [category, failures] of Object.entries(failuresByCategory)) {\n      console.log(`üìÅ ${category.toUpperCase()} FILES:`);\n      \n      failures.forEach(({ filePath, result }) => {\n        console.log(`   ${filePath}`);\n        result.failures.forEach(failure => {\n          console.log(`     ${failure.metric}: ${failure.actual}% (need ${failure.required}%, gap: ${failure.gap.toFixed(1)}%)`);\n        });\n        console.log('');\n      });\n    }\n    \n    console.log('\\nüí° RECOMMENDATIONS:');\n    console.log('===================\\n');\n    \n    // Provide specific recommendations\n    const criticalFailures = results.filter(r => !r.result.passed && r.result.category === 'critical');\n    const coreFailures = results.filter(r => !r.result.passed && r.result.category === 'core');\n    \n    if (criticalFailures.length > 0) {\n      console.log('üö® CRITICAL: These files handle authentication, API calls, or core business logic.');\n      console.log('   High test coverage is essential for security and reliability.');\n      criticalFailures.forEach(({ filePath }) => {\n        console.log(`   - Add comprehensive tests for ${filePath}`);\n      });\n      console.log('');\n    }\n    \n    if (coreFailures.length > 0) {\n      console.log('‚ö†Ô∏è  CORE: These files contain important application logic.');\n      console.log('   Improve test coverage to prevent regressions.');\n      coreFailures.forEach(({ filePath }) => {\n        console.log(`   - Add integration tests for ${filePath}`);\n      });\n      console.log('');\n    }\n    \n    console.log('üìù Quick wins:');\n    console.log('   1. Add happy path tests for main functions');\n    console.log('   2. Test error handling scenarios');\n    console.log('   3. Add edge case validation');\n    console.log('');\n  } else {\n    console.log('‚úÖ All files meet coverage requirements!');\n    console.log('');\n  }\n  \n  return failedFiles === 0;\n}\n\n/**\n * Check global coverage thresholds\n */\nfunction checkGlobalCoverage(coverage) {\n  const global = coverage.total;\n  const failures = [];\n  \n  for (const [metric, threshold] of Object.entries(GLOBAL_MINIMUMS)) {\n    const actual = global[metric].pct;\n    if (actual < threshold) {\n      failures.push({\n        metric,\n        actual,\n        threshold,\n        gap: threshold - actual\n      });\n    }\n  }\n  \n  if (failures.length > 0) {\n    console.log('üåç GLOBAL COVERAGE FAILURES:');\n    console.log('============================\\n');\n    \n    failures.forEach(failure => {\n      console.log(`${failure.metric}: ${failure.actual}% (minimum: ${failure.threshold}%, gap: ${failure.gap.toFixed(1)}%)`);\n    });\n    console.log('');\n    \n    return false;\n  }\n  \n  console.log('‚úÖ Global coverage thresholds met!');\n  console.log('');\n  return true;\n}\n\n/**\n * Save coverage gate results for CI/CD\n */\nfunction saveCoverageGateResults(passed, results) {\n  const output = {\n    timestamp: new Date().toISOString(),\n    passed,\n    summary: {\n      totalFiles: results.length,\n      passedFiles: results.filter(r => r.result.passed).length,\n      failedFiles: results.filter(r => !r.result.passed && !r.result.excluded).length,\n      excludedFiles: results.filter(r => r.result.excluded).length,\n    },\n    failures: results\n      .filter(r => !r.result.passed && !r.result.excluded)\n      .map(({ filePath, result }) => ({\n        filePath,\n        category: result.category,\n        failures: result.failures\n      }))\n  };\n  \n  const outputPath = path.join(process.cwd(), 'coverage', 'coverage-gates.json');\n  fs.writeFileSync(outputPath, JSON.stringify(output, null, 2));\n  \n  console.log(`üìÑ Coverage gate results saved to: ${outputPath}`);\n  console.log('');\n}\n\n/**\n * Main coverage gate check\n */\nfunction main() {\n  console.log('üîí AI Safety Coverage Gates');\n  console.log('===========================\\n');\n  \n  // Load coverage data\n  const coverage = loadCoverageSummary();\n  \n  // Check individual file coverage\n  const results = [];\n  \n  for (const [filePath, fileCoverage] of Object.entries(coverage)) {\n    if (filePath === 'total') continue;\n    \n    const result = checkFileCoverage(filePath, fileCoverage);\n    results.push({ filePath, result });\n  }\n  \n  // Generate detailed report\n  const filesPassed = generateCoverageReport(results);\n  \n  // Check global coverage\n  const globalPassed = checkGlobalCoverage(coverage);\n  \n  // Overall result\n  const overallPassed = filesPassed && globalPassed;\n  \n  // Save results for CI/CD integration\n  saveCoverageGateResults(overallPassed, results);\n  \n  // Summary\n  if (overallPassed) {\n    console.log('üéâ ALL COVERAGE GATES PASSED!');\n    console.log('Code is ready for deployment.');\n    process.exit(0);\n  } else {\n    console.log('üö´ COVERAGE GATES FAILED!');\n    console.log('Please improve test coverage before deployment.');\n    console.log('');\n    console.log('üí° TIP: Run `npm run test:coverage` to generate detailed coverage report.');\n    process.exit(1);\n  }\n}\n\n// Run if called directly\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = {\n  checkFileCoverage,\n  getThresholdForFile,\n  COVERAGE_THRESHOLDS,\n  GLOBAL_MINIMUMS\n};"],"names":["fs","require","path","COVERAGE_THRESHOLDS","critical","statements","branches","functions","lines","files","core","ui","utils","GLOBAL_MINIMUMS","EXCLUDED_FILES","loadCoverageSummary","coveragePath","join","process","cwd","existsSync","console","error","exit","coverage","JSON","parse","readFileSync","message","matchesPatterns","filePath","patterns","some","pattern","includes","startsWith","suffix","slice","regexSuffix","replace","regex","RegExp","fileName","split","pop","test","endsWith","prefix","parts","length","regexPattern","getThresholdForFile","category","config","Object","entries","checkFileCoverage","fileCoverage","threshold","passed","excluded","failures","metrics","metric","actual","pct","required","push","gap","generateCoverageReport","results","totalFiles","passedFiles","filter","r","result","excludedFiles","failedFiles","log","failuresByCategory","forEach","toUpperCase","failure","toFixed","criticalFailures","coreFailures","checkGlobalCoverage","global","total","saveCoverageGateResults","output","timestamp","Date","toISOString","summary","map","outputPath","writeFileSync","stringify","main","filesPassed","globalPassed","overallPassed","module","exports"],"mappings":"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"}