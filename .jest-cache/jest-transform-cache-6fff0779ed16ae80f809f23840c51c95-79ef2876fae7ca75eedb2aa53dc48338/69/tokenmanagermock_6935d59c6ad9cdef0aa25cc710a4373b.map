{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/testing/token-manager-mock.tsx"],"sourcesContent":["/**\n * Token Manager Mock Scenarios\n * Complete implementation for auth testing\n */\n\nimport type { TokenManager, StoredTokenInfo } from '@/lib/auth/token';\n\nexport const TokenManagerMockScenarios = {\n  unauthenticated: (): TokenManager => ({\n    isClient: true,\n    getAccessToken: jest.fn(() => null),\n    getRefreshToken: jest.fn(() => null),\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getTokenInfo: jest.fn(() => ({\n      token: null,\n      refreshToken: null,\n      expiresAt: null,\n      isValid: false,\n      isExpired: true,\n    } as StoredTokenInfo)),\n    updateApiClientToken: jest.fn(),\n    getCurrentUserInfo: jest.fn(() => null),\n    needsRefresh: jest.fn(() => false),\n    parseTokenPayload: jest.fn(() => null),\n  } as TokenManager),\n\n  customUser: (overrides?: { userId?: string; email?: string; role?: 'user' | 'admin' }): TokenManager => ({\n    isClient: true,\n    getAccessToken: jest.fn(() => 'mock-access-token'),\n    getRefreshToken: jest.fn(() => 'mock-refresh-token'),\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getTokenInfo: jest.fn(() => ({\n      token: 'mock-access-token',\n      refreshToken: 'mock-refresh-token',\n      expiresAt: new Date(Date.now() + 3600000),\n      isValid: true,\n      isExpired: false,\n    } as StoredTokenInfo)),\n    updateApiClientToken: jest.fn(),\n    getCurrentUserInfo: jest.fn(() => ({\n      userId: overrides?.userId || 'test-user-id',\n      email: overrides?.email || 'test@example.com',\n      role: overrides?.role || 'user',\n    })),\n    needsRefresh: jest.fn(() => false),\n    parseTokenPayload: jest.fn(() => ({\n      sub: overrides?.userId || 'test-user-id',\n      email: overrides?.email || 'test@example.com',\n      role: overrides?.role || 'user',\n      exp: Math.floor((Date.now() + 3600000) / 1000),\n      iat: Math.floor(Date.now() / 1000),\n    })),\n  } as TokenManager),\n\n  authenticatedAdmin: (): TokenManager => ({\n    isClient: true,\n    getAccessToken: jest.fn(() => 'mock-admin-token'),\n    getRefreshToken: jest.fn(() => 'mock-admin-refresh'),\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getTokenInfo: jest.fn(() => ({\n      token: 'mock-admin-token',\n      refreshToken: 'mock-admin-refresh',\n      expiresAt: new Date(Date.now() + 3600000),\n      isValid: true,\n      isExpired: false,\n    } as StoredTokenInfo)),\n    updateApiClientToken: jest.fn(),\n    getCurrentUserInfo: jest.fn(() => ({\n      userId: 'admin-user-id',\n      email: 'admin@example.com',\n      role: 'admin',\n    })),\n    needsRefresh: jest.fn(() => false),\n    parseTokenPayload: jest.fn(() => ({\n      sub: 'admin-user-id',\n      email: 'admin@example.com',\n      role: 'admin',\n      exp: Math.floor((Date.now() + 3600000) / 1000),\n      iat: Math.floor(Date.now() / 1000),\n    })),\n  } as TokenManager),\n\n  expiredToken: (): TokenManager => ({\n    isClient: true,\n    getAccessToken: jest.fn(() => null),\n    getRefreshToken: jest.fn(() => 'expired-refresh'),\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getTokenInfo: jest.fn(() => ({\n      token: 'expired-token',\n      refreshToken: 'expired-refresh',\n      expiresAt: new Date(Date.now() - 3600000),\n      isValid: false,\n      isExpired: true,\n    } as StoredTokenInfo)),\n    updateApiClientToken: jest.fn(),\n    getCurrentUserInfo: jest.fn(() => null),\n    needsRefresh: jest.fn(() => true),\n    parseTokenPayload: jest.fn(() => null),\n  } as TokenManager),\n\n  // Alias for backward compatibility\n  authenticatedUser: (overrides?: { userId?: string; email?: string; role?: 'user' | 'admin' }): TokenManager => {\n    return TokenManagerMockScenarios.customUser(overrides);\n  },\n};\n\n/**\n * Create a fresh mock TokenManager with all methods as jest.fn()\n * Useful for tests that need to customize behavior extensively\n */\nexport function createMockTokenManager(): TokenManager {\n  return {\n    isClient: true,\n    getAccessToken: jest.fn(() => null),\n    getRefreshToken: jest.fn(() => null),\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getTokenInfo: jest.fn(() => ({\n      token: null,\n      refreshToken: null,\n      expiresAt: null,\n      isValid: false,\n      isExpired: true,\n    } as StoredTokenInfo)),\n    updateApiClientToken: jest.fn(),\n    getCurrentUserInfo: jest.fn(() => null),\n    needsRefresh: jest.fn(() => false),\n    parseTokenPayload: jest.fn(() => null),\n  } as TokenManager;\n}"],"names":["TokenManagerMockScenarios","createMockTokenManager","unauthenticated","isClient","getAccessToken","jest","fn","getRefreshToken","setTokens","clearTokens","getTokenInfo","token","refreshToken","expiresAt","isValid","isExpired","updateApiClientToken","getCurrentUserInfo","needsRefresh","parseTokenPayload","customUser","overrides","Date","now","userId","email","role","sub","exp","Math","floor","iat","authenticatedAdmin","expiredToken","authenticatedUser"],"mappings":"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"}