f66afc6584503d0c7676a9b2e542d44e
/**
 * AuthContext Integration Tests - Streamlined
 * Testing core auth integration only (Reduced from 122 â†’ 15 tests)
 */ "use strict";
// Mock logger to avoid console noise
jest.mock('@/lib/monitoring/logger.config', ()=>({
        appLogger: {
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _AuthContext = require("../AuthContext");
const _tokenmanagermock = require("../../lib/testing/token-manager-mock");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('AuthContext Integration Tests', ()=>{
    const testUser = {
        id: 'user-123',
        email: 'test@example.com',
        name: 'Test User',
        role: 'user'
    };
    const createWrapper = (tokenManager)=>{
        return ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                tokenManager: tokenManager,
                children: children
            });
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // Core authentication state test
    it('should initialize with unauthenticated state', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.unauthenticated();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isAuthenticated).toBe(false);
        expect(result.current.user).toBeNull();
        expect(result.current.isLoading).toBe(false);
    });
    // Authenticated state initialization test
    it('should initialize with authenticated state when token exists', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser({
            userId: testUser.id,
            email: testUser.email,
            role: testUser.role
        });
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isAuthenticated).toBe(true);
        expect(result.current.user).toMatchObject({
            id: testUser.id,
            email: testUser.email,
            role: testUser.role
        });
    });
    // Login functionality test
    it('should handle login successfully', async ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.unauthenticated();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isAuthenticated).toBe(false);
        await (0, _react.act)(async ()=>{
            await result.current.login('test@example.com', 'password');
        });
        expect(result.current.isAuthenticated).toBe(true);
    });
    // Logout functionality test
    it('should handle logout correctly', async ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isAuthenticated).toBe(true);
        (0, _react.act)(()=>{
            result.current.logout();
        });
        expect(result.current.isAuthenticated).toBe(false);
        expect(result.current.user).toBeNull();
        expect(tokenManager.clearTokens).toHaveBeenCalled();
    });
    // Token refresh test
    it('should handle token refresh', async ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        tokenManager.needsRefresh.mockReturnValue(true);
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        const refreshResult = await (0, _react.act)(async ()=>{
            return await result.current.refreshToken();
        });
        expect(refreshResult).toBe(true);
    });
    // Error handling test
    it('should handle login errors gracefully', async ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.unauthenticated();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        // Mock login failure
        const mockError = new Error('Invalid credentials');
        await (0, _react.act)(async ()=>{
            try {
                await result.current.login('wrong@email.com', 'wrongpassword');
            } catch (error) {
                expect(error).toEqual(mockError);
            }
        });
        expect(result.current.isAuthenticated).toBe(false);
        expect(result.current.error).toBeTruthy();
    });
    // User update test
    it('should update user profile', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        (0, _react.act)(()=>{
            result.current.updateUser({
                name: 'Updated Name'
            });
        });
        expect(result.current.user?.name).toBe('Updated Name');
    });
    // Error clearing test
    it('should clear error state', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.unauthenticated();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        // Set error state
        (0, _react.act)(()=>{
            result.current.login('invalid', 'invalid').catch(()=>{});
        });
        // Clear error
        (0, _react.act)(()=>{
            result.current.clearError();
        });
        expect(result.current.error).toBeNull();
    });
    // Access token utility test
    it('should provide access token utility', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        const token = result.current.getAccessToken();
        expect(token).toBe('mock-access-token');
    });
    // Token refresh check test
    it('should check if token needs refresh', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        tokenManager.needsRefresh.mockReturnValue(true);
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        const needsRefresh = result.current.needsRefresh();
        expect(needsRefresh).toBe(true);
    });
    // TokenManager validation test
    it('should validate custom token manager', ()=>{
        const validTokenManager = _tokenmanagermock.TokenManagerMockScenarios.customUser();
        expect(()=>{
            (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
                wrapper: createWrapper(validTokenManager)
            });
        }).not.toThrow();
    });
    // Invalid TokenManager test
    it('should reject invalid token manager', ()=>{
        const invalidTokenManager = {
            getTokenInfo: jest.fn()
        };
        expect(()=>{
            (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
                wrapper: createWrapper(invalidTokenManager)
            });
        }).toThrow('Invalid tokenManager: missing required methods');
    });
    // Context provider requirement test
    it('should throw error when useAuth used outside provider', ()=>{
        expect(()=>{
            (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)());
        }).toThrow('useAuth must be used within an AuthProvider');
    });
    // Loading state test
    it('should handle loading states correctly', async ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.unauthenticated();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isLoading).toBe(false);
        // Test loading during login
        (0, _react.act)(()=>{
            result.current.login('test@example.com', 'password');
        });
        // Should be loading during async operation
        await (0, _react.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false); // Will be false after completion
        });
    });
    // Expired token handling test
    it('should handle expired tokens correctly', ()=>{
        const tokenManager = _tokenmanagermock.TokenManagerMockScenarios.expiredToken();
        const { result } = (0, _react.renderHook)(()=>(0, _AuthContext.useAuth)(), {
            wrapper: createWrapper(tokenManager)
        });
        expect(result.current.isAuthenticated).toBe(false);
        expect(result.current.user).toBeNull();
    });
});

//# sourceMappingURL=data:application/json;base64,