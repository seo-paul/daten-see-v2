{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/auth/__tests__/LoginForm.test.tsx"],"sourcesContent":["/**\n * LoginForm Component Tests - Streamlined\n * Testing core login functionality only (Reduced from 144 → 12 tests)\n */\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport * as authMutations from '@/hooks/auth/useAuthMutations';\n\nimport { LoginForm } from '../LoginForm';\n\n// Mock Sentry to avoid errors in tests\njest.mock('@sentry/nextjs', () => ({\n  addBreadcrumb: jest.fn(),\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  setTag: jest.fn(),\n  setContext: jest.fn(),\n  withScope: jest.fn((callback) => callback({ setTag: jest.fn(), setContext: jest.fn() })),\n  getCurrentScope: jest.fn(() => ({ setTag: jest.fn(), setContext: jest.fn() })),\n}));\n\n// Mock logger to avoid console output in tests\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\n// Mock the auth mutations hook\nconst mockMutateAsync = jest.fn();\nconst mockMutation = {\n  mutateAsync: mockMutateAsync,\n  isPending: false,\n  error: null,\n  isError: false,\n  isSuccess: false,\n  reset: jest.fn(),\n};\n\njest.spyOn(authMutations, 'useLoginMutation').mockReturnValue(mockMutation as any);\n\ndescribe('LoginForm', () => {\n  let queryClient: QueryClient;\n\n  const renderLoginForm = (props = {}) => {\n    queryClient = new QueryClient({\n      defaultOptions: { queries: { retry: false }, mutations: { retry: false } },\n    });\n\n    return render(\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <LoginForm {...props} />\n        </AuthProvider>\n      </QueryClientProvider>\n    );\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockMutateAsync.mockResolvedValue({\n      user: { id: '1', email: 'test@example.com', name: 'Test User' },\n      tokens: { accessToken: 'token', refreshToken: 'refresh' }\n    });\n  });\n\n  // Core rendering test\n  it('should render login form with email and password fields', () => {\n    renderLoginForm();\n    \n    expect(screen.getByLabelText(/e-mail/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/passwort/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /anmelden/i })).toBeInTheDocument();\n  });\n\n  // Successful login test\n  it('should handle successful login submission', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    const submitButton = screen.getByRole('button', { name: /anmelden/i });\n\n    await user.type(emailInput, 'test@example.com');\n    await user.type(passwordInput, 'password123');\n    await user.click(submitButton);\n\n    expect(mockMutateAsync).toHaveBeenCalledWith({\n      email: 'test@example.com',\n      password: 'password123',\n    });\n  });\n\n  // Form validation test\n  it('should show validation errors for empty fields', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const submitButton = screen.getByRole('button', { name: /anmelden/i });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/e-mail ist erforderlich/i)).toBeInTheDocument();\n      expect(screen.getByText(/passwort ist erforderlich/i)).toBeInTheDocument();\n    });\n  });\n\n  // Invalid email validation test\n  it('should show error for invalid email format', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    await user.type(emailInput, 'invalid-email');\n    await user.tab(); // Blur to trigger validation\n\n    await waitFor(() => {\n      expect(screen.getByText(/ungültige e-mail-adresse/i)).toBeInTheDocument();\n    });\n  });\n\n  // Login error handling test\n  it('should display error message on login failure', async () => {\n    const user = userEvent.setup();\n    mockMutateAsync.mockRejectedValue(new Error('Invalid credentials'));\n    \n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    const submitButton = screen.getByRole('button', { name: /anmelden/i });\n\n    await user.type(emailInput, 'test@example.com');\n    await user.type(passwordInput, 'wrongpassword');\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/anmeldung fehlgeschlagen/i)).toBeInTheDocument();\n    });\n  });\n\n  // Loading state test\n  it('should show loading state during submission', async () => {\n    const user = userEvent.setup();\n    mockMutation.isPending = true;\n    renderLoginForm();\n\n    const submitButton = screen.getByRole('button', { name: /anmelden/i });\n    expect(submitButton).toBeDisabled();\n    expect(screen.getByText(/wird geladen/i)).toBeInTheDocument();\n  });\n\n  // Password visibility toggle test\n  it('should toggle password visibility', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    const toggleButton = screen.getByRole('button', { name: /passwort anzeigen/i });\n\n    expect(passwordInput).toHaveAttribute('type', 'password');\n    \n    await user.click(toggleButton);\n    expect(passwordInput).toHaveAttribute('type', 'text');\n    \n    await user.click(toggleButton);\n    expect(passwordInput).toHaveAttribute('type', 'password');\n  });\n\n  // Form reset test\n  it('should reset form after successful login', async () => {\n    const user = userEvent.setup();\n    mockMutation.isSuccess = true;\n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n\n    await user.type(emailInput, 'test@example.com');\n    await user.type(passwordInput, 'password123');\n\n    // Simulate successful login\n    mockMutation.reset();\n\n    expect(emailInput).toHaveValue('');\n    expect(passwordInput).toHaveValue('');\n  });\n\n  // Remember me functionality test\n  it('should handle remember me checkbox', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const rememberCheckbox = screen.getByLabelText(/angemeldet bleiben/i);\n    expect(rememberCheckbox).not.toBeChecked();\n\n    await user.click(rememberCheckbox);\n    expect(rememberCheckbox).toBeChecked();\n  });\n\n  // Keyboard navigation test\n  it('should handle Enter key submission', async () => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n\n    await user.type(emailInput, 'test@example.com');\n    await user.type(passwordInput, 'password123');\n    await user.keyboard('{Enter}');\n\n    expect(mockMutateAsync).toHaveBeenCalledWith({\n      email: 'test@example.com',\n      password: 'password123',\n    });\n  });\n\n  // Accessibility test\n  it('should have proper form accessibility attributes', () => {\n    renderLoginForm();\n\n    const form = screen.getByRole('form');\n    expect(form).toBeInTheDocument();\n    \n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    \n    expect(emailInput).toHaveAttribute('type', 'email');\n    expect(emailInput).toHaveAttribute('autocomplete', 'email');\n    expect(passwordInput).toHaveAttribute('type', 'password');\n    expect(passwordInput).toHaveAttribute('autocomplete', 'current-password');\n  });\n\n  // Focus management test\n  it('should focus email input on component mount', () => {\n    renderLoginForm();\n    \n    const emailInput = screen.getByLabelText(/e-mail/i);\n    expect(emailInput).toHaveFocus();\n  });\n});"],"names":["jest","mock","addBreadcrumb","fn","captureException","captureMessage","setTag","setContext","withScope","callback","getCurrentScope","appLogger","debug","info","warn","error","mockMutateAsync","mockMutation","mutateAsync","isPending","isError","isSuccess","reset","spyOn","authMutations","mockReturnValue","describe","queryClient","renderLoginForm","props","QueryClient","defaultOptions","queries","retry","mutations","render","QueryClientProvider","client","AuthProvider","LoginForm","beforeEach","clearAllMocks","mockResolvedValue","user","id","email","name","tokens","accessToken","refreshToken","it","expect","screen","getByLabelText","toBeInTheDocument","getByRole","userEvent","setup","emailInput","passwordInput","submitButton","type","click","toHaveBeenCalledWith","password","waitFor","getByText","tab","mockRejectedValue","Error","toBeDisabled","toggleButton","toHaveAttribute","toHaveValue","rememberCheckbox","not","toBeChecked","keyboard","form","toHaveFocus"],"mappings":"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"}