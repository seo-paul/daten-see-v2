e9b14e165d1822f866c6d4ef230042ae
/**
 * DashboardCard Component Tests - Streamlined
 * Testing core dashboard card functionality only
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>mockRouter
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _DashboardCard = require("../DashboardCard");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock next/navigation
const mockRouter = {
    push: jest.fn()
};
const mockDashboard = {
    id: 'dashboard-1',
    name: 'Analytics Dashboard',
    description: 'Key metrics and performance indicators',
    isPublic: false,
    updatedAt: new Date('2024-01-15T10:30:00Z'),
    widgetCount: 5
};
describe('DashboardCard Component', ()=>{
    const mockOnEdit = jest.fn();
    const mockOnDelete = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should render dashboard information correctly', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: mockDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        expect(_react.screen.getByText('Analytics Dashboard')).toBeInTheDocument();
        expect(_react.screen.getByText('Key metrics and performance indicators')).toBeInTheDocument();
        expect(_react.screen.getByText('5 Widgets')).toBeInTheDocument();
        expect(_react.screen.getByText('Privat')).toBeInTheDocument();
    });
    it('should have clickable title link', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: mockDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        const titleLink = _react.screen.getByText('Analytics Dashboard').closest('a');
        expect(titleLink).toHaveAttribute('href', '/dashboard/dashboard-1');
    });
    it('should call onEdit when edit action is clicked', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: mockDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        await user.click(_react.screen.getByRole('button'));
        await user.click(_react.screen.getByText('Bearbeiten'));
        expect(mockOnEdit).toHaveBeenCalledWith(mockDashboard);
    });
    it('should call onDelete when delete action is clicked', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: mockDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        await user.click(_react.screen.getByRole('button'));
        await user.click(_react.screen.getByText('Löschen'));
        expect(mockOnDelete).toHaveBeenCalledWith(mockDashboard.id);
    });
    it('should display public status correctly', ()=>{
        const publicDashboard = {
            ...mockDashboard,
            isPublic: true
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: publicDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        expect(_react.screen.getByText('Öffentlich')).toBeInTheDocument();
    });
    it('should show actions menu when button is clicked', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardCard.DashboardCard, {
            dashboard: mockDashboard,
            onEdit: mockOnEdit,
            onDelete: mockOnDelete
        }));
        await user.click(_react.screen.getByRole('button'));
        expect(_react.screen.getByText('Bearbeiten')).toBeInTheDocument();
        expect(_react.screen.getByText('Löschen')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,