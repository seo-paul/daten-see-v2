10e237132fd95e58ce7cae76db2b18b9
/**
 * TanStack Query Configuration
 * Optimized stale-while-revalidate settings for performance
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get QUERY_CONFIG () {
        return QUERY_CONFIG;
    },
    get createDevQueryClient () {
        return createDevQueryClient;
    },
    get createOptimizedQueryClient () {
        return createOptimizedQueryClient;
    },
    get createQueryOptions () {
        return createQueryOptions;
    },
    get getNetworkOptimizedConfig () {
        return getNetworkOptimizedConfig;
    },
    get queryKeys () {
        return queryKeys;
    }
});
const _reactquery = require("@tanstack/react-query");
const QUERY_CONFIG = {
    // Fast-changing data (user interactions, real-time data)
    REALTIME: {
        staleTime: 0,
        gcTime: 5 * 60 * 1000,
        refetchOnWindowFocus: true,
        refetchInterval: 30 * 1000
    },
    // Medium-changing data (dashboard lists, user profiles)
    DYNAMIC: {
        staleTime: 2 * 60 * 1000,
        gcTime: 10 * 60 * 1000,
        refetchOnWindowFocus: true,
        refetchInterval: false
    },
    // Slow-changing data (settings, configurations)
    STATIC: {
        staleTime: 15 * 60 * 1000,
        gcTime: 60 * 60 * 1000,
        refetchOnWindowFocus: false,
        refetchInterval: false
    },
    // Critical data (authentication, permissions)
    CRITICAL: {
        staleTime: 30 * 1000,
        gcTime: 5 * 60 * 1000,
        refetchOnWindowFocus: true,
        refetchOnMount: true,
        refetchInterval: 60 * 1000
    },
    // Background data (analytics, logs)
    BACKGROUND: {
        staleTime: 5 * 60 * 1000,
        gcTime: 30 * 60 * 1000,
        refetchOnWindowFocus: false,
        refetchInterval: 5 * 60 * 1000
    }
};
function createOptimizedQueryClient() {
    return new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                // Default to DYNAMIC config for most use cases
                staleTime: QUERY_CONFIG.DYNAMIC.staleTime,
                gcTime: QUERY_CONFIG.DYNAMIC.gcTime,
                // Network optimization
                refetchOnWindowFocus: true,
                refetchOnReconnect: true,
                refetchOnMount: true,
                // Error handling
                retry: (failureCount, error)=>{
                    // Don't retry on 404s or authentication errors
                    if (error?.status === 404 || error?.status === 401) {
                        return false;
                    }
                    // Retry up to 3 times for other errors
                    return failureCount < 3;
                },
                retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000),
                // Performance optimization - keep previous data while fetching new data
                placeholderData: (previousData)=>previousData
            },
            mutations: {
                retry: 1,
                retryDelay: 1000
            }
        }
    });
}
const queryKeys = {
    // Authentication
    auth: [
        'auth'
    ],
    authUser: ()=>[
            ...queryKeys.auth,
            'user'
        ],
    // Dashboards
    dashboards: [
        'dashboards'
    ],
    dashboardsList: ()=>[
            ...queryKeys.dashboards,
            'list'
        ],
    dashboard: (id)=>[
            ...queryKeys.dashboards,
            'detail',
            id
        ],
    // Analytics (future)
    analytics: [
        'analytics'
    ],
    // Settings
    settings: [
        'settings'
    ],
    userSettings: (userId)=>[
            ...queryKeys.settings,
            'user',
            userId
        ]
};
const createQueryOptions = {
    /**
   * For dashboard data - medium update frequency
   */ dashboard: (id)=>({
            ...QUERY_CONFIG.DYNAMIC,
            queryKey: id ? queryKeys.dashboard(id) : queryKeys.dashboardsList()
        }),
    /**
   * For authentication data - high security, frequent checks
   */ auth: ()=>({
            ...QUERY_CONFIG.CRITICAL,
            queryKey: queryKeys.authUser()
        }),
    /**
   * For settings data - infrequent updates
   */ settings: (userId)=>({
            ...QUERY_CONFIG.STATIC,
            queryKey: userId ? queryKeys.userSettings(userId) : queryKeys.settings
        }),
    /**
   * For real-time analytics - frequent updates
   */ analytics: ()=>({
            ...QUERY_CONFIG.REALTIME,
            queryKey: queryKeys.analytics
        })
};
function getNetworkOptimizedConfig() {
    // Check if we're in a slow network environment
    const connection = navigator?.connection;
    const isSlowNetwork = connection?.effectiveType === '2g' || connection?.effectiveType === 'slow-2g';
    if (isSlowNetwork) {
        return {
            staleTime: 5 * 60 * 1000,
            gcTime: 30 * 60 * 1000,
            refetchOnWindowFocus: false
        };
    }
    return QUERY_CONFIG.DYNAMIC;
}
function createDevQueryClient() {
    const client = createOptimizedQueryClient();
    if (process.env.NODE_ENV === 'development') {
        // Enable React Query DevTools logging
        client.setMutationDefaults([
            'debug'
        ], {
            onSuccess: ()=>{
                if (process.env.NODE_ENV === 'development') {
                // Mutation success
                }
            },
            onError: ()=>{
                if (process.env.NODE_ENV === 'development') {
                // Mutation error
                }
            }
        });
    }
    return client;
}

//# sourceMappingURL=data:application/json;base64,