f26202a521f582168b1c4cf4ef8475c1
"use strict";

/* istanbul ignore next */
function cov_1cq6yxthqw() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/lib/api/client.ts";
  var hash = "e97e19bd23a07966ab696b537198f3566c2d2c96";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/lib/api/client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 28
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 25
        }
      },
      "9": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 60
        }
      },
      "10": {
        start: {
          line: 30,
          column: 21
        },
        end: {
          line: 30,
          column: 88
        }
      },
      "11": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 23
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 37
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 25
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 23
        }
      },
      "19": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 35
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 33
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 35
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 31
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 38
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "25": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 65
        }
      },
      "26": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 52
        }
      },
      "27": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 75,
          column: 65
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "29": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "30": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 92,
          column: 10
        }
      },
      "31": {
        start: {
          line: 96,
          column: 25
        },
        end: {
          line: 96,
          column: 47
        }
      },
      "32": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "33": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "34": {
        start: {
          line: 100,
          column: 33
        },
        end: {
          line: 100,
          column: 54
        }
      },
      "35": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "36": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 41
        }
      },
      "37": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 60
        }
      },
      "38": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 116,
          column: 18
        }
      },
      "39": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "40": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 126
        }
      },
      "41": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 127,
          column: 42
        }
      },
      "42": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "43": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 20
        }
      },
      "44": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 136,
          column: 36
        }
      },
      "45": {
        start: {
          line: 137,
          column: 31
        },
        end: {
          line: 140,
          column: 10
        }
      },
      "46": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 141,
          column: 64
        }
      },
      "47": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "48": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 52
        }
      },
      "49": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 88
        }
      },
      "50": {
        start: {
          line: 145,
          column: 45
        },
        end: {
          line: 145,
          column: 63
        }
      },
      "51": {
        start: {
          line: 146,
          column: 33
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "52": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "53": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 72
        }
      },
      "54": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 94
        }
      },
      "55": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 36
        }
      },
      "56": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 77
        }
      },
      "57": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "58": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "59": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "60": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 164,
          column: 23
        }
      },
      "61": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 45
        }
      },
      "62": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "63": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 172,
          column: 23
        }
      },
      "64": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 72
        }
      },
      "65": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "66": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 28
        }
      },
      "67": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "68": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 24
        }
      },
      "69": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "70": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 203,
          column: 11
        }
      },
      "71": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "72": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 219,
          column: 11
        }
      },
      "73": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "74": {
        start: {
          line: 229,
          column: 18
        },
        end: {
          line: 229,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 21
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 47
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 33
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 44
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 17
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 51
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 57
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 66
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 21
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 33
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 74
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 57
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 95
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 135
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 41
          },
          end: {
            line: 145,
            column: 42
          }
        },
        loc: {
          start: {
            line: 145,
            column: 45
          },
          end: {
            line: 145,
            column: 63
          }
        },
        line: 145
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 190
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 35
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 197
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 34
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 205
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 36
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 213
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 31
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 221
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 21
          },
          end: {
            line: 30,
            column: 57
          }
        }, {
          start: {
            line: 30,
            column: 61
          },
          end: {
            line: 30,
            column: 88
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 57,
            column: 25
          },
          end: {
            line: 57,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 35
          },
          end: {
            line: 57,
            column: 50
          }
        }],
        line: 57
      },
      "3": {
        loc: {
          start: {
            line: 85,
            column: 15
          },
          end: {
            line: 85,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 15
          },
          end: {
            line: 85,
            column: 29
          }
        }, {
          start: {
            line: 85,
            column: 33
          },
          end: {
            line: 85,
            column: 35
          }
        }],
        line: 85
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 35
          }
        }, {
          start: {
            line: 91,
            column: 39
          },
          end: {
            line: 91,
            column: 58
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        }, {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 106,
            column: 17
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 102,
            column: 34
          }
        }, {
          start: {
            line: 102,
            column: 38
          },
          end: {
            line: 102,
            column: 72
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 113,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 113,
            column: 52
          }
        }, {
          start: {
            line: 113,
            column: 56
          },
          end: {
            line: 113,
            column: 71
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 21
          },
          end: {
            line: 139,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 21
          },
          end: {
            line: 139,
            column: 35
          }
        }, {
          start: {
            line: 139,
            column: 39
          },
          end: {
            line: 139,
            column: 41
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "11": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "12": {
        loc: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "13": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "14": {
        loc: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 46
          }
        }, {
          start: {
            line: 167,
            column: 50
          },
          end: {
            line: 167,
            column: 83
          }
        }],
        line: 167
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 183,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 48
          },
          end: {
            line: 183,
            column: 61
          }
        }, {
          start: {
            line: 183,
            column: 64
          },
          end: {
            line: 183,
            column: 79
          }
        }],
        line: 183
      },
      "17": {
        loc: {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 28
          }
        }, {
          start: {
            line: 194,
            column: 32
          },
          end: {
            line: 194,
            column: 34
          }
        }],
        line: 194
      },
      "18": {
        loc: {
          start: {
            line: 202,
            column: 21
          },
          end: {
            line: 202,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 21
          },
          end: {
            line: 202,
            column: 28
          }
        }, {
          start: {
            line: 202,
            column: 32
          },
          end: {
            line: 202,
            column: 34
          }
        }],
        line: 202
      },
      "19": {
        loc: {
          start: {
            line: 210,
            column: 21
          },
          end: {
            line: 210,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 21
          },
          end: {
            line: 210,
            column: 28
          }
        }, {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 210,
            column: 34
          }
        }],
        line: 210
      },
      "20": {
        loc: {
          start: {
            line: 218,
            column: 21
          },
          end: {
            line: 218,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 21
          },
          end: {
            line: 218,
            column: 28
          }
        }, {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 218,
            column: 34
          }
        }],
        line: 218
      },
      "21": {
        loc: {
          start: {
            line: 225,
            column: 21
          },
          end: {
            line: 225,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 21
          },
          end: {
            line: 225,
            column: 28
          }
        }, {
          start: {
            line: 225,
            column: 32
          },
          end: {
            line: 225,
            column: 34
          }
        }],
        line: 225
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/lib/api/client.ts"],
      sourcesContent: ["import { appLogger } from '@/lib/monitoring/logger.config';\nimport type { ApiError } from '@/types/api.types';\n\n// API Configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001/api';\nconst REQUEST_TIMEOUT = 10000; // 10 seconds\n\n// Custom Error Classes\nexport class ApiClientError extends Error {\n  public readonly status: number;\n  public readonly code: string;\n  public readonly details?: Record<string, unknown>;\n\n  constructor(message: string, status: number, code: string, details?: Record<string, unknown>) {\n    super(message);\n    this.name = 'ApiClientError';\n    this.status = status;\n    this.code = code;\n    if (details !== undefined) {\n      this.details = details;\n    }\n  }\n}\n\nexport class NetworkError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class TimeoutError extends Error {\n  constructor() {\n    super('Request timeout');\n    this.name = 'TimeoutError';\n  }\n}\n\n// Request/Response Types\ninterface RequestConfig {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  data?: unknown;\n  headers: Record<string, string>;\n  timeout?: number;\n}\n\n// API Client Class\nclass ApiClient {\n  private baseURL: string;\n  private defaultTimeout: number;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseURL: string, timeout: number = REQUEST_TIMEOUT) {\n    this.baseURL = baseURL;\n    this.defaultTimeout = timeout;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n  }\n\n  // Set authentication token\n  public setAuthToken(token: string): void {\n    this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Remove authentication token\n  public clearAuthToken(): void {\n    delete this.defaultHeaders['Authorization'];\n  }\n\n  // Request interceptor\n  private async prepareRequest(config: RequestConfig): Promise<RequestConfig> {\n    const requestId = Math.random().toString(36).substring(7);\n    \n    appLogger.debug('API request starting', {\n      requestId,\n      method: config.method,\n      url: config.url,\n      hasData: !!config.data,\n    });\n\n    // Merge headers\n    const headers = {\n      ...this.defaultHeaders,\n      ...(config.headers || {}),\n      'X-Request-ID': requestId,\n    };\n\n    return {\n      ...config,\n      headers,\n      timeout: config.timeout || this.defaultTimeout,\n    };\n  }\n\n  // Response interceptor\n  private async handleResponse<T>(\n    response: Response,\n    requestId: string,\n    startTime: number\n  ): Promise<T> {\n    const duration = Date.now() - startTime;\n\n    if (!response.ok) {\n      let errorData: ApiError;\n      \n      try {\n        const rawError = await response.json();\n        // Check if it has the expected error structure\n        if (rawError.error && typeof rawError.error === 'object') {\n          errorData = rawError as ApiError;\n        } else {\n          throw new Error('Invalid error format');\n        }\n      } catch {\n        // Fallback for non-JSON error responses\n        errorData = {\n          success: false,\n          error: {\n            code: `HTTP_${response.status}`,\n            message: response.statusText || 'Unknown error',\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      appLogger.error('API request failed', {\n        requestId,\n        status: response.status,\n        errorCode: errorData.error.code,\n        errorMessage: errorData.error.message,\n        duration,\n      });\n\n      throw new ApiClientError(\n        errorData.error.message,\n        response.status,\n        errorData.error.code,\n        errorData.error.details\n      );\n    }\n\n    const data = await response.json();\n\n    appLogger.debug('API request completed', {\n      requestId,\n      duration,\n    });\n\n    return data;\n  }\n\n  // Core request method\n  public async request<T>(config: Omit<RequestConfig, 'headers'> & { headers?: Record<string, string> }): Promise<T> {\n    const startTime = Date.now();\n    const preparedConfig = await this.prepareRequest({\n      ...config,\n      headers: config.headers || {},\n    } as RequestConfig);\n    const requestId = preparedConfig.headers['X-Request-ID'] as string;\n\n    try {\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), preparedConfig.timeout);\n\n      const fetchOptions: RequestInit = {\n        method: preparedConfig.method,\n        headers: preparedConfig.headers,\n        signal: controller.signal,\n      };\n      \n      if (preparedConfig.data) {\n        fetchOptions.body = JSON.stringify(preparedConfig.data);\n      }\n      \n      const response = await fetch(`${this.baseURL}${preparedConfig.url}`, fetchOptions);\n\n      clearTimeout(timeoutId);\n\n      return await this.handleResponse<T>(response, requestId, startTime);\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          appLogger.error('API request timeout', { requestId, duration });\n          throw new TimeoutError();\n        }\n\n        if (error.name === 'TypeError' || error.message.includes('Network')) {\n          appLogger.error('Network error during API request', { requestId, error: error.message, duration });\n          throw new NetworkError('Network connection failed');\n        }\n      }\n\n      // Re-throw API client errors\n      if (error instanceof ApiClientError) {\n        throw error;\n      }\n\n      // Log unknown errors\n      appLogger.error('API request unknown error', {\n        requestId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration,\n      });\n\n      throw error;\n    }\n  }\n\n  // HTTP Methods\n  public async get<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'GET', url, headers: headers || {} });\n  }\n\n  public async post<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'POST', url, data, headers: headers || {} });\n  }\n\n  public async put<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PUT', url, data, headers: headers || {} });\n  }\n\n  public async patch<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PATCH', url, data, headers: headers || {} });\n  }\n\n  public async delete<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'DELETE', url, headers: headers || {} });\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient(API_BASE_URL);\n\n// Export types and errors\nexport type { RequestConfig };\nexport { ApiClient };"],
      names: ["ApiClient", "ApiClientError", "NetworkError", "TimeoutError", "apiClient", "API_BASE_URL", "process", "env", "NEXT_PUBLIC_API_BASE_URL", "REQUEST_TIMEOUT", "Error", "message", "status", "code", "details", "name", "undefined", "baseURL", "timeout", "defaultTimeout", "defaultHeaders", "setAuthToken", "token", "clearAuthToken", "prepareRequest", "config", "requestId", "Math", "random", "toString", "substring", "appLogger", "debug", "method", "url", "hasData", "data", "headers", "handleResponse", "response", "startTime", "duration", "Date", "now", "ok", "errorData", "rawError", "json", "error", "success", "statusText", "timestamp", "toISOString", "errorCode", "errorMessage", "request", "preparedConfig", "controller", "AbortController", "timeoutId", "setTimeout", "abort", "fetchOptions", "signal", "body", "JSON", "stringify", "fetch", "clearTimeout", "includes", "get", "post", "put", "patch", "delete"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e97e19bd23a07966ab696b537198f3566c2d2c96"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1cq6yxthqw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1cq6yxthqw();
cov_1cq6yxthqw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1cq6yxthqw().f[0]++;
  cov_1cq6yxthqw().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1cq6yxthqw().s[3]++;
_export(exports, {
  get ApiClient() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[1]++;
    cov_1cq6yxthqw().s[4]++;
    return ApiClient;
  },
  get ApiClientError() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[2]++;
    cov_1cq6yxthqw().s[5]++;
    return ApiClientError;
  },
  get NetworkError() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[3]++;
    cov_1cq6yxthqw().s[6]++;
    return NetworkError;
  },
  get TimeoutError() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[4]++;
    cov_1cq6yxthqw().s[7]++;
    return TimeoutError;
  },
  get apiClient() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[5]++;
    cov_1cq6yxthqw().s[8]++;
    return apiClient;
  }
});
const _loggerconfig =
/* istanbul ignore next */
(cov_1cq6yxthqw().s[9]++, require("../monitoring/logger.config"));
// API Configuration
const API_BASE_URL =
/* istanbul ignore next */
(cov_1cq6yxthqw().s[10]++,
/* istanbul ignore next */
(cov_1cq6yxthqw().b[0][0]++, process.env.NEXT_PUBLIC_API_BASE_URL) ||
/* istanbul ignore next */
(cov_1cq6yxthqw().b[0][1]++, 'http://localhost:3001/api'));
const REQUEST_TIMEOUT =
/* istanbul ignore next */
(cov_1cq6yxthqw().s[11]++, 10000); // 10 seconds
class ApiClientError extends Error {
  constructor(message, status, code, details) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[6]++;
    cov_1cq6yxthqw().s[12]++;
    super(message);
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[13]++;
    this.name = 'ApiClientError';
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[14]++;
    this.status = status;
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[15]++;
    this.code = code;
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[16]++;
    if (details !== undefined) {
      /* istanbul ignore next */
      cov_1cq6yxthqw().b[1][0]++;
      cov_1cq6yxthqw().s[17]++;
      this.details = details;
    } else
    /* istanbul ignore next */
    {
      cov_1cq6yxthqw().b[1][1]++;
    }
  }
}
class NetworkError extends Error {
  constructor(message) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[7]++;
    cov_1cq6yxthqw().s[18]++;
    super(message);
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[19]++;
    this.name = 'NetworkError';
  }
}
class TimeoutError extends Error {
  constructor() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[8]++;
    cov_1cq6yxthqw().s[20]++;
    super('Request timeout');
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[21]++;
    this.name = 'TimeoutError';
  }
}
// API Client Class
class ApiClient {
  constructor(baseURL, timeout =
  /* istanbul ignore next */
  (cov_1cq6yxthqw().b[2][0]++, REQUEST_TIMEOUT)) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[9]++;
    cov_1cq6yxthqw().s[22]++;
    this.baseURL = baseURL;
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[23]++;
    this.defaultTimeout = timeout;
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[24]++;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    };
  }
  // Set authentication token
  setAuthToken(token) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[10]++;
    cov_1cq6yxthqw().s[25]++;
    this.defaultHeaders['Authorization'] = `Bearer ${token}`;
  }
  // Remove authentication token
  clearAuthToken() {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[11]++;
    cov_1cq6yxthqw().s[26]++;
    delete this.defaultHeaders['Authorization'];
  }
  // Request interceptor
  async prepareRequest(config) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[12]++;
    const requestId =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[27]++, Math.random().toString(36).substring(7));
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[28]++;
    _loggerconfig.appLogger.debug('API request starting', {
      requestId,
      method: config.method,
      url: config.url,
      hasData: !!config.data
    });
    // Merge headers
    const headers =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[29]++, {
      ...this.defaultHeaders,
      ...(
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[3][0]++, config.headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[3][1]++, {})),
      'X-Request-ID': requestId
    });
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[30]++;
    return {
      ...config,
      headers,
      timeout:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[4][0]++, config.timeout) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[4][1]++, this.defaultTimeout)
    };
  }
  // Response interceptor
  async handleResponse(response, requestId, startTime) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[13]++;
    const duration =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[31]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[32]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1cq6yxthqw().b[5][0]++;
      let errorData;
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[33]++;
      try {
        const rawError =
        /* istanbul ignore next */
        (cov_1cq6yxthqw().s[34]++, await response.json());
        // Check if it has the expected error structure
        /* istanbul ignore next */
        cov_1cq6yxthqw().s[35]++;
        if (
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[7][0]++, rawError.error) &&
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[7][1]++, typeof rawError.error === 'object')) {
          /* istanbul ignore next */
          cov_1cq6yxthqw().b[6][0]++;
          cov_1cq6yxthqw().s[36]++;
          errorData = rawError;
        } else {
          /* istanbul ignore next */
          cov_1cq6yxthqw().b[6][1]++;
          cov_1cq6yxthqw().s[37]++;
          throw new Error('Invalid error format');
        }
      } catch {
        /* istanbul ignore next */
        cov_1cq6yxthqw().s[38]++;
        // Fallback for non-JSON error responses
        errorData = {
          success: false,
          error: {
            code: `HTTP_${response.status}`,
            message:
            /* istanbul ignore next */
            (cov_1cq6yxthqw().b[8][0]++, response.statusText) ||
            /* istanbul ignore next */
            (cov_1cq6yxthqw().b[8][1]++, 'Unknown error')
          },
          timestamp: new Date().toISOString()
        };
      }
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[39]++;
      _loggerconfig.appLogger.error('API request failed', {
        requestId,
        status: response.status,
        errorCode: errorData.error.code,
        errorMessage: errorData.error.message,
        duration
      });
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[40]++;
      throw new ApiClientError(errorData.error.message, response.status, errorData.error.code, errorData.error.details);
    } else
    /* istanbul ignore next */
    {
      cov_1cq6yxthqw().b[5][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[41]++, await response.json());
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[42]++;
    _loggerconfig.appLogger.debug('API request completed', {
      requestId,
      duration
    });
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[43]++;
    return data;
  }
  // Core request method
  async request(config) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[14]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[44]++, Date.now());
    const preparedConfig =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[45]++, await this.prepareRequest({
      ...config,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[9][0]++, config.headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[9][1]++, {})
    }));
    const requestId =
    /* istanbul ignore next */
    (cov_1cq6yxthqw().s[46]++, preparedConfig.headers['X-Request-ID']);
    /* istanbul ignore next */
    cov_1cq6yxthqw().s[47]++;
    try {
      // Create AbortController for timeout
      const controller =
      /* istanbul ignore next */
      (cov_1cq6yxthqw().s[48]++, new AbortController());
      const timeoutId =
      /* istanbul ignore next */
      (cov_1cq6yxthqw().s[49]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_1cq6yxthqw().f[15]++;
        cov_1cq6yxthqw().s[50]++;
        return controller.abort();
      }, preparedConfig.timeout));
      const fetchOptions =
      /* istanbul ignore next */
      (cov_1cq6yxthqw().s[51]++, {
        method: preparedConfig.method,
        headers: preparedConfig.headers,
        signal: controller.signal
      });
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[52]++;
      if (preparedConfig.data) {
        /* istanbul ignore next */
        cov_1cq6yxthqw().b[10][0]++;
        cov_1cq6yxthqw().s[53]++;
        fetchOptions.body = JSON.stringify(preparedConfig.data);
      } else
      /* istanbul ignore next */
      {
        cov_1cq6yxthqw().b[10][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1cq6yxthqw().s[54]++, await fetch(`${this.baseURL}${preparedConfig.url}`, fetchOptions));
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[55]++;
      clearTimeout(timeoutId);
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[56]++;
      return await this.handleResponse(response, requestId, startTime);
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_1cq6yxthqw().s[57]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[58]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_1cq6yxthqw().b[11][0]++;
        cov_1cq6yxthqw().s[59]++;
        if (error.name === 'AbortError') {
          /* istanbul ignore next */
          cov_1cq6yxthqw().b[12][0]++;
          cov_1cq6yxthqw().s[60]++;
          _loggerconfig.appLogger.error('API request timeout', {
            requestId,
            duration
          });
          /* istanbul ignore next */
          cov_1cq6yxthqw().s[61]++;
          throw new TimeoutError();
        } else
        /* istanbul ignore next */
        {
          cov_1cq6yxthqw().b[12][1]++;
        }
        cov_1cq6yxthqw().s[62]++;
        if (
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[14][0]++, error.name === 'TypeError') ||
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[14][1]++, error.message.includes('Network'))) {
          /* istanbul ignore next */
          cov_1cq6yxthqw().b[13][0]++;
          cov_1cq6yxthqw().s[63]++;
          _loggerconfig.appLogger.error('Network error during API request', {
            requestId,
            error: error.message,
            duration
          });
          /* istanbul ignore next */
          cov_1cq6yxthqw().s[64]++;
          throw new NetworkError('Network connection failed');
        } else
        /* istanbul ignore next */
        {
          cov_1cq6yxthqw().b[13][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1cq6yxthqw().b[11][1]++;
      }
      // Re-throw API client errors
      cov_1cq6yxthqw().s[65]++;
      if (error instanceof ApiClientError) {
        /* istanbul ignore next */
        cov_1cq6yxthqw().b[15][0]++;
        cov_1cq6yxthqw().s[66]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1cq6yxthqw().b[15][1]++;
      }
      // Log unknown errors
      cov_1cq6yxthqw().s[67]++;
      _loggerconfig.appLogger.error('API request unknown error', {
        requestId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1cq6yxthqw().b[16][1]++, 'Unknown error'),
        duration
      });
      /* istanbul ignore next */
      cov_1cq6yxthqw().s[68]++;
      throw error;
    }
  }
  // HTTP Methods
  async get(url, headers) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[16]++;
    cov_1cq6yxthqw().s[69]++;
    return this.request({
      method: 'GET',
      url,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[17][0]++, headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[17][1]++, {})
    });
  }
  async post(url, data, headers) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[17]++;
    cov_1cq6yxthqw().s[70]++;
    return this.request({
      method: 'POST',
      url,
      data,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[18][0]++, headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[18][1]++, {})
    });
  }
  async put(url, data, headers) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[18]++;
    cov_1cq6yxthqw().s[71]++;
    return this.request({
      method: 'PUT',
      url,
      data,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[19][0]++, headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[19][1]++, {})
    });
  }
  async patch(url, data, headers) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[19]++;
    cov_1cq6yxthqw().s[72]++;
    return this.request({
      method: 'PATCH',
      url,
      data,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[20][0]++, headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[20][1]++, {})
    });
  }
  async delete(url, headers) {
    /* istanbul ignore next */
    cov_1cq6yxthqw().f[20]++;
    cov_1cq6yxthqw().s[73]++;
    return this.request({
      method: 'DELETE',
      url,
      headers:
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[21][0]++, headers) ||
      /* istanbul ignore next */
      (cov_1cq6yxthqw().b[21][1]++, {})
    });
  }
}
const apiClient =
/* istanbul ignore next */
(cov_1cq6yxthqw().s[74]++, new ApiClient(API_BASE_URL));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,