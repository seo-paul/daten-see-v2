{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/config.ts"],"sourcesContent":["/**\n * TanStack Query Configuration\n * Optimized stale-while-revalidate settings for performance\n */\n\nimport { QueryClient } from '@tanstack/react-query';\n\n/**\n * Optimized query configurations for different data types\n */\nexport const QUERY_CONFIG = {\n  // Fast-changing data (user interactions, real-time data)\n  REALTIME: {\n    staleTime: 0, // Always considered stale\n    gcTime: 5 * 60 * 1000, // 5 minutes in cache\n    refetchOnWindowFocus: true,\n    refetchInterval: 30 * 1000, // 30 seconds\n  },\n\n  // Medium-changing data (dashboard lists, user profiles)\n  DYNAMIC: {\n    staleTime: 2 * 60 * 1000, // 2 minutes fresh\n    gcTime: 10 * 60 * 1000, // 10 minutes in cache\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n  },\n\n  // Slow-changing data (settings, configurations)\n  STATIC: {\n    staleTime: 15 * 60 * 1000, // 15 minutes fresh\n    gcTime: 60 * 60 * 1000, // 1 hour in cache\n    refetchOnWindowFocus: false,\n    refetchInterval: false,\n  },\n\n  // Critical data (authentication, permissions)\n  CRITICAL: {\n    staleTime: 30 * 1000, // 30 seconds fresh\n    gcTime: 5 * 60 * 1000, // 5 minutes in cache\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchInterval: 60 * 1000, // 1 minute\n  },\n\n  // Background data (analytics, logs)\n  BACKGROUND: {\n    staleTime: 5 * 60 * 1000, // 5 minutes fresh\n    gcTime: 30 * 60 * 1000, // 30 minutes in cache\n    refetchOnWindowFocus: false,\n    refetchInterval: 5 * 60 * 1000, // 5 minutes\n  },\n} as const;\n\n/**\n * Create production-optimized QueryClient\n */\nexport function createOptimizedQueryClient(): QueryClient {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        // Default to DYNAMIC config for most use cases\n        staleTime: QUERY_CONFIG.DYNAMIC.staleTime,\n        gcTime: QUERY_CONFIG.DYNAMIC.gcTime,\n        \n        // Network optimization\n        refetchOnWindowFocus: true,\n        refetchOnReconnect: true,\n        refetchOnMount: true,\n        \n        // Error handling\n        retry: (failureCount: number, error: Error): boolean => {\n          // Don't retry on 404s or authentication errors\n          if ((error as { status?: number })?.status === 404 || (error as { status?: number })?.status === 401) {\n            return false;\n          }\n          // Retry up to 3 times for other errors\n          return failureCount < 3;\n        },\n        retryDelay: (attemptIndex: number): number => Math.min(1000 * 2 ** attemptIndex, 30000),\n        \n        // Performance optimization - keep previous data while fetching new data\n        placeholderData: (previousData: unknown) => previousData,\n        \n        // Additional stale-while-revalidate behavior\n        // Note: staleTime and gcTime already set above\n      },\n      mutations: {\n        retry: 1, // Only retry mutations once\n        retryDelay: 1000,\n      },\n    },\n  });\n}\n\n/**\n * Query key factory for consistent naming\n */\nexport const queryKeys = {\n  // Authentication\n  auth: ['auth'] as const,\n  authUser: () => [...queryKeys.auth, 'user'] as const,\n  \n  // Dashboards\n  dashboards: ['dashboards'] as const,\n  dashboardsList: () => [...queryKeys.dashboards, 'list'] as const,\n  dashboard: (id: string) => [...queryKeys.dashboards, 'detail', id] as const,\n  \n  // Analytics (future)\n  analytics: ['analytics'] as const,\n  \n  // Settings\n  settings: ['settings'] as const,\n  userSettings: (userId: string) => [...queryKeys.settings, 'user', userId] as const,\n} as const;\n\n/**\n * Specialized query options for different data types\n */\nexport const createQueryOptions = {\n  /**\n   * For dashboard data - medium update frequency\n   */\n  dashboard: (id?: string): Record<string, unknown> => ({\n    ...QUERY_CONFIG.DYNAMIC,\n    queryKey: id ? queryKeys.dashboard(id) : queryKeys.dashboardsList(),\n  }),\n\n  /**\n   * For authentication data - high security, frequent checks\n   */\n  auth: (): Record<string, unknown> => ({\n    ...QUERY_CONFIG.CRITICAL,\n    queryKey: queryKeys.authUser(),\n  }),\n\n  /**\n   * For settings data - infrequent updates\n   */\n  settings: (userId?: string): Record<string, unknown> => ({\n    ...QUERY_CONFIG.STATIC,\n    queryKey: userId ? queryKeys.userSettings(userId) : queryKeys.settings,\n  }),\n\n  /**\n   * For real-time analytics - frequent updates\n   */\n  analytics: (): Record<string, unknown> => ({\n    ...QUERY_CONFIG.REALTIME,\n    queryKey: queryKeys.analytics,\n  }),\n};\n\n/**\n * Network status detection for adaptive behavior\n */\nexport function getNetworkOptimizedConfig(): Record<string, unknown> {\n  // Check if we're in a slow network environment\n  const connection = (navigator as unknown as Record<string, unknown>)?.connection as Record<string, string> | undefined;\n  const isSlowNetwork = connection?.effectiveType === '2g' || connection?.effectiveType === 'slow-2g';\n  \n  if (isSlowNetwork) {\n    return {\n      staleTime: 5 * 60 * 1000, // Keep data fresh longer on slow networks\n      gcTime: 30 * 60 * 1000, // Cache longer\n      refetchOnWindowFocus: false, // Reduce network requests\n    };\n  }\n  \n  return QUERY_CONFIG.DYNAMIC;\n}\n\n/**\n * Development-specific query client with debugging\n */\nexport function createDevQueryClient(): QueryClient {\n  const client = createOptimizedQueryClient();\n  \n  if (process.env.NODE_ENV === 'development') {\n    // Enable React Query DevTools logging\n    client.setMutationDefaults(['debug'], {\n      onSuccess: () => {\n        if (process.env.NODE_ENV === 'development') {\n          // Mutation success\n        }\n      },\n      onError: () => {\n        if (process.env.NODE_ENV === 'development') {\n          // Mutation error\n        }\n      },\n    });\n  }\n  \n  return client;\n}"],"names":["QUERY_CONFIG","createDevQueryClient","createOptimizedQueryClient","createQueryOptions","getNetworkOptimizedConfig","queryKeys","REALTIME","staleTime","gcTime","refetchOnWindowFocus","refetchInterval","DYNAMIC","STATIC","CRITICAL","refetchOnMount","BACKGROUND","QueryClient","defaultOptions","queries","refetchOnReconnect","retry","failureCount","error","status","retryDelay","attemptIndex","Math","min","placeholderData","previousData","mutations","auth","authUser","dashboards","dashboardsList","dashboard","id","analytics","settings","userSettings","userId","queryKey","connection","navigator","isSlowNetwork","effectiveType","client","process","env","NODE_ENV","setMutationDefaults","onSuccess","onError"],"mappings":"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"}