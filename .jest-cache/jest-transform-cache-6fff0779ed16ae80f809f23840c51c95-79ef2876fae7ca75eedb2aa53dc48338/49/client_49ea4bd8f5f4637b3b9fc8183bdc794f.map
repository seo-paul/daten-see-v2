{"version":3,"names":["ApiClient","cov_1cq6yxthqw","f","s","ApiClientError","NetworkError","TimeoutError","apiClient","API_BASE_URL","b","process","env","NEXT_PUBLIC_API_BASE_URL","REQUEST_TIMEOUT","Error","constructor","message","status","code","details","name","undefined","baseURL","timeout","defaultTimeout","defaultHeaders","setAuthToken","token","clearAuthToken","prepareRequest","config","requestId","Math","random","toString","substring","_loggerconfig","appLogger","debug","method","url","hasData","data","headers","handleResponse","response","startTime","duration","Date","now","ok","errorData","rawError","json","error","success","statusText","timestamp","toISOString","errorCode","errorMessage","request","preparedConfig","controller","AbortController","timeoutId","setTimeout","abort","fetchOptions","signal","body","JSON","stringify","fetch","clearTimeout","includes","get","post","put","patch","delete"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/client.ts"],"sourcesContent":["import { appLogger } from '@/lib/monitoring/logger.config';\nimport type { ApiError } from '@/types/api.types';\n\n// API Configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001/api';\nconst REQUEST_TIMEOUT = 10000; // 10 seconds\n\n// Custom Error Classes\nexport class ApiClientError extends Error {\n  public readonly status: number;\n  public readonly code: string;\n  public readonly details?: Record<string, unknown>;\n\n  constructor(message: string, status: number, code: string, details?: Record<string, unknown>) {\n    super(message);\n    this.name = 'ApiClientError';\n    this.status = status;\n    this.code = code;\n    if (details !== undefined) {\n      this.details = details;\n    }\n  }\n}\n\nexport class NetworkError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class TimeoutError extends Error {\n  constructor() {\n    super('Request timeout');\n    this.name = 'TimeoutError';\n  }\n}\n\n// Request/Response Types\ninterface RequestConfig {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  data?: unknown;\n  headers: Record<string, string>;\n  timeout?: number;\n}\n\n// API Client Class\nclass ApiClient {\n  private baseURL: string;\n  private defaultTimeout: number;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseURL: string, timeout: number = REQUEST_TIMEOUT) {\n    this.baseURL = baseURL;\n    this.defaultTimeout = timeout;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n  }\n\n  // Set authentication token\n  public setAuthToken(token: string): void {\n    this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Remove authentication token\n  public clearAuthToken(): void {\n    delete this.defaultHeaders['Authorization'];\n  }\n\n  // Request interceptor\n  private async prepareRequest(config: RequestConfig): Promise<RequestConfig> {\n    const requestId = Math.random().toString(36).substring(7);\n    \n    appLogger.debug('API request starting', {\n      requestId,\n      method: config.method,\n      url: config.url,\n      hasData: !!config.data,\n    });\n\n    // Merge headers\n    const headers = {\n      ...this.defaultHeaders,\n      ...(config.headers || {}),\n      'X-Request-ID': requestId,\n    };\n\n    return {\n      ...config,\n      headers,\n      timeout: config.timeout || this.defaultTimeout,\n    };\n  }\n\n  // Response interceptor\n  private async handleResponse<T>(\n    response: Response,\n    requestId: string,\n    startTime: number\n  ): Promise<T> {\n    const duration = Date.now() - startTime;\n\n    if (!response.ok) {\n      let errorData: ApiError;\n      \n      try {\n        const rawError = await response.json();\n        // Check if it has the expected error structure\n        if (rawError.error && typeof rawError.error === 'object') {\n          errorData = rawError as ApiError;\n        } else {\n          throw new Error('Invalid error format');\n        }\n      } catch {\n        // Fallback for non-JSON error responses\n        errorData = {\n          success: false,\n          error: {\n            code: `HTTP_${response.status}`,\n            message: response.statusText || 'Unknown error',\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      appLogger.error('API request failed', {\n        requestId,\n        status: response.status,\n        errorCode: errorData.error.code,\n        errorMessage: errorData.error.message,\n        duration,\n      });\n\n      throw new ApiClientError(\n        errorData.error.message,\n        response.status,\n        errorData.error.code,\n        errorData.error.details\n      );\n    }\n\n    const data = await response.json();\n\n    appLogger.debug('API request completed', {\n      requestId,\n      duration,\n    });\n\n    return data;\n  }\n\n  // Core request method\n  public async request<T>(config: Omit<RequestConfig, 'headers'> & { headers?: Record<string, string> }): Promise<T> {\n    const startTime = Date.now();\n    const preparedConfig = await this.prepareRequest({\n      ...config,\n      headers: config.headers || {},\n    } as RequestConfig);\n    const requestId = preparedConfig.headers['X-Request-ID'] as string;\n\n    try {\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), preparedConfig.timeout);\n\n      const fetchOptions: RequestInit = {\n        method: preparedConfig.method,\n        headers: preparedConfig.headers,\n        signal: controller.signal,\n      };\n      \n      if (preparedConfig.data) {\n        fetchOptions.body = JSON.stringify(preparedConfig.data);\n      }\n      \n      const response = await fetch(`${this.baseURL}${preparedConfig.url}`, fetchOptions);\n\n      clearTimeout(timeoutId);\n\n      return await this.handleResponse<T>(response, requestId, startTime);\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          appLogger.error('API request timeout', { requestId, duration });\n          throw new TimeoutError();\n        }\n\n        if (error.name === 'TypeError' || error.message.includes('Network')) {\n          appLogger.error('Network error during API request', { requestId, error: error.message, duration });\n          throw new NetworkError('Network connection failed');\n        }\n      }\n\n      // Re-throw API client errors\n      if (error instanceof ApiClientError) {\n        throw error;\n      }\n\n      // Log unknown errors\n      appLogger.error('API request unknown error', {\n        requestId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration,\n      });\n\n      throw error;\n    }\n  }\n\n  // HTTP Methods\n  public async get<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'GET', url, headers: headers || {} });\n  }\n\n  public async post<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'POST', url, data, headers: headers || {} });\n  }\n\n  public async put<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PUT', url, data, headers: headers || {} });\n  }\n\n  public async patch<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PATCH', url, data, headers: headers || {} });\n  }\n\n  public async delete<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'DELETE', url, headers: headers || {} });\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient(API_BASE_URL);\n\n// Export types and errors\nexport type { RequestConfig };\nexport { ApiClient };"],"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","ignoreList":[]}