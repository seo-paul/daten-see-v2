{"version":3,"names":["PerformanceMonitor","cov_1hcoqwp1hd","f","s","reportWebVitals","usePerformanceMonitor","THRESHOLDS","CLS","good","poor","FID","FCP","LCP","TTFB","INP","getRating","name","value","threshold","b","metric","rating","process","env","NODE_ENV","_loggerconfig","appLogger","performance","metadata","id","delta","_nextjs","addBreadcrumb","message","level","data","category","setMeasurement","warn","marks","Map","mark","timestamp","now","set","debug","measure","context","endTime","startTime","get","duration","Math","round","delete","checkMemory","window","memory","memoryInfo","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","usage","info","trackApiCall","apiCall","result","error","Error","String","componentName","markStart","operation","markEnd","component","trackAsync","asyncFn"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/monitoring/performance.ts"],"sourcesContent":["import * as Sentry from '@sentry/nextjs';\n\nimport { appLogger } from './logger.config';\n\n// Core Web Vitals tracking\nexport interface WebVitalsMetric {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  delta: number;\n  id: string;\n}\n\n// Performance thresholds based on Google's Core Web Vitals\nconst THRESHOLDS = {\n  CLS: { good: 0.1, poor: 0.25 },\n  FID: { good: 100, poor: 300 },\n  FCP: { good: 1800, poor: 3000 },\n  LCP: { good: 2500, poor: 4000 },\n  TTFB: { good: 800, poor: 1800 },\n  INP: { good: 200, poor: 500 },\n};\n\n// Get performance rating\nfunction getRating(name: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const threshold = THRESHOLDS[name as keyof typeof THRESHOLDS];\n  if (!threshold) return 'good';\n  \n  if (value <= threshold.good) return 'good';\n  if (value <= threshold.poor) return 'needs-improvement';\n  return 'poor';\n}\n\n// Enhanced Web Vitals reporting\nexport function reportWebVitals(metric: WebVitalsMetric): void {\n  const rating = getRating(metric.name, metric.value);\n  \n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    appLogger.performance(`Web Vital: ${metric.name}`, metric.value, {\n      metadata: {\n        rating,\n        id: metric.id,\n        delta: metric.delta,\n      },\n    });\n  }\n  \n  // Send to Sentry\n  Sentry.addBreadcrumb({\n    message: `Web Vital: ${metric.name}`,\n    level: rating === 'poor' ? 'error' : rating === 'needs-improvement' ? 'warning' : 'info',\n    data: {\n      value: metric.value,\n      rating,\n      id: metric.id,\n      delta: metric.delta,\n    },\n    category: 'web-vitals',\n  });\n  \n  // Send performance data to Sentry as measurement\n  Sentry.setMeasurement(metric.name, metric.value, 'millisecond');\n  \n  // Alert on poor performance\n  if (rating === 'poor') {\n    appLogger.warn(`Poor Web Vital detected: ${metric.name}`, {\n      metadata: {\n        value: metric.value,\n        threshold: THRESHOLDS[metric.name as keyof typeof THRESHOLDS]?.poor,\n        id: metric.id,\n      },\n    });\n  }\n}\n\n// Performance monitoring utilities\nexport class PerformanceMonitor {\n  private static marks = new Map<string, number>();\n  \n  // Start performance measurement\n  static mark(name: string): void {\n    const timestamp = performance.now();\n    this.marks.set(name, timestamp);\n    \n    if (process.env.NODE_ENV === 'development') {\n      appLogger.debug(`Performance mark: ${name}`, {\n        metadata: { timestamp },\n      });\n    }\n  }\n  \n  // End performance measurement\n  static measure(name: string, context?: Record<string, unknown>): number {\n    const endTime = performance.now();\n    const startTime = this.marks.get(name);\n    \n    if (!startTime) {\n      appLogger.warn(`Performance mark '${name}' not found`);\n      return 0;\n    }\n    \n    const duration = Math.round(endTime - startTime);\n    this.marks.delete(name);\n    \n    // Log performance measurement\n    appLogger.performance(name, duration, {\n      metadata: context,\n    });\n    \n    // Send to Sentry if duration is concerning\n    if (duration > 1000) { // Over 1 second\n      Sentry.addBreadcrumb({\n        message: `Slow operation: ${name}`,\n        level: 'warning',\n        data: { duration, ...context },\n        category: 'performance',\n      });\n    }\n    \n    return duration;\n  }\n  \n  // Memory usage monitoring\n  static checkMemory(): void {\n    if (typeof window !== 'undefined' && 'memory' in performance) {\n      const { memory } = (performance as { memory: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } });\n      const memoryInfo = {\n        used: Math.round(memory.usedJSHeapSize / 1048576), // MB\n        total: Math.round(memory.totalJSHeapSize / 1048576), // MB\n        limit: Math.round(memory.jsHeapSizeLimit / 1048576), // MB\n        usage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100), // %\n      };\n      \n      appLogger.info('Memory usage check', {\n        metadata: memoryInfo,\n      });\n      \n      // Alert on high memory usage\n      if (memoryInfo.usage > 80) {\n        appLogger.warn('High memory usage detected', {\n          metadata: memoryInfo,\n        });\n        \n        Sentry.addBreadcrumb({\n          message: 'High memory usage',\n          level: 'warning',\n          data: memoryInfo,\n          category: 'performance',\n        });\n      }\n    }\n  }\n  \n  // API call performance tracking\n  static async trackApiCall<T>(\n    name: string, \n    apiCall: () => Promise<T>,\n    context?: Record<string, unknown>\n  ): Promise<T> {\n    const startTime = performance.now();\n    \n    try {\n      const result = await apiCall();\n      const duration = Math.round(performance.now() - startTime);\n      \n      appLogger.apiCall('GET', name, duration, 200, context);\n      \n      return result;\n    } catch (error) {\n      const duration = Math.round(performance.now() - startTime);\n      \n      appLogger.apiCall('GET', name, duration, 500, {\n        ...context,\n        error: error instanceof Error ? error : new Error(String(error)),\n      });\n      \n      throw error;\n    }\n  }\n}\n\n// Hook for React component performance tracking\nexport function usePerformanceMonitor(componentName: string): {\n  markStart: (operation: string) => void;\n  markEnd: (operation: string, context?: Record<string, unknown>) => number;\n  trackAsync: <T>(operation: string, asyncFn: () => Promise<T>) => Promise<T>;\n} {\n  return {\n    markStart: (operation: string): void => {\n      PerformanceMonitor.mark(`${componentName}.${operation}`);\n    },\n    markEnd: (operation: string, context?: Record<string, unknown>): number => {\n      return PerformanceMonitor.measure(`${componentName}.${operation}`, {\n        component: componentName,\n        ...context,\n      });\n    },\n    trackAsync: <T>(operation: string, asyncFn: () => Promise<T>): Promise<T> => {\n      return PerformanceMonitor.trackApiCall(\n        `${componentName}.${operation}`,\n        asyncFn,\n        { component: componentName }\n      );\n    },\n  };\n}"],"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","ignoreList":[]}