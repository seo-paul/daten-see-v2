70f4e521f4cd01fc9a6bc220d9f2639d
/**
 * TanStack Query Cache Management Tests
 * 80% Coverage for Cache Operations - Critical Business Logic
 * 
 * Test Categories:
 * 1. Query Cache Invalidation & Refetching (5 tests)
 * 2. Cache Time & Stale-While-Revalidate (4 tests)  
 * 3. Network-Aware Cache Management (3 tests)
 * 4. Optimistic Updates & Cache Mutations (4 tests)
 * 5. Cache Persistence & Garbage Collection (4 tests)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _reactquery = require("@tanstack/react-query");
const _config = require("../config");
// Mock navigator.connection for network tests
const mockConnection = {
    effectiveType: '4g',
    downlink: 10
};
Object.defineProperty(navigator, 'connection', {
    writable: true,
    value: mockConnection
});
describe('TanStack Query Cache Management Tests - 80% Cache Coverage', ()=>{
    let queryClient;
    let queryCache;
    let mutationCache;
    beforeEach(()=>{
        queryClient = (0, _config.createOptimizedQueryClient)();
        queryCache = queryClient.getQueryCache();
        mutationCache = queryClient.getMutationCache();
        // Clear all caches
        queryClient.clear();
        jest.clearAllMocks();
    });
    afterEach(()=>{
        queryClient.clear();
    });
    describe('Query Cache Invalidation & Refetching', ()=>{
        it('should invalidate dashboard queries and trigger refetch', async ()=>{
            const mockData = [
                {
                    id: '1',
                    name: 'Test Dashboard'
                }
            ];
            // Set initial cache data
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), mockData);
            // Verify data is cached
            const cachedData = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(cachedData).toEqual(mockData);
            // Invalidate queries
            await queryClient.invalidateQueries({
                queryKey: _config.queryKeys.dashboards
            });
            // Verify cache state changed
            const query = queryCache.find({
                queryKey: _config.queryKeys.dashboardsList()
            });
            expect(query?.state.isInvalidated).toBe(true);
        });
        it('should invalidate specific dashboard by ID', async ()=>{
            const dashboardId = 'dashboard-123';
            const mockDashboard = {
                id: dashboardId,
                name: 'Test Dashboard'
            };
            // Cache dashboard data
            queryClient.setQueryData(_config.queryKeys.dashboard(dashboardId), mockDashboard);
            // Invalidate specific dashboard
            await queryClient.invalidateQueries({
                queryKey: _config.queryKeys.dashboard(dashboardId)
            });
            const query = queryCache.find({
                queryKey: _config.queryKeys.dashboard(dashboardId)
            });
            expect(query?.state.isInvalidated).toBe(true);
        });
        it('should handle partial invalidation with predicate function', async ()=>{
            // Cache multiple dashboards
            queryClient.setQueryData(_config.queryKeys.dashboard('1'), {
                id: '1',
                name: 'Dashboard 1'
            });
            queryClient.setQueryData(_config.queryKeys.dashboard('2'), {
                id: '2',
                name: 'Dashboard 2'
            });
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), []);
            // Invalidate only specific dashboard queries (not list)
            await queryClient.invalidateQueries({
                predicate: (query)=>{
                    return query.queryKey.includes('dashboards') && query.queryKey.includes('detail');
                }
            });
            // Verify selective invalidation
            const detailQuery1 = queryCache.find({
                queryKey: _config.queryKeys.dashboard('1')
            });
            const detailQuery2 = queryCache.find({
                queryKey: _config.queryKeys.dashboard('2')
            });
            const listQuery = queryCache.find({
                queryKey: _config.queryKeys.dashboardsList()
            });
            expect(detailQuery1?.state.isInvalidated).toBe(true);
            expect(detailQuery2?.state.isInvalidated).toBe(true);
            expect(listQuery?.state.isInvalidated).toBe(false);
        });
        it('should refetch queries on window focus for critical data', ()=>{
            const authOptions = _config.createQueryOptions.auth();
            expect(authOptions).toMatchObject({
                refetchOnWindowFocus: true,
                refetchOnMount: true,
                staleTime: _config.QUERY_CONFIG.CRITICAL.staleTime
            });
        });
        it('should handle cache removal and cleanup', ()=>{
            const dashboardId = 'temp-dashboard';
            // Add data to cache
            queryClient.setQueryData(_config.queryKeys.dashboard(dashboardId), {
                id: dashboardId
            });
            // Verify data exists
            expect(queryClient.getQueryData(_config.queryKeys.dashboard(dashboardId))).toBeTruthy();
            // Remove specific query from cache
            queryClient.removeQueries({
                queryKey: _config.queryKeys.dashboard(dashboardId)
            });
            // Verify data removed
            expect(queryClient.getQueryData(_config.queryKeys.dashboard(dashboardId))).toBeUndefined();
        });
    });
    describe('Cache Time & Stale-While-Revalidate', ()=>{
        it('should respect staleTime for different data types', ()=>{
            const realtimeOptions = _config.createQueryOptions.analytics();
            const dynamicOptions = _config.createQueryOptions.dashboard();
            const staticOptions = _config.createQueryOptions.settings();
            expect(realtimeOptions.staleTime).toBe(0); // Always stale
            expect(dynamicOptions.staleTime).toBe(2 * 60 * 1000); // 2 minutes
            expect(staticOptions.staleTime).toBe(15 * 60 * 1000); // 15 minutes
        });
        it('should configure garbage collection time correctly', ()=>{
            const client = (0, _config.createOptimizedQueryClient)();
            const defaultGcTime = client.getDefaultOptions().queries?.gcTime;
            expect(defaultGcTime).toBe(_config.QUERY_CONFIG.DYNAMIC.gcTime);
            expect(defaultGcTime).toBe(10 * 60 * 1000); // 10 minutes
        });
        it('should keep previous data during refetch (placeholderData)', async ()=>{
            const initialData = [
                {
                    id: '1',
                    name: 'Dashboard 1'
                }
            ];
            // Set initial data
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), initialData);
            // Simulate stale data fetch with placeholder
            const defaultOptions = queryClient.getDefaultOptions().queries;
            const placeholderData = defaultOptions?.placeholderData;
            if (typeof placeholderData === 'function') {
                const placeholder = placeholderData(initialData);
                expect(placeholder).toEqual(initialData);
            }
        });
        it('should handle cache expiration and automatic cleanup', ()=>{
            jest.useFakeTimers();
            const dashboardId = 'expiring-dashboard';
            queryClient.setQueryData(_config.queryKeys.dashboard(dashboardId), {
                id: dashboardId
            });
            // Fast-forward past gcTime
            const { gcTime } = _config.QUERY_CONFIG.DYNAMIC;
            jest.advanceTimersByTime(gcTime + 1000);
            // Trigger garbage collection
            queryClient.clear();
            jest.useRealTimers();
        });
    });
    describe('Network-Aware Cache Management', ()=>{
        it('should optimize cache for slow networks', ()=>{
            // Mock slow network
            mockConnection.effectiveType = 'slow-2g';
            const networkConfig = (0, _config.getNetworkOptimizedConfig)();
            expect(networkConfig).toMatchObject({
                staleTime: 5 * 60 * 1000,
                gcTime: 30 * 60 * 1000,
                refetchOnWindowFocus: false
            });
        });
        it('should use default config for fast networks', ()=>{
            // Mock fast network
            mockConnection.effectiveType = '4g';
            const networkConfig = (0, _config.getNetworkOptimizedConfig)();
            expect(networkConfig).toEqual(_config.QUERY_CONFIG.DYNAMIC);
        });
        it('should handle missing network connection gracefully', ()=>{
            // Mock missing connection API
            Object.defineProperty(navigator, 'connection', {
                value: undefined
            });
            const networkConfig = (0, _config.getNetworkOptimizedConfig)();
            expect(networkConfig).toEqual(_config.QUERY_CONFIG.DYNAMIC);
            // Restore connection
            Object.defineProperty(navigator, 'connection', {
                value: mockConnection
            });
        });
    });
    describe('Optimistic Updates & Cache Mutations', ()=>{
        it('should perform optimistic update for dashboard creation', ()=>{
            const newDashboard = {
                id: 'new-123',
                name: 'New Dashboard'
            };
            const existingDashboards = [
                {
                    id: '1',
                    name: 'Existing'
                }
            ];
            // Set initial cache
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), existingDashboards);
            // Optimistic update
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), (old)=>{
                const dashboards = old;
                return [
                    ...dashboards,
                    newDashboard
                ];
            });
            // Verify optimistic data
            const updatedData = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(updatedData).toEqual([
                ...existingDashboards,
                newDashboard
            ]);
        });
        it('should rollback optimistic update on mutation failure', ()=>{
            const originalData = [
                {
                    id: '1',
                    name: 'Dashboard 1'
                }
            ];
            const optimisticData = [
                ...originalData,
                {
                    id: '2',
                    name: 'New Dashboard'
                }
            ];
            // Set original data
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), originalData);
            // Perform optimistic update
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), optimisticData);
            // Simulate rollback on failure
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), originalData);
            // Verify rollback
            const finalData = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(finalData).toEqual(originalData);
        });
        it('should handle concurrent optimistic updates correctly', ()=>{
            const initialData = [
                {
                    id: '1',
                    name: 'Dashboard 1'
                }
            ];
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), initialData);
            // Simulate concurrent updates
            const update1 = {
                id: '2',
                name: 'Dashboard 2'
            };
            const update2 = {
                id: '3',
                name: 'Dashboard 3'
            };
            // First optimistic update
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), (old)=>[
                    ...old,
                    update1
                ]);
            // Second optimistic update
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), (old)=>[
                    ...old,
                    update2
                ]);
            const finalData = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(finalData).toHaveLength(3);
        });
        it('should update related cache entries after mutation', ()=>{
            const dashboardId = 'dashboard-123';
            const dashboardData = {
                id: dashboardId,
                name: 'Original Name'
            };
            const updatedData = {
                id: dashboardId,
                name: 'Updated Name'
            };
            // Cache both list and detail
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), [
                dashboardData
            ]);
            queryClient.setQueryData(_config.queryKeys.dashboard(dashboardId), dashboardData);
            // Update detail cache
            queryClient.setQueryData(_config.queryKeys.dashboard(dashboardId), updatedData);
            // Verify detail cache updated
            const detailData = queryClient.getQueryData(_config.queryKeys.dashboard(dashboardId));
            expect(detailData).toEqual(updatedData);
        });
    });
    describe('Cache Persistence & Garbage Collection', ()=>{
        it('should configure development vs production query clients differently', ()=>{
            const prodClient = (0, _config.createOptimizedQueryClient)();
            const devClient = (0, _config.createDevQueryClient)();
            // Both should have same basic config
            expect(prodClient.getDefaultOptions().queries?.staleTime).toBe(devClient.getDefaultOptions().queries?.staleTime);
            // Dev client should have additional debugging
            expect(devClient).toBeInstanceOf(_reactquery.QueryClient);
        });
        it('should handle cache size limits gracefully', ()=>{
            // Fill cache with many entries
            const cacheEntries = [];
            for(let i = 0; i < 100; i++){
                const key = `dashboard-${i}`;
                const data = {
                    id: key,
                    name: `Dashboard ${i}`
                };
                queryClient.setQueryData(_config.queryKeys.dashboard(key), data);
                cacheEntries.push({
                    key,
                    data
                });
            }
            // Verify cache has entries
            const cacheSize = queryCache.getAll().length;
            expect(cacheSize).toBe(100);
            // Clear cache
            queryClient.clear();
            // Verify cache cleared
            expect(queryCache.getAll().length).toBe(0);
        });
        it('should maintain cache across component unmounts', ()=>{
            const testData = {
                id: 'persistent-dashboard',
                name: 'Persistent'
            };
            // Set data in cache
            queryClient.setQueryData(_config.queryKeys.dashboard('persistent-dashboard'), testData);
            // Simulate component unmount (cache should persist)
            const persistentData = queryClient.getQueryData(_config.queryKeys.dashboard('persistent-dashboard'));
            expect(persistentData).toEqual(testData);
        });
        it('should handle cache hydration and dehydration', ()=>{
            const testData = [
                {
                    id: '1',
                    name: 'Dashboard 1'
                },
                {
                    id: '2',
                    name: 'Dashboard 2'
                }
            ];
            // Set cache data
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), testData);
            // Get cache state (simulate dehydration)
            const cacheState = queryCache.getAll().map((query)=>({
                    queryKey: query.queryKey,
                    state: query.state
                }));
            expect(cacheState).toHaveLength(1);
            expect(cacheState[0].queryKey).toEqual(_config.queryKeys.dashboardsList());
            expect(cacheState[0].state.data).toEqual(testData);
            // Clear and restore (simulate hydration)
            queryClient.clear();
            queryClient.setQueryData(_config.queryKeys.dashboardsList(), testData);
            const restoredData = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(restoredData).toEqual(testData);
        });
    });
    describe('Query Key Management & Consistency', ()=>{
        it('should generate consistent query keys', ()=>{
            const dashboardId = 'test-dashboard-123';
            const key1 = _config.queryKeys.dashboard(dashboardId);
            const key2 = _config.queryKeys.dashboard(dashboardId);
            expect(key1).toEqual(key2);
            expect(key1).toEqual([
                'dashboards',
                'detail',
                dashboardId
            ]);
        });
        it('should handle query key hierarchy correctly', ()=>{
            expect(_config.queryKeys.dashboards).toEqual([
                'dashboards'
            ]);
            expect(_config.queryKeys.dashboardsList()).toEqual([
                'dashboards',
                'list'
            ]);
            expect(_config.queryKeys.dashboard('123')).toEqual([
                'dashboards',
                'detail',
                '123'
            ]);
            // Verify hierarchy allows partial matching
            const allDashboardQueries = queryCache.findAll({
                queryKey: _config.queryKeys.dashboards
            });
            expect(Array.isArray(allDashboardQueries)).toBe(true);
        });
    });
    describe('Error Handling & Cache Resilience', ()=>{
        it('should handle cache corruption gracefully', ()=>{
            // Simulate corrupted cache data - should not throw errors
            expect(()=>{
                queryClient.setQueryData(_config.queryKeys.dashboardsList(), null);
                queryClient.setQueryData(_config.queryKeys.dashboardsList(), undefined);
            }).not.toThrow();
            // Should be able to remove corrupted entries
            queryClient.removeQueries({
                queryKey: _config.queryKeys.dashboardsList()
            });
            const data = queryClient.getQueryData(_config.queryKeys.dashboardsList());
            expect(data).toBeUndefined();
        });
        it('should configure retry logic for cache operations', ()=>{
            const defaultOptions = queryClient.getDefaultOptions();
            const retryFn = defaultOptions.queries?.retry;
            // Test retry logic for different error types
            if (typeof retryFn === 'function') {
                // Should not retry 404 errors
                const notFoundError = {
                    status: 404
                };
                expect(retryFn(1, notFoundError)).toBe(false);
                // Should not retry 401 errors
                const authError = {
                    status: 401
                };
                expect(retryFn(1, authError)).toBe(false);
                // Should retry network errors
                const networkError = new Error('Network error');
                expect(retryFn(1, networkError)).toBe(true);
                expect(retryFn(2, networkError)).toBe(true);
                expect(retryFn(3, networkError)).toBe(false); // Max 3 retries
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,