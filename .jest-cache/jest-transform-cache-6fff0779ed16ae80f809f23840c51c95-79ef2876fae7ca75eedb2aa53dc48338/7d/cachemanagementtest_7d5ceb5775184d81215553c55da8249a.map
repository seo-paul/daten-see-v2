{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/__tests__/cache-management.test.ts"],"sourcesContent":["/**\n * TanStack Query Cache Management Tests\n * 80% Coverage for Cache Operations - Critical Business Logic\n * \n * Test Categories:\n * 1. Query Cache Invalidation & Refetching (5 tests)\n * 2. Cache Time & Stale-While-Revalidate (4 tests)  \n * 3. Network-Aware Cache Management (3 tests)\n * 4. Optimistic Updates & Cache Mutations (4 tests)\n * 5. Cache Persistence & Garbage Collection (4 tests)\n */\n\nimport { QueryClient, QueryCache, MutationCache } from '@tanstack/react-query';\n\nimport {\n  createOptimizedQueryClient,\n  createDevQueryClient, \n  QUERY_CONFIG,\n  queryKeys,\n  createQueryOptions,\n  getNetworkOptimizedConfig,\n} from '../config';\n\n// Mock navigator.connection for network tests\nconst mockConnection = {\n  effectiveType: '4g',\n  downlink: 10,\n};\n\nObject.defineProperty(navigator, 'connection', {\n  writable: true,\n  value: mockConnection,\n});\n\ndescribe('TanStack Query Cache Management Tests - 80% Cache Coverage', () => {\n  let queryClient: QueryClient;\n  let queryCache: QueryCache;\n  let mutationCache: MutationCache;\n\n  beforeEach(() => {\n    queryClient = createOptimizedQueryClient();\n    queryCache = queryClient.getQueryCache();\n    mutationCache = queryClient.getMutationCache();\n    \n    // Clear all caches\n    queryClient.clear();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    queryClient.clear();\n  });\n\n  describe('Query Cache Invalidation & Refetching', () => {\n    it('should invalidate dashboard queries and trigger refetch', async () => {\n      const mockData = [{ id: '1', name: 'Test Dashboard' }];\n      \n      // Set initial cache data\n      queryClient.setQueryData(queryKeys.dashboardsList(), mockData);\n      \n      // Verify data is cached\n      const cachedData = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(cachedData).toEqual(mockData);\n      \n      // Invalidate queries\n      await queryClient.invalidateQueries({ queryKey: queryKeys.dashboards });\n      \n      // Verify cache state changed\n      const query = queryCache.find({ queryKey: queryKeys.dashboardsList() });\n      expect(query?.state.isInvalidated).toBe(true);\n    });\n\n    it('should invalidate specific dashboard by ID', async () => {\n      const dashboardId = 'dashboard-123';\n      const mockDashboard = { id: dashboardId, name: 'Test Dashboard' };\n      \n      // Cache dashboard data\n      queryClient.setQueryData(queryKeys.dashboard(dashboardId), mockDashboard);\n      \n      // Invalidate specific dashboard\n      await queryClient.invalidateQueries({ \n        queryKey: queryKeys.dashboard(dashboardId) \n      });\n      \n      const query = queryCache.find({ queryKey: queryKeys.dashboard(dashboardId) });\n      expect(query?.state.isInvalidated).toBe(true);\n    });\n\n    it('should handle partial invalidation with predicate function', async () => {\n      // Cache multiple dashboards\n      queryClient.setQueryData(queryKeys.dashboard('1'), { id: '1', name: 'Dashboard 1' });\n      queryClient.setQueryData(queryKeys.dashboard('2'), { id: '2', name: 'Dashboard 2' });\n      queryClient.setQueryData(queryKeys.dashboardsList(), []);\n      \n      // Invalidate only specific dashboard queries (not list)\n      await queryClient.invalidateQueries({\n        predicate: (query) => {\n          return query.queryKey.includes('dashboards') && \n                 query.queryKey.includes('detail');\n        },\n      });\n      \n      // Verify selective invalidation\n      const detailQuery1 = queryCache.find({ queryKey: queryKeys.dashboard('1') });\n      const detailQuery2 = queryCache.find({ queryKey: queryKeys.dashboard('2') });\n      const listQuery = queryCache.find({ queryKey: queryKeys.dashboardsList() });\n      \n      expect(detailQuery1?.state.isInvalidated).toBe(true);\n      expect(detailQuery2?.state.isInvalidated).toBe(true);\n      expect(listQuery?.state.isInvalidated).toBe(false);\n    });\n\n    it('should refetch queries on window focus for critical data', () => {\n      const authOptions = createQueryOptions.auth();\n      \n      expect(authOptions).toMatchObject({\n        refetchOnWindowFocus: true,\n        refetchOnMount: true,\n        staleTime: QUERY_CONFIG.CRITICAL.staleTime,\n      });\n    });\n\n    it('should handle cache removal and cleanup', () => {\n      const dashboardId = 'temp-dashboard';\n      \n      // Add data to cache\n      queryClient.setQueryData(queryKeys.dashboard(dashboardId), { id: dashboardId });\n      \n      // Verify data exists\n      expect(queryClient.getQueryData(queryKeys.dashboard(dashboardId))).toBeTruthy();\n      \n      // Remove specific query from cache\n      queryClient.removeQueries({ queryKey: queryKeys.dashboard(dashboardId) });\n      \n      // Verify data removed\n      expect(queryClient.getQueryData(queryKeys.dashboard(dashboardId))).toBeUndefined();\n    });\n  });\n\n  describe('Cache Time & Stale-While-Revalidate', () => {\n    it('should respect staleTime for different data types', () => {\n      const realtimeOptions = createQueryOptions.analytics();\n      const dynamicOptions = createQueryOptions.dashboard();\n      const staticOptions = createQueryOptions.settings();\n      \n      expect(realtimeOptions.staleTime).toBe(0); // Always stale\n      expect(dynamicOptions.staleTime).toBe(2 * 60 * 1000); // 2 minutes\n      expect(staticOptions.staleTime).toBe(15 * 60 * 1000); // 15 minutes\n    });\n\n    it('should configure garbage collection time correctly', () => {\n      const client = createOptimizedQueryClient();\n      const defaultGcTime = client.getDefaultOptions().queries?.gcTime;\n      \n      expect(defaultGcTime).toBe(QUERY_CONFIG.DYNAMIC.gcTime);\n      expect(defaultGcTime).toBe(10 * 60 * 1000); // 10 minutes\n    });\n\n    it('should keep previous data during refetch (placeholderData)', async () => {\n      const initialData = [{ id: '1', name: 'Dashboard 1' }];\n      \n      // Set initial data\n      queryClient.setQueryData(queryKeys.dashboardsList(), initialData);\n      \n      // Simulate stale data fetch with placeholder\n      const defaultOptions = queryClient.getDefaultOptions().queries;\n      const placeholderData = defaultOptions?.placeholderData as (prev: unknown) => unknown;\n      \n      if (typeof placeholderData === 'function') {\n        const placeholder = placeholderData(initialData);\n        expect(placeholder).toEqual(initialData);\n      }\n    });\n\n    it('should handle cache expiration and automatic cleanup', () => {\n      jest.useFakeTimers();\n      \n      const dashboardId = 'expiring-dashboard';\n      queryClient.setQueryData(queryKeys.dashboard(dashboardId), { id: dashboardId });\n      \n      // Fast-forward past gcTime\n      const {gcTime} = QUERY_CONFIG.DYNAMIC;\n      jest.advanceTimersByTime(gcTime + 1000);\n      \n      // Trigger garbage collection\n      queryClient.clear();\n      \n      jest.useRealTimers();\n    });\n  });\n\n  describe('Network-Aware Cache Management', () => {\n    it('should optimize cache for slow networks', () => {\n      // Mock slow network\n      (mockConnection as Record<string, string>).effectiveType = 'slow-2g';\n      \n      const networkConfig = getNetworkOptimizedConfig();\n      \n      expect(networkConfig).toMatchObject({\n        staleTime: 5 * 60 * 1000, // 5 minutes\n        gcTime: 30 * 60 * 1000, // 30 minutes\n        refetchOnWindowFocus: false,\n      });\n    });\n\n    it('should use default config for fast networks', () => {\n      // Mock fast network\n      (mockConnection as Record<string, string>).effectiveType = '4g';\n      \n      const networkConfig = getNetworkOptimizedConfig();\n      \n      expect(networkConfig).toEqual(QUERY_CONFIG.DYNAMIC);\n    });\n\n    it('should handle missing network connection gracefully', () => {\n      // Mock missing connection API\n      Object.defineProperty(navigator, 'connection', {\n        value: undefined,\n      });\n      \n      const networkConfig = getNetworkOptimizedConfig();\n      \n      expect(networkConfig).toEqual(QUERY_CONFIG.DYNAMIC);\n      \n      // Restore connection\n      Object.defineProperty(navigator, 'connection', {\n        value: mockConnection,\n      });\n    });\n  });\n\n  describe('Optimistic Updates & Cache Mutations', () => {\n    it('should perform optimistic update for dashboard creation', () => {\n      const newDashboard = { id: 'new-123', name: 'New Dashboard' };\n      const existingDashboards = [{ id: '1', name: 'Existing' }];\n      \n      // Set initial cache\n      queryClient.setQueryData(queryKeys.dashboardsList(), existingDashboards);\n      \n      // Optimistic update\n      queryClient.setQueryData(\n        queryKeys.dashboardsList(),\n        (old: unknown) => {\n          const dashboards = old as typeof existingDashboards;\n          return [...dashboards, newDashboard];\n        }\n      );\n      \n      // Verify optimistic data\n      const updatedData = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(updatedData).toEqual([...existingDashboards, newDashboard]);\n    });\n\n    it('should rollback optimistic update on mutation failure', () => {\n      const originalData = [{ id: '1', name: 'Dashboard 1' }];\n      const optimisticData = [...originalData, { id: '2', name: 'New Dashboard' }];\n      \n      // Set original data\n      queryClient.setQueryData(queryKeys.dashboardsList(), originalData);\n      \n      // Perform optimistic update\n      queryClient.setQueryData(queryKeys.dashboardsList(), optimisticData);\n      \n      // Simulate rollback on failure\n      queryClient.setQueryData(queryKeys.dashboardsList(), originalData);\n      \n      // Verify rollback\n      const finalData = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(finalData).toEqual(originalData);\n    });\n\n    it('should handle concurrent optimistic updates correctly', () => {\n      const initialData = [{ id: '1', name: 'Dashboard 1' }];\n      queryClient.setQueryData(queryKeys.dashboardsList(), initialData);\n      \n      // Simulate concurrent updates\n      const update1 = { id: '2', name: 'Dashboard 2' };\n      const update2 = { id: '3', name: 'Dashboard 3' };\n      \n      // First optimistic update\n      queryClient.setQueryData(\n        queryKeys.dashboardsList(),\n        (old: unknown) => [...(old as typeof initialData), update1]\n      );\n      \n      // Second optimistic update\n      queryClient.setQueryData(\n        queryKeys.dashboardsList(),\n        (old: unknown) => [...(old as typeof initialData), update2]\n      );\n      \n      const finalData = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(finalData).toHaveLength(3);\n    });\n\n    it('should update related cache entries after mutation', () => {\n      const dashboardId = 'dashboard-123';\n      const dashboardData = { id: dashboardId, name: 'Original Name' };\n      const updatedData = { id: dashboardId, name: 'Updated Name' };\n      \n      // Cache both list and detail\n      queryClient.setQueryData(queryKeys.dashboardsList(), [dashboardData]);\n      queryClient.setQueryData(queryKeys.dashboard(dashboardId), dashboardData);\n      \n      // Update detail cache\n      queryClient.setQueryData(queryKeys.dashboard(dashboardId), updatedData);\n      \n      // Verify detail cache updated\n      const detailData = queryClient.getQueryData(queryKeys.dashboard(dashboardId));\n      expect(detailData).toEqual(updatedData);\n    });\n  });\n\n  describe('Cache Persistence & Garbage Collection', () => {\n    it('should configure development vs production query clients differently', () => {\n      const prodClient = createOptimizedQueryClient();\n      const devClient = createDevQueryClient();\n      \n      // Both should have same basic config\n      expect(prodClient.getDefaultOptions().queries?.staleTime)\n        .toBe(devClient.getDefaultOptions().queries?.staleTime);\n      \n      // Dev client should have additional debugging\n      expect(devClient).toBeInstanceOf(QueryClient);\n    });\n\n    it('should handle cache size limits gracefully', () => {\n      // Fill cache with many entries\n      const cacheEntries: Array<{ key: string; data: unknown }> = [];\n      \n      for (let i = 0; i < 100; i++) {\n        const key = `dashboard-${i}`;\n        const data = { id: key, name: `Dashboard ${i}` };\n        \n        queryClient.setQueryData(queryKeys.dashboard(key), data);\n        cacheEntries.push({ key, data });\n      }\n      \n      // Verify cache has entries\n      const cacheSize = queryCache.getAll().length;\n      expect(cacheSize).toBe(100);\n      \n      // Clear cache\n      queryClient.clear();\n      \n      // Verify cache cleared\n      expect(queryCache.getAll().length).toBe(0);\n    });\n\n    it('should maintain cache across component unmounts', () => {\n      const testData = { id: 'persistent-dashboard', name: 'Persistent' };\n      \n      // Set data in cache\n      queryClient.setQueryData(queryKeys.dashboard('persistent-dashboard'), testData);\n      \n      // Simulate component unmount (cache should persist)\n      const persistentData = queryClient.getQueryData(\n        queryKeys.dashboard('persistent-dashboard')\n      );\n      \n      expect(persistentData).toEqual(testData);\n    });\n\n    it('should handle cache hydration and dehydration', () => {\n      const testData = [\n        { id: '1', name: 'Dashboard 1' },\n        { id: '2', name: 'Dashboard 2' },\n      ];\n      \n      // Set cache data\n      queryClient.setQueryData(queryKeys.dashboardsList(), testData);\n      \n      // Get cache state (simulate dehydration)\n      const cacheState = queryCache.getAll().map(query => ({\n        queryKey: query.queryKey,\n        state: query.state,\n      }));\n      \n      expect(cacheState).toHaveLength(1);\n      expect(cacheState[0].queryKey).toEqual(queryKeys.dashboardsList());\n      expect(cacheState[0].state.data).toEqual(testData);\n      \n      // Clear and restore (simulate hydration)\n      queryClient.clear();\n      queryClient.setQueryData(queryKeys.dashboardsList(), testData);\n      \n      const restoredData = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(restoredData).toEqual(testData);\n    });\n  });\n\n  describe('Query Key Management & Consistency', () => {\n    it('should generate consistent query keys', () => {\n      const dashboardId = 'test-dashboard-123';\n      \n      const key1 = queryKeys.dashboard(dashboardId);\n      const key2 = queryKeys.dashboard(dashboardId);\n      \n      expect(key1).toEqual(key2);\n      expect(key1).toEqual(['dashboards', 'detail', dashboardId]);\n    });\n\n    it('should handle query key hierarchy correctly', () => {\n      expect(queryKeys.dashboards).toEqual(['dashboards']);\n      expect(queryKeys.dashboardsList()).toEqual(['dashboards', 'list']);\n      expect(queryKeys.dashboard('123')).toEqual(['dashboards', 'detail', '123']);\n      \n      // Verify hierarchy allows partial matching\n      const allDashboardQueries = queryCache.findAll({ queryKey: queryKeys.dashboards });\n      expect(Array.isArray(allDashboardQueries)).toBe(true);\n    });\n  });\n\n  describe('Error Handling & Cache Resilience', () => {\n    it('should handle cache corruption gracefully', () => {\n      // Simulate corrupted cache data - should not throw errors\n      expect(() => {\n        queryClient.setQueryData(queryKeys.dashboardsList(), null);\n        queryClient.setQueryData(queryKeys.dashboardsList(), undefined);\n      }).not.toThrow();\n      \n      // Should be able to remove corrupted entries\n      queryClient.removeQueries({ queryKey: queryKeys.dashboardsList() });\n      \n      const data = queryClient.getQueryData(queryKeys.dashboardsList());\n      expect(data).toBeUndefined();\n    });\n\n    it('should configure retry logic for cache operations', () => {\n      const defaultOptions = queryClient.getDefaultOptions();\n      const retryFn = defaultOptions.queries?.retry as (count: number, error: Error) => boolean;\n      \n      // Test retry logic for different error types\n      if (typeof retryFn === 'function') {\n        // Should not retry 404 errors\n        const notFoundError = { status: 404 } as Error;\n        expect(retryFn(1, notFoundError)).toBe(false);\n        \n        // Should not retry 401 errors\n        const authError = { status: 401 } as Error;\n        expect(retryFn(1, authError)).toBe(false);\n        \n        // Should retry network errors\n        const networkError = new Error('Network error');\n        expect(retryFn(1, networkError)).toBe(true);\n        expect(retryFn(2, networkError)).toBe(true);\n        expect(retryFn(3, networkError)).toBe(false); // Max 3 retries\n      }\n    });\n  });\n});"],"names":["mockConnection","effectiveType","downlink","Object","defineProperty","navigator","writable","value","describe","queryClient","queryCache","mutationCache","beforeEach","createOptimizedQueryClient","getQueryCache","getMutationCache","clear","jest","clearAllMocks","afterEach","it","mockData","id","name","setQueryData","queryKeys","dashboardsList","cachedData","getQueryData","expect","toEqual","invalidateQueries","queryKey","dashboards","query","find","state","isInvalidated","toBe","dashboardId","mockDashboard","dashboard","predicate","includes","detailQuery1","detailQuery2","listQuery","authOptions","createQueryOptions","auth","toMatchObject","refetchOnWindowFocus","refetchOnMount","staleTime","QUERY_CONFIG","CRITICAL","toBeTruthy","removeQueries","toBeUndefined","realtimeOptions","analytics","dynamicOptions","staticOptions","settings","client","defaultGcTime","getDefaultOptions","queries","gcTime","DYNAMIC","initialData","defaultOptions","placeholderData","placeholder","useFakeTimers","advanceTimersByTime","useRealTimers","networkConfig","getNetworkOptimizedConfig","undefined","newDashboard","existingDashboards","old","updatedData","originalData","optimisticData","finalData","update1","update2","toHaveLength","dashboardData","detailData","prodClient","devClient","createDevQueryClient","toBeInstanceOf","QueryClient","cacheEntries","i","key","data","push","cacheSize","getAll","length","testData","persistentData","cacheState","map","restoredData","key1","key2","allDashboardQueries","findAll","Array","isArray","not","toThrow","retryFn","retry","notFoundError","status","authError","networkError","Error"],"mappings":"AAAA;;;;;;;;;;CAUC;;;;4BAEsD;wBAShD;AAEP,8CAA8C;AAC9C,MAAMA,iBAAiB;IACrBC,eAAe;IACfC,UAAU;AACZ;AAEAC,OAAOC,cAAc,CAACC,WAAW,cAAc;IAC7CC,UAAU;IACVC,OAAOP;AACT;AAEAQ,SAAS,8DAA8D;IACrE,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTH,cAAcI,IAAAA,kCAA0B;QACxCH,aAAaD,YAAYK,aAAa;QACtCH,gBAAgBF,YAAYM,gBAAgB;QAE5C,mBAAmB;QACnBN,YAAYO,KAAK;QACjBC,KAAKC,aAAa;IACpB;IAEAC,UAAU;QACRV,YAAYO,KAAK;IACnB;IAEAR,SAAS,yCAAyC;QAChDY,GAAG,2DAA2D;YAC5D,MAAMC,WAAW;gBAAC;oBAAEC,IAAI;oBAAKC,MAAM;gBAAiB;aAAE;YAEtD,yBAAyB;YACzBd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAIL;YAErD,wBAAwB;YACxB,MAAMM,aAAalB,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YACpEG,OAAOF,YAAYG,OAAO,CAACT;YAE3B,qBAAqB;YACrB,MAAMZ,YAAYsB,iBAAiB,CAAC;gBAAEC,UAAUP,iBAAS,CAACQ,UAAU;YAAC;YAErE,6BAA6B;YAC7B,MAAMC,QAAQxB,WAAWyB,IAAI,CAAC;gBAAEH,UAAUP,iBAAS,CAACC,cAAc;YAAG;YACrEG,OAAOK,OAAOE,MAAMC,eAAeC,IAAI,CAAC;QAC1C;QAEAlB,GAAG,8CAA8C;YAC/C,MAAMmB,cAAc;YACpB,MAAMC,gBAAgB;gBAAElB,IAAIiB;gBAAahB,MAAM;YAAiB;YAEhE,uBAAuB;YACvBd,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAACF,cAAcC;YAE3D,gCAAgC;YAChC,MAAM/B,YAAYsB,iBAAiB,CAAC;gBAClCC,UAAUP,iBAAS,CAACgB,SAAS,CAACF;YAChC;YAEA,MAAML,QAAQxB,WAAWyB,IAAI,CAAC;gBAAEH,UAAUP,iBAAS,CAACgB,SAAS,CAACF;YAAa;YAC3EV,OAAOK,OAAOE,MAAMC,eAAeC,IAAI,CAAC;QAC1C;QAEAlB,GAAG,8DAA8D;YAC/D,4BAA4B;YAC5BX,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAAC,MAAM;gBAAEnB,IAAI;gBAAKC,MAAM;YAAc;YAClFd,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAAC,MAAM;gBAAEnB,IAAI;gBAAKC,MAAM;YAAc;YAClFd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI,EAAE;YAEvD,wDAAwD;YACxD,MAAMjB,YAAYsB,iBAAiB,CAAC;gBAClCW,WAAW,CAACR;oBACV,OAAOA,MAAMF,QAAQ,CAACW,QAAQ,CAAC,iBACxBT,MAAMF,QAAQ,CAACW,QAAQ,CAAC;gBACjC;YACF;YAEA,gCAAgC;YAChC,MAAMC,eAAelC,WAAWyB,IAAI,CAAC;gBAAEH,UAAUP,iBAAS,CAACgB,SAAS,CAAC;YAAK;YAC1E,MAAMI,eAAenC,WAAWyB,IAAI,CAAC;gBAAEH,UAAUP,iBAAS,CAACgB,SAAS,CAAC;YAAK;YAC1E,MAAMK,YAAYpC,WAAWyB,IAAI,CAAC;gBAAEH,UAAUP,iBAAS,CAACC,cAAc;YAAG;YAEzEG,OAAOe,cAAcR,MAAMC,eAAeC,IAAI,CAAC;YAC/CT,OAAOgB,cAAcT,MAAMC,eAAeC,IAAI,CAAC;YAC/CT,OAAOiB,WAAWV,MAAMC,eAAeC,IAAI,CAAC;QAC9C;QAEAlB,GAAG,4DAA4D;YAC7D,MAAM2B,cAAcC,0BAAkB,CAACC,IAAI;YAE3CpB,OAAOkB,aAAaG,aAAa,CAAC;gBAChCC,sBAAsB;gBACtBC,gBAAgB;gBAChBC,WAAWC,oBAAY,CAACC,QAAQ,CAACF,SAAS;YAC5C;QACF;QAEAjC,GAAG,2CAA2C;YAC5C,MAAMmB,cAAc;YAEpB,oBAAoB;YACpB9B,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAACF,cAAc;gBAAEjB,IAAIiB;YAAY;YAE7E,qBAAqB;YACrBV,OAAOpB,YAAYmB,YAAY,CAACH,iBAAS,CAACgB,SAAS,CAACF,eAAeiB,UAAU;YAE7E,mCAAmC;YACnC/C,YAAYgD,aAAa,CAAC;gBAAEzB,UAAUP,iBAAS,CAACgB,SAAS,CAACF;YAAa;YAEvE,sBAAsB;YACtBV,OAAOpB,YAAYmB,YAAY,CAACH,iBAAS,CAACgB,SAAS,CAACF,eAAemB,aAAa;QAClF;IACF;IAEAlD,SAAS,uCAAuC;QAC9CY,GAAG,qDAAqD;YACtD,MAAMuC,kBAAkBX,0BAAkB,CAACY,SAAS;YACpD,MAAMC,iBAAiBb,0BAAkB,CAACP,SAAS;YACnD,MAAMqB,gBAAgBd,0BAAkB,CAACe,QAAQ;YAEjDlC,OAAO8B,gBAAgBN,SAAS,EAAEf,IAAI,CAAC,IAAI,eAAe;YAC1DT,OAAOgC,eAAeR,SAAS,EAAEf,IAAI,CAAC,IAAI,KAAK,OAAO,YAAY;YAClET,OAAOiC,cAAcT,SAAS,EAAEf,IAAI,CAAC,KAAK,KAAK,OAAO,aAAa;QACrE;QAEAlB,GAAG,sDAAsD;YACvD,MAAM4C,SAASnD,IAAAA,kCAA0B;YACzC,MAAMoD,gBAAgBD,OAAOE,iBAAiB,GAAGC,OAAO,EAAEC;YAE1DvC,OAAOoC,eAAe3B,IAAI,CAACgB,oBAAY,CAACe,OAAO,CAACD,MAAM;YACtDvC,OAAOoC,eAAe3B,IAAI,CAAC,KAAK,KAAK,OAAO,aAAa;QAC3D;QAEAlB,GAAG,8DAA8D;YAC/D,MAAMkD,cAAc;gBAAC;oBAAEhD,IAAI;oBAAKC,MAAM;gBAAc;aAAE;YAEtD,mBAAmB;YACnBd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI4C;YAErD,6CAA6C;YAC7C,MAAMC,iBAAiB9D,YAAYyD,iBAAiB,GAAGC,OAAO;YAC9D,MAAMK,kBAAkBD,gBAAgBC;YAExC,IAAI,OAAOA,oBAAoB,YAAY;gBACzC,MAAMC,cAAcD,gBAAgBF;gBACpCzC,OAAO4C,aAAa3C,OAAO,CAACwC;YAC9B;QACF;QAEAlD,GAAG,wDAAwD;YACzDH,KAAKyD,aAAa;YAElB,MAAMnC,cAAc;YACpB9B,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAACF,cAAc;gBAAEjB,IAAIiB;YAAY;YAE7E,2BAA2B;YAC3B,MAAM,EAAC6B,MAAM,EAAC,GAAGd,oBAAY,CAACe,OAAO;YACrCpD,KAAK0D,mBAAmB,CAACP,SAAS;YAElC,6BAA6B;YAC7B3D,YAAYO,KAAK;YAEjBC,KAAK2D,aAAa;QACpB;IACF;IAEApE,SAAS,kCAAkC;QACzCY,GAAG,2CAA2C;YAC5C,oBAAoB;YACnBpB,eAA0CC,aAAa,GAAG;YAE3D,MAAM4E,gBAAgBC,IAAAA,iCAAyB;YAE/CjD,OAAOgD,eAAe3B,aAAa,CAAC;gBAClCG,WAAW,IAAI,KAAK;gBACpBe,QAAQ,KAAK,KAAK;gBAClBjB,sBAAsB;YACxB;QACF;QAEA/B,GAAG,+CAA+C;YAChD,oBAAoB;YACnBpB,eAA0CC,aAAa,GAAG;YAE3D,MAAM4E,gBAAgBC,IAAAA,iCAAyB;YAE/CjD,OAAOgD,eAAe/C,OAAO,CAACwB,oBAAY,CAACe,OAAO;QACpD;QAEAjD,GAAG,uDAAuD;YACxD,8BAA8B;YAC9BjB,OAAOC,cAAc,CAACC,WAAW,cAAc;gBAC7CE,OAAOwE;YACT;YAEA,MAAMF,gBAAgBC,IAAAA,iCAAyB;YAE/CjD,OAAOgD,eAAe/C,OAAO,CAACwB,oBAAY,CAACe,OAAO;YAElD,qBAAqB;YACrBlE,OAAOC,cAAc,CAACC,WAAW,cAAc;gBAC7CE,OAAOP;YACT;QACF;IACF;IAEAQ,SAAS,wCAAwC;QAC/CY,GAAG,2DAA2D;YAC5D,MAAM4D,eAAe;gBAAE1D,IAAI;gBAAWC,MAAM;YAAgB;YAC5D,MAAM0D,qBAAqB;gBAAC;oBAAE3D,IAAI;oBAAKC,MAAM;gBAAW;aAAE;YAE1D,oBAAoB;YACpBd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAIuD;YAErD,oBAAoB;YACpBxE,YAAYe,YAAY,CACtBC,iBAAS,CAACC,cAAc,IACxB,CAACwD;gBACC,MAAMjD,aAAaiD;gBACnB,OAAO;uBAAIjD;oBAAY+C;iBAAa;YACtC;YAGF,yBAAyB;YACzB,MAAMG,cAAc1E,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YACrEG,OAAOsD,aAAarD,OAAO,CAAC;mBAAImD;gBAAoBD;aAAa;QACnE;QAEA5D,GAAG,yDAAyD;YAC1D,MAAMgE,eAAe;gBAAC;oBAAE9D,IAAI;oBAAKC,MAAM;gBAAc;aAAE;YACvD,MAAM8D,iBAAiB;mBAAID;gBAAc;oBAAE9D,IAAI;oBAAKC,MAAM;gBAAgB;aAAE;YAE5E,oBAAoB;YACpBd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI0D;YAErD,4BAA4B;YAC5B3E,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI2D;YAErD,+BAA+B;YAC/B5E,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI0D;YAErD,kBAAkB;YAClB,MAAME,YAAY7E,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YACnEG,OAAOyD,WAAWxD,OAAO,CAACsD;QAC5B;QAEAhE,GAAG,yDAAyD;YAC1D,MAAMkD,cAAc;gBAAC;oBAAEhD,IAAI;oBAAKC,MAAM;gBAAc;aAAE;YACtDd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI4C;YAErD,8BAA8B;YAC9B,MAAMiB,UAAU;gBAAEjE,IAAI;gBAAKC,MAAM;YAAc;YAC/C,MAAMiE,UAAU;gBAAElE,IAAI;gBAAKC,MAAM;YAAc;YAE/C,0BAA0B;YAC1Bd,YAAYe,YAAY,CACtBC,iBAAS,CAACC,cAAc,IACxB,CAACwD,MAAiB;uBAAKA;oBAA4BK;iBAAQ;YAG7D,2BAA2B;YAC3B9E,YAAYe,YAAY,CACtBC,iBAAS,CAACC,cAAc,IACxB,CAACwD,MAAiB;uBAAKA;oBAA4BM;iBAAQ;YAG7D,MAAMF,YAAY7E,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YACnEG,OAAOyD,WAAWG,YAAY,CAAC;QACjC;QAEArE,GAAG,sDAAsD;YACvD,MAAMmB,cAAc;YACpB,MAAMmD,gBAAgB;gBAAEpE,IAAIiB;gBAAahB,MAAM;YAAgB;YAC/D,MAAM4D,cAAc;gBAAE7D,IAAIiB;gBAAahB,MAAM;YAAe;YAE5D,6BAA6B;YAC7Bd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI;gBAACgE;aAAc;YACpEjF,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAACF,cAAcmD;YAE3D,sBAAsB;YACtBjF,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAACF,cAAc4C;YAE3D,8BAA8B;YAC9B,MAAMQ,aAAalF,YAAYmB,YAAY,CAACH,iBAAS,CAACgB,SAAS,CAACF;YAChEV,OAAO8D,YAAY7D,OAAO,CAACqD;QAC7B;IACF;IAEA3E,SAAS,0CAA0C;QACjDY,GAAG,wEAAwE;YACzE,MAAMwE,aAAa/E,IAAAA,kCAA0B;YAC7C,MAAMgF,YAAYC,IAAAA,4BAAoB;YAEtC,qCAAqC;YACrCjE,OAAO+D,WAAW1B,iBAAiB,GAAGC,OAAO,EAAEd,WAC5Cf,IAAI,CAACuD,UAAU3B,iBAAiB,GAAGC,OAAO,EAAEd;YAE/C,8CAA8C;YAC9CxB,OAAOgE,WAAWE,cAAc,CAACC,uBAAW;QAC9C;QAEA5E,GAAG,8CAA8C;YAC/C,+BAA+B;YAC/B,MAAM6E,eAAsD,EAAE;YAE9D,IAAK,IAAIC,IAAI,GAAGA,IAAI,KAAKA,IAAK;gBAC5B,MAAMC,MAAM,CAAC,UAAU,EAAED,GAAG;gBAC5B,MAAME,OAAO;oBAAE9E,IAAI6E;oBAAK5E,MAAM,CAAC,UAAU,EAAE2E,GAAG;gBAAC;gBAE/CzF,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAAC0D,MAAMC;gBACnDH,aAAaI,IAAI,CAAC;oBAAEF;oBAAKC;gBAAK;YAChC;YAEA,2BAA2B;YAC3B,MAAME,YAAY5F,WAAW6F,MAAM,GAAGC,MAAM;YAC5C3E,OAAOyE,WAAWhE,IAAI,CAAC;YAEvB,cAAc;YACd7B,YAAYO,KAAK;YAEjB,uBAAuB;YACvBa,OAAOnB,WAAW6F,MAAM,GAAGC,MAAM,EAAElE,IAAI,CAAC;QAC1C;QAEAlB,GAAG,mDAAmD;YACpD,MAAMqF,WAAW;gBAAEnF,IAAI;gBAAwBC,MAAM;YAAa;YAElE,oBAAoB;YACpBd,YAAYe,YAAY,CAACC,iBAAS,CAACgB,SAAS,CAAC,yBAAyBgE;YAEtE,oDAAoD;YACpD,MAAMC,iBAAiBjG,YAAYmB,YAAY,CAC7CH,iBAAS,CAACgB,SAAS,CAAC;YAGtBZ,OAAO6E,gBAAgB5E,OAAO,CAAC2E;QACjC;QAEArF,GAAG,iDAAiD;YAClD,MAAMqF,WAAW;gBACf;oBAAEnF,IAAI;oBAAKC,MAAM;gBAAc;gBAC/B;oBAAED,IAAI;oBAAKC,MAAM;gBAAc;aAChC;YAED,iBAAiB;YACjBd,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI+E;YAErD,yCAAyC;YACzC,MAAME,aAAajG,WAAW6F,MAAM,GAAGK,GAAG,CAAC1E,CAAAA,QAAU,CAAA;oBACnDF,UAAUE,MAAMF,QAAQ;oBACxBI,OAAOF,MAAME,KAAK;gBACpB,CAAA;YAEAP,OAAO8E,YAAYlB,YAAY,CAAC;YAChC5D,OAAO8E,UAAU,CAAC,EAAE,CAAC3E,QAAQ,EAAEF,OAAO,CAACL,iBAAS,CAACC,cAAc;YAC/DG,OAAO8E,UAAU,CAAC,EAAE,CAACvE,KAAK,CAACgE,IAAI,EAAEtE,OAAO,CAAC2E;YAEzC,yCAAyC;YACzChG,YAAYO,KAAK;YACjBP,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI+E;YAErD,MAAMI,eAAepG,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YACtEG,OAAOgF,cAAc/E,OAAO,CAAC2E;QAC/B;IACF;IAEAjG,SAAS,sCAAsC;QAC7CY,GAAG,yCAAyC;YAC1C,MAAMmB,cAAc;YAEpB,MAAMuE,OAAOrF,iBAAS,CAACgB,SAAS,CAACF;YACjC,MAAMwE,OAAOtF,iBAAS,CAACgB,SAAS,CAACF;YAEjCV,OAAOiF,MAAMhF,OAAO,CAACiF;YACrBlF,OAAOiF,MAAMhF,OAAO,CAAC;gBAAC;gBAAc;gBAAUS;aAAY;QAC5D;QAEAnB,GAAG,+CAA+C;YAChDS,OAAOJ,iBAAS,CAACQ,UAAU,EAAEH,OAAO,CAAC;gBAAC;aAAa;YACnDD,OAAOJ,iBAAS,CAACC,cAAc,IAAII,OAAO,CAAC;gBAAC;gBAAc;aAAO;YACjED,OAAOJ,iBAAS,CAACgB,SAAS,CAAC,QAAQX,OAAO,CAAC;gBAAC;gBAAc;gBAAU;aAAM;YAE1E,2CAA2C;YAC3C,MAAMkF,sBAAsBtG,WAAWuG,OAAO,CAAC;gBAAEjF,UAAUP,iBAAS,CAACQ,UAAU;YAAC;YAChFJ,OAAOqF,MAAMC,OAAO,CAACH,sBAAsB1E,IAAI,CAAC;QAClD;IACF;IAEA9B,SAAS,qCAAqC;QAC5CY,GAAG,6CAA6C;YAC9C,0DAA0D;YAC1DS,OAAO;gBACLpB,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAI;gBACrDjB,YAAYe,YAAY,CAACC,iBAAS,CAACC,cAAc,IAAIqD;YACvD,GAAGqC,GAAG,CAACC,OAAO;YAEd,6CAA6C;YAC7C5G,YAAYgD,aAAa,CAAC;gBAAEzB,UAAUP,iBAAS,CAACC,cAAc;YAAG;YAEjE,MAAM0E,OAAO3F,YAAYmB,YAAY,CAACH,iBAAS,CAACC,cAAc;YAC9DG,OAAOuE,MAAM1C,aAAa;QAC5B;QAEAtC,GAAG,qDAAqD;YACtD,MAAMmD,iBAAiB9D,YAAYyD,iBAAiB;YACpD,MAAMoD,UAAU/C,eAAeJ,OAAO,EAAEoD;YAExC,6CAA6C;YAC7C,IAAI,OAAOD,YAAY,YAAY;gBACjC,8BAA8B;gBAC9B,MAAME,gBAAgB;oBAAEC,QAAQ;gBAAI;gBACpC5F,OAAOyF,QAAQ,GAAGE,gBAAgBlF,IAAI,CAAC;gBAEvC,8BAA8B;gBAC9B,MAAMoF,YAAY;oBAAED,QAAQ;gBAAI;gBAChC5F,OAAOyF,QAAQ,GAAGI,YAAYpF,IAAI,CAAC;gBAEnC,8BAA8B;gBAC9B,MAAMqF,eAAe,IAAIC,MAAM;gBAC/B/F,OAAOyF,QAAQ,GAAGK,eAAerF,IAAI,CAAC;gBACtCT,OAAOyF,QAAQ,GAAGK,eAAerF,IAAI,CAAC;gBACtCT,OAAOyF,QAAQ,GAAGK,eAAerF,IAAI,CAAC,QAAQ,gBAAgB;YAChE;QACF;IACF;AACF"}