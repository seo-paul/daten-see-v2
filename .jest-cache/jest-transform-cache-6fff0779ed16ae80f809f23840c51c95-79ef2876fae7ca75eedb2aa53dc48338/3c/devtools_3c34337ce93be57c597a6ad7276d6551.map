{"version":3,"names":["cov_103r58a2z9","actualCoverage","s","EnhancedQueryDevTools","f","default","BISaaSQueryDevTools","queryClient","_reactquery","useQueryClient","devState","setDevState","_react","useState","isAdvancedMode","showNetworkStats","autoRefreshStats","selectedDomain","performanceDashboard","_devtoolsdashboard","useQueryPerformanceDashboard","_performancemonitor","useDevQueryMonitor","intervalMs","autoOptimize","useEffect","process","env","NODE_ENV","b","handleKeyDown","event","ctrlKey","metaKey","shiftKey","key","preventDefault","clear","_logger","devLogger","success","prev","refetchQueries","window","addEventListener","removeEventListener","getPerformanceMetrics","useCallback","queries","getQueryCache","getAll","mutations","getMutationCache","cache","total","length","loading","filter","q","state","status","error","stale","isStale","inactive","getObserversCount","pending","m","domains","domainStats","forEach","query","domain","Array","isArray","queryKey","memory","cacheSize","reduce","size","dataSize","JSON","stringify","data","averageQuerySize","queryDebugUtils","getAllQueries","getAllMutations","clearCache","invalidateAll","invalidateQueries","refetchAll","getStats","invalidateDomain","predicate","findQueriesByKey","searchKey","includes","getErrorQueries","map","result","errorUpdateCount","errorMessage","toString","failureReason","getStaleQueries","dataUpdatedAt","observersCount","analyzeCacheEfficiency","totalQueries","hitQueries","dataUpdateCount","staleFetches","cacheHitRate","staleFetchRate","averageFetchCount","sum","simulateNetworkDelay","ms","originalFetch","fetch","args","Promise","resolve","setTimeout","network","delayMs","duration","queryKeys","dashboards","_querykeys","auth","dataSources","analytics","enableVerboseLogging","disableVerboseLogging","showPerformanceDashboard","show","hidePerformanceDashboard","hide","togglePerformanceDashboard","toggle","queryDebug","group","log","_jsxruntime","jsxs","Fragment","jsx","_reactquerydevtools","ReactQueryDevtools","initialIsOpen","buttonPosition","style","position","top","right","background","color","padding","borderRadius","fontFamily","fontSize","zIndex","maxWidth","maxHeight","overflow","marginBottom","fontWeight","QueryStatsDisplay","marginTop","display","gap","onClick","border","cursor","QueryPerformanceDashboard","isVisible","onClose","stats","setStats","interval","setInterval","clearInterval","lineHeight","Math","round","Object","entries","count","String"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/tanstack-query/devtools.tsx"],"sourcesContent":["/**\n * Enhanced TanStack Query DevTools Configuration\n * Advanced development tools for BI SaaS dashboard optimization\n */\n\n'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport { useEffect, useState, useCallback } from 'react';\n\nimport { devLogger } from '@/lib/development/logger';\nimport { QueryPerformanceDashboard, useQueryPerformanceDashboard } from '@/lib/tanstack-query/devtools-dashboard';\nimport { useDevQueryMonitor } from '@/lib/tanstack-query/performance-monitor';\nimport { queryKeys } from '@/lib/tanstack-query/query-keys';\n\n// DevTools state management\ninterface DevToolsState {\n  isAdvancedMode: boolean;\n  showNetworkStats: boolean;\n  autoRefreshStats: boolean;\n  selectedDomain: string | null;\n}\n\nexport function EnhancedQueryDevTools(): React.ReactElement | null {\n  const queryClient = useQueryClient();\n  const [devState, setDevState] = useState<DevToolsState>({\n    isAdvancedMode: false,\n    showNetworkStats: false,\n    autoRefreshStats: false,\n    selectedDomain: null,\n  });\n  \n  // Performance dashboard hook\n  const performanceDashboard = useQueryPerformanceDashboard();\n  \n  // Auto performance monitoring (development only)\n  useDevQueryMonitor({\n    intervalMs: 10000, // Check every 10 seconds\n    autoOptimize: false, // Manual optimization only\n  });\n\n  // Enhanced keyboard shortcuts for development\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      // Ctrl/Cmd + Shift + C to clear cache\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'C') {\n        event.preventDefault();\n        queryClient.clear();\n        devLogger.success('Query cache cleared via keyboard shortcut');\n      }\n      \n      // Ctrl/Cmd + Shift + D to toggle DevTools advanced mode\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'D') {\n        event.preventDefault();\n        setDevState(prev => ({ ...prev, isAdvancedMode: !prev.isAdvancedMode }));\n      }\n      \n      // Ctrl/Cmd + Shift + N to toggle network stats\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'N') {\n        event.preventDefault();\n        setDevState(prev => ({ ...prev, showNetworkStats: !prev.showNetworkStats }));\n      }\n      \n      // Ctrl/Cmd + Shift + R to force refetch all queries\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'R') {\n        event.preventDefault();\n        queryClient.refetchQueries();\n        devLogger.success('All queries refetched via keyboard shortcut');\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return (): void => window.removeEventListener('keydown', handleKeyDown);\n  }, [queryClient]);\n\n  // Advanced query performance monitoring\n  const getPerformanceMetrics = useCallback(() => {\n    const queries = queryClient.getQueryCache().getAll();\n    const mutations = queryClient.getMutationCache().getAll();\n    \n    return {\n      cache: {\n        queries: {\n          total: queries.length,\n          loading: queries.filter(q => q.state.status === 'pending').length,\n          error: queries.filter(q => q.state.status === 'error').length,\n          success: queries.filter(q => q.state.status === 'success').length,\n          stale: queries.filter(q => q.isStale()).length,\n          inactive: queries.filter(q => q.getObserversCount() === 0).length,\n        },\n        mutations: {\n          total: mutations.length,\n          pending: mutations.filter(m => m.state.status === 'pending').length,\n          error: mutations.filter(m => m.state.status === 'error').length,\n          success: mutations.filter(m => m.state.status === 'success').length,\n        },\n      },\n      domains: ((): Record<string, number> => {\n        const domainStats: Record<string, number> = {};\n        queries.forEach(query => {\n          const domain = Array.isArray(query.queryKey) ? query.queryKey[0] as string : 'unknown';\n          domainStats[domain] = (domainStats[domain] || 0) + 1;\n        });\n        return domainStats;\n      })(),\n      memory: {\n        cacheSize: queries.reduce((size, query) => {\n          const dataSize = JSON.stringify(query.state.data || {}).length;\n          return size + dataSize;\n        }, 0),\n        averageQuerySize: queries.length > 0 \n          ? queries.reduce((total, query) => total + JSON.stringify(query.state.data || {}).length, 0) / queries.length \n          : 0,\n      },\n    };\n  }, [queryClient]);\n\n  // Enhanced development utilities\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'development') return;\n    if (typeof window === 'undefined') return;\n\n    const queryDebugUtils = {\n      // Basic operations\n      getAllQueries: (): unknown[] => queryClient.getQueryCache().getAll(),\n      getAllMutations: (): unknown[] => queryClient.getMutationCache().getAll(),\n      clearCache: (): void => queryClient.clear(),\n      invalidateAll: (): Promise<void> => queryClient.invalidateQueries(),\n      refetchAll: (): Promise<void> => queryClient.refetchQueries(),\n      \n      // Performance monitoring\n      getStats: getPerformanceMetrics,\n      \n      // Domain-specific operations\n      invalidateDomain: (domain: string): void => {\n        queryClient.invalidateQueries({ \n          predicate: (query) => Array.isArray(query.queryKey) && query.queryKey[0] === domain \n        });\n        devLogger.success(`Invalidated all queries for domain: ${domain}`);\n      },\n      \n      // Query key management\n      findQueriesByKey: (searchKey: string): unknown[] => {\n        return queryClient.getQueryCache().getAll().filter(query => \n          JSON.stringify(query.queryKey).includes(searchKey)\n        );\n      },\n      \n      // Error analysis\n      getErrorQueries: (): Array<{queryKey: readonly unknown[]; error: unknown; errorUpdateCount: number; failureReason?: string}> => {\n        return queryClient.getQueryCache().getAll()\n          .filter(query => query.state.status === 'error')\n          .map(query => {\n            const result: {queryKey: readonly unknown[]; error: unknown; errorUpdateCount: number; failureReason?: string} = {\n              queryKey: query.queryKey,\n              error: query.state.error,\n              errorUpdateCount: query.state.errorUpdateCount,\n            };\n            \n            const errorMessage = query.state.error?.toString();\n            if (errorMessage) {\n              result.failureReason = errorMessage;\n            }\n            \n            return result;\n          });\n      },\n      \n      // Stale data management\n      getStaleQueries: (): Array<{queryKey: readonly unknown[]; dataUpdatedAt: number; isStale: boolean; observersCount: number}> => {\n        return queryClient.getQueryCache().getAll()\n          .filter(query => query.isStale())\n          .map(query => ({\n            queryKey: query.queryKey,\n            dataUpdatedAt: query.state.dataUpdatedAt,\n            isStale: query.isStale(),\n            observersCount: query.getObserversCount(),\n          }));\n      },\n      \n      // Cache efficiency analysis\n      analyzeCacheEfficiency: (): {totalQueries: number; cacheHitRate: number; staleFetchRate: number; averageFetchCount: number} => {\n        const queries = queryClient.getQueryCache().getAll();\n        const totalQueries = queries.length;\n        const hitQueries = queries.filter(q => q.state.dataUpdateCount > 0).length;\n        const staleFetches = queries.filter(q => q.state.dataUpdateCount > 1).length;\n        \n        return {\n          totalQueries,\n          cacheHitRate: totalQueries > 0 ? (hitQueries / totalQueries) * 100 : 0,\n          staleFetchRate: totalQueries > 0 ? (staleFetches / totalQueries) * 100 : 0,\n          averageFetchCount: totalQueries > 0 \n            ? queries.reduce((sum, q) => sum + q.state.dataUpdateCount, 0) / totalQueries \n            : 0,\n        };\n      },\n\n      // Network simulation (for testing)\n      simulateNetworkDelay: (ms: number): void => {\n        const originalFetch = window.fetch;\n        window.fetch = (...args): Promise<Response> => {\n          return new Promise(resolve => {\n            setTimeout(() => resolve(originalFetch(...args)), ms);\n          });\n        };\n        devLogger.network('Network delay simulation started', { delayMs: ms });\n        \n        // Auto-restore after 30 seconds\n        setTimeout((): void => {\n          window.fetch = originalFetch;\n          devLogger.network('Network delay simulation restored', { duration: '30s' });\n        }, 30000);\n      },\n\n      // Query key utilities using our centralized system\n      queryKeys: {\n        dashboards: queryKeys.dashboards,\n        auth: queryKeys.auth,\n        dataSources: queryKeys.dataSources,\n        analytics: queryKeys.analytics,\n      },\n\n      // Advanced debugging\n      enableVerboseLogging: (): void => {\n        // Note: setLogger method may not be available in all TanStack Query versions\n        // This is a development-only feature\n        devLogger.success('Verbose query logging enabled (Note: setLogger not available in current version)');\n      },\n\n      disableVerboseLogging: (): void => {\n        devLogger.success('Verbose query logging disabled');\n      },\n\n      // Performance dashboard controls\n      showPerformanceDashboard: (): void => performanceDashboard.show(),\n      hidePerformanceDashboard: (): void => performanceDashboard.hide(),\n      togglePerformanceDashboard: (): void => performanceDashboard.toggle(),\n    };\n\n    // Expose to window for console access\n    (window as unknown as Record<string, unknown>).queryDebug = queryDebugUtils;\n    \n    // Log available commands\n    devLogger.group('TanStack Query DevTools Enhanced - Available Commands', () => {\n      devLogger.log('Basic Operations:');\n      devLogger.log('  queryDebug.getStats() - Get performance metrics');\n      devLogger.log('  queryDebug.clearCache() - Clear all cached data');\n      devLogger.log('  queryDebug.invalidateAll() - Invalidate all queries');\n      devLogger.log('  queryDebug.refetchAll() - Refetch all queries');\n      \n      devLogger.log('Advanced Analysis:');\n      devLogger.log('  queryDebug.getErrorQueries() - Get queries with errors');\n      devLogger.log('  queryDebug.getStaleQueries() - Get stale queries');\n      devLogger.log('  queryDebug.analyzeCacheEfficiency() - Cache performance analysis');\n      \n      devLogger.log('Domain Operations:');\n      devLogger.log('  queryDebug.invalidateDomain(\\'dashboards\\') - Invalidate specific domain');\n      devLogger.log('  queryDebug.findQueriesByKey(\\'dashboard\\') - Find queries by key');\n      \n      devLogger.log('Debugging:');\n      devLogger.log('  queryDebug.enableVerboseLogging() - Enable detailed logs');\n      devLogger.log('  queryDebug.simulateNetworkDelay(1000) - Add network delay');\n      \n      devLogger.log('Performance Dashboard:');\n      devLogger.log('  queryDebug.showPerformanceDashboard() - Show advanced dashboard');\n      devLogger.log('  queryDebug.togglePerformanceDashboard() - Toggle dashboard');\n      \n      devLogger.log('Keyboard Shortcuts:');\n      devLogger.log('  Cmd/Ctrl + Shift + C - Clear cache');\n      devLogger.log('  Cmd/Ctrl + Shift + R - Refetch all');\n      devLogger.log('  Cmd/Ctrl + Shift + D - Toggle advanced mode');\n      devLogger.log('  Cmd/Ctrl + Shift + N - Toggle network stats');\n      devLogger.log('  Cmd/Ctrl + Shift + P - Toggle performance dashboard');\n    });\n    \n  }, [queryClient, getPerformanceMetrics, performanceDashboard]);\n\n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n\n  return (\n    <>\n      <ReactQueryDevtools \n        initialIsOpen={false}\n        buttonPosition=\"bottom-right\"\n      />\n      {devState.isAdvancedMode && (\n        <div \n          style={{\n            position: 'fixed',\n            top: '10px',\n            right: '10px',\n            background: 'rgba(0, 0, 0, 0.9)',\n            color: 'white',\n            padding: '16px',\n            borderRadius: '8px',\n            fontFamily: 'monospace',\n            fontSize: '12px',\n            zIndex: 9999,\n            maxWidth: '400px',\n            maxHeight: '500px',\n            overflow: 'auto',\n          }}\n        >\n          <div style={{ marginBottom: '12px', fontWeight: 'bold' }}>\n            🚀 Enhanced Query DevTools\n          </div>\n          <QueryStatsDisplay getStats={getPerformanceMetrics} />\n          <div style={{ marginTop: '12px', display: 'flex', gap: '8px' }}>\n            <button\n              onClick={performanceDashboard.toggle}\n              style={{\n                background: '#2196f3',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                fontSize: '10px',\n                cursor: 'pointer',\n              }}\n            >\n              Performance\n            </button>\n            <button\n              onClick={() => setDevState(prev => ({ ...prev, isAdvancedMode: false }))}\n              style={{\n                background: '#666',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                fontSize: '10px',\n                cursor: 'pointer',\n              }}\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Advanced Performance Dashboard */}\n      <QueryPerformanceDashboard \n        isVisible={performanceDashboard.isVisible}\n        onClose={performanceDashboard.hide}\n      />\n    </>\n  );\n}\n\n// Query stats display component  \nfunction QueryStatsDisplay({ getStats }: { getStats: () => {\n  cache: {\n    queries: { total: number; loading: number; error: number; success: number; stale: number; inactive: number; };\n    mutations: { total: number; pending: number; error: number; success: number; };\n  };\n  domains: Record<string, number>;\n  memory: { cacheSize: number; averageQuerySize: number; };\n} }): React.ReactElement {\n  const [stats, setStats] = useState(getStats());\n\n  useEffect(() => {\n    const interval = setInterval((): void => {\n      setStats(getStats());\n    }, 1000);\n\n    return (): void => clearInterval(interval);\n  }, [getStats]);\n\n  return (\n    <div style={{ lineHeight: '1.4' }}>\n      <div><strong>Cache Stats:</strong></div>\n      <div>Total Queries: {stats.cache.queries.total}</div>\n      <div>Loading: {stats.cache.queries.loading}</div>\n      <div>Errors: {stats.cache.queries.error}</div>\n      <div>Success: {stats.cache.queries.success}</div>\n      <div>Stale: {stats.cache.queries.stale}</div>\n      \n      <div style={{ marginTop: '8px' }}><strong>Mutations:</strong></div>\n      <div>Total: {stats.cache.mutations.total}</div>\n      <div>Pending: {stats.cache.mutations.pending}</div>\n      \n      <div style={{ marginTop: '8px' }}><strong>Memory:</strong></div>\n      <div>Cache Size: {Math.round(stats.memory.cacheSize / 1024)}KB</div>\n      <div>Avg Query: {Math.round(stats.memory.averageQuerySize)}B</div>\n      \n      <div style={{ marginTop: '8px' }}><strong>Domains:</strong></div>\n      {Object.entries(stats.domains).map(([domain, count]) => (\n        <div key={domain}>{String(domain)}: {count}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default function BISaaSQueryDevTools(): React.ReactElement | null {\n  return <EnhancedQueryDevTools />;\n}"],"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","ignoreList":[]}