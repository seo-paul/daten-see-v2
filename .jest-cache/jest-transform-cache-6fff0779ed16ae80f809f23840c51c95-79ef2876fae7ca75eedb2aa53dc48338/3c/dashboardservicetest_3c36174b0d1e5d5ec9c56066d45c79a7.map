{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/dashboard.service.test.ts"],"sourcesContent":["import type { Dashboard, CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\nimport { DashboardService } from '../dashboard';\nimport { apiClient } from '../index';\n\n// Mock the API client\njest.mock('../index', () => ({\n  apiClient: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    getPaginated: jest.fn(),\n  },\n}));\n\nconst mockApiClient = apiClient as jest.Mocked<typeof apiClient>;\n\ndescribe('DashboardService', () => {\n  const mockDashboard: Dashboard = {\n    id: '1',\n    name: 'Test Dashboard',\n    description: 'Test description',\n    isPublic: false,\n    userId: 'user-1',\n    createdAt: new Date('2024-01-01T00:00:00Z'),\n    updatedAt: new Date('2024-01-01T00:00:00Z'),\n    widgets: [],\n    settings: {\n      backgroundColor: '#ffffff',\n      gridSize: 12,\n      autoRefresh: false,\n      refreshInterval: 300,\n    },\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getDashboards', () => {\n    it('should return paginated dashboards', async () => {\n      const mockResponse = {\n        data: [mockDashboard],\n        pagination: { page: 1, totalPages: 1, totalItems: 1 },\n      };\n      mockApiClient.getPaginated.mockResolvedValue(mockResponse);\n\n      const result = await DashboardService.getDashboards({ page: 1 });\n\n      expect(result).toEqual(mockResponse);\n      expect(mockApiClient.getPaginated).toHaveBeenCalledWith('/dashboards', { page: 1 });\n    });\n  });\n\n  describe('createDashboard', () => {\n    it('should create dashboard successfully', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'New description',\n        isPublic: false,\n      };\n      mockApiClient.post.mockResolvedValue(mockDashboard);\n\n      const result = await DashboardService.createDashboard(createRequest);\n\n      expect(result).toEqual(mockDashboard);\n      expect(mockApiClient.post).toHaveBeenCalledWith('/dashboards', createRequest);\n    });\n  });\n\n  describe('updateDashboard', () => {\n    it('should update dashboard successfully', async () => {\n      const updateRequest: UpdateDashboardRequest = {\n        id: '1',\n        name: 'Updated Dashboard',\n        description: 'Updated description',\n        isPublic: true,\n      };\n      const updatedDashboard = { ...mockDashboard, ...updateRequest };\n      mockApiClient.put.mockResolvedValue(updatedDashboard);\n\n      const result = await DashboardService.updateDashboard('1', updateRequest);\n\n      expect(result).toEqual(updatedDashboard);\n      expect(mockApiClient.put).toHaveBeenCalledWith('/dashboards/1', updateRequest);\n    });\n  });\n\n  describe('deleteDashboard', () => {\n    it('should delete dashboard successfully', async () => {\n      mockApiClient.delete.mockResolvedValue(undefined);\n\n      await DashboardService.deleteDashboard('1');\n\n      expect(mockApiClient.delete).toHaveBeenCalledWith('/dashboards/1');\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle network errors', async () => {\n      mockApiClient.get.mockRejectedValue(new Error('Network error'));\n\n      await expect(DashboardService.getDashboard('1')).rejects.toThrow('Network error');\n    });\n  });\n});"],"names":["jest","mock","apiClient","get","fn","post","put","delete","getPaginated","mockApiClient","describe","mockDashboard","id","name","description","isPublic","userId","createdAt","Date","updatedAt","widgets","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","beforeEach","clearAllMocks","it","mockResponse","data","pagination","page","totalPages","totalItems","mockResolvedValue","result","DashboardService","getDashboards","expect","toEqual","toHaveBeenCalledWith","createRequest","createDashboard","updateRequest","updatedDashboard","updateDashboard","undefined","deleteDashboard","mockRejectedValue","Error","getDashboard","rejects","toThrow"],"mappings":";AAKA,sBAAsB;AACtBA,KAAKC,IAAI,CAAC,YAAY,IAAO,CAAA;QAC3BC,WAAW;YACTC,KAAKH,KAAKI,EAAE;YACZC,MAAML,KAAKI,EAAE;YACbE,KAAKN,KAAKI,EAAE;YACZG,QAAQP,KAAKI,EAAE;YACfI,cAAcR,KAAKI,EAAE;QACvB;IACF,CAAA;;;;2BAZiC;uBACP;AAa1B,MAAMK,gBAAgBP,gBAAS;AAE/BQ,SAAS,oBAAoB;IAC3B,MAAMC,gBAA2B;QAC/BC,IAAI;QACJC,MAAM;QACNC,aAAa;QACbC,UAAU;QACVC,QAAQ;QACRC,WAAW,IAAIC,KAAK;QACpBC,WAAW,IAAID,KAAK;QACpBE,SAAS,EAAE;QACXC,UAAU;YACRC,iBAAiB;YACjBC,UAAU;YACVC,aAAa;YACbC,iBAAiB;QACnB;IACF;IAEAC,WAAW;QACT1B,KAAK2B,aAAa;IACpB;IAEAjB,SAAS,iBAAiB;QACxBkB,GAAG,sCAAsC;YACvC,MAAMC,eAAe;gBACnBC,MAAM;oBAACnB;iBAAc;gBACrBoB,YAAY;oBAAEC,MAAM;oBAAGC,YAAY;oBAAGC,YAAY;gBAAE;YACtD;YACAzB,cAAcD,YAAY,CAAC2B,iBAAiB,CAACN;YAE7C,MAAMO,SAAS,MAAMC,2BAAgB,CAACC,aAAa,CAAC;gBAAEN,MAAM;YAAE;YAE9DO,OAAOH,QAAQI,OAAO,CAACX;YACvBU,OAAO9B,cAAcD,YAAY,EAAEiC,oBAAoB,CAAC,eAAe;gBAAET,MAAM;YAAE;QACnF;IACF;IAEAtB,SAAS,mBAAmB;QAC1BkB,GAAG,wCAAwC;YACzC,MAAMc,gBAAwC;gBAC5C7B,MAAM;gBACNC,aAAa;gBACbC,UAAU;YACZ;YACAN,cAAcJ,IAAI,CAAC8B,iBAAiB,CAACxB;YAErC,MAAMyB,SAAS,MAAMC,2BAAgB,CAACM,eAAe,CAACD;YAEtDH,OAAOH,QAAQI,OAAO,CAAC7B;YACvB4B,OAAO9B,cAAcJ,IAAI,EAAEoC,oBAAoB,CAAC,eAAeC;QACjE;IACF;IAEAhC,SAAS,mBAAmB;QAC1BkB,GAAG,wCAAwC;YACzC,MAAMgB,gBAAwC;gBAC5ChC,IAAI;gBACJC,MAAM;gBACNC,aAAa;gBACbC,UAAU;YACZ;YACA,MAAM8B,mBAAmB;gBAAE,GAAGlC,aAAa;gBAAE,GAAGiC,aAAa;YAAC;YAC9DnC,cAAcH,GAAG,CAAC6B,iBAAiB,CAACU;YAEpC,MAAMT,SAAS,MAAMC,2BAAgB,CAACS,eAAe,CAAC,KAAKF;YAE3DL,OAAOH,QAAQI,OAAO,CAACK;YACvBN,OAAO9B,cAAcH,GAAG,EAAEmC,oBAAoB,CAAC,iBAAiBG;QAClE;IACF;IAEAlC,SAAS,mBAAmB;QAC1BkB,GAAG,wCAAwC;YACzCnB,cAAcF,MAAM,CAAC4B,iBAAiB,CAACY;YAEvC,MAAMV,2BAAgB,CAACW,eAAe,CAAC;YAEvCT,OAAO9B,cAAcF,MAAM,EAAEkC,oBAAoB,CAAC;QACpD;IACF;IAEA/B,SAAS,kBAAkB;QACzBkB,GAAG,gCAAgC;YACjCnB,cAAcN,GAAG,CAAC8C,iBAAiB,CAAC,IAAIC,MAAM;YAE9C,MAAMX,OAAOF,2BAAgB,CAACc,YAAY,CAAC,MAAMC,OAAO,CAACC,OAAO,CAAC;QACnE;IACF;AACF"}