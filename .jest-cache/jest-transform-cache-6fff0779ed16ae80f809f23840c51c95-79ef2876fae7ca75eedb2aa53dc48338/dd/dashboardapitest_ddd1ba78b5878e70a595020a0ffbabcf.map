{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/dashboard.api.test.ts"],"sourcesContent":["/**\n * Dashboard API Tests\n * Testing dashboard CRUD operations and mock behavior\n */\n\nimport { dashboardApi, resetMockDashboards } from '../dashboard.api';\nimport type { Dashboard, DashboardListItem, CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\ndescribe('Dashboard API', () => {\n  // Mock timers to control delays\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    resetMockDashboards(); // Reset mock data to initial state\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe('getAll', () => {\n    it('should return all dashboards', async () => {\n      const promise = dashboardApi.getAll();\n      \n      // Fast-forward the simulated delay\n      jest.advanceTimersByTime(500);\n      \n      const dashboards = await promise;\n      \n      expect(dashboards).toBeInstanceOf(Array);\n      expect(dashboards).toHaveLength(3);\n      expect(dashboards[0]).toMatchObject({\n        id: 'dash-1',\n        name: 'Sales Analytics',\n        description: 'Comprehensive sales performance tracking',\n        isPublic: false,\n        widgetCount: 5,\n      });\n    });\n\n    it('should return a copy of dashboards (not mutate original)', async () => {\n      const promise1 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const dashboards1 = await promise1;\n\n      const promise2 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const dashboards2 = await promise2;\n\n      expect(dashboards1).toEqual(dashboards2);\n      expect(dashboards1).not.toBe(dashboards2); // Different array references\n    });\n\n    it('should include all required fields for each dashboard', async () => {\n      const promise = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const dashboards = await promise;\n\n      dashboards.forEach(dashboard => {\n        expect(dashboard).toHaveProperty('id');\n        expect(dashboard).toHaveProperty('name');\n        expect(dashboard).toHaveProperty('description');\n        expect(dashboard).toHaveProperty('isPublic');\n        expect(dashboard).toHaveProperty('updatedAt');\n        expect(dashboard).toHaveProperty('widgetCount');\n        expect(dashboard.updatedAt).toBeInstanceOf(Date);\n      });\n    });\n  });\n\n  describe('getById', () => {\n    it('should return dashboard by ID', async () => {\n      const promise = dashboardApi.getById('dash-1');\n      jest.advanceTimersByTime(300);\n      const dashboard = await promise;\n\n      expect(dashboard).toMatchObject({\n        id: 'dash-1',\n        name: 'Sales Analytics',\n        description: 'Comprehensive sales performance tracking',\n        isPublic: false,\n        widgetCount: 5,\n      });\n      \n      // Check extended properties\n      expect(dashboard.createdAt).toBeInstanceOf(Date);\n      expect(dashboard.widgets).toBeInstanceOf(Array);\n      expect(dashboard.widgets).toHaveLength(0);\n      expect(dashboard.settings).toBeDefined();\n      expect(dashboard.settings.backgroundColor).toBe('#f8fafc');\n      expect(dashboard.settings.gridSize).toBe(24);\n      expect(dashboard.settings.autoRefresh).toBe(true);\n      expect(dashboard.settings.refreshInterval).toBe(300);\n    });\n\n    it('should throw error for non-existent dashboard', async () => {\n      const promise = dashboardApi.getById('non-existent');\n      jest.advanceTimersByTime(300);\n      \n      await expect(promise).rejects.toThrow('Dashboard with ID non-existent not found');\n    });\n\n    it('should return different dashboard for different IDs', async () => {\n      const promise1 = dashboardApi.getById('dash-1');\n      jest.advanceTimersByTime(300);\n      const dashboard1 = await promise1;\n\n      const promise2 = dashboardApi.getById('dash-2');\n      jest.advanceTimersByTime(300);\n      const dashboard2 = await promise2;\n\n      expect(dashboard1.id).not.toBe(dashboard2.id);\n      expect(dashboard1.name).not.toBe(dashboard2.name);\n    });\n  });\n\n  describe('create', () => {\n    it('should create new dashboard', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'Test dashboard creation',\n        isPublic: false,\n      };\n\n      const promise = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const result = await promise;\n\n      expect(result).toHaveProperty('dashboardId');\n      expect(result.dashboardId).toMatch(/^dash-\\d+$/);\n    });\n\n    it('should add created dashboard to the list', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'Another New Dashboard',\n        description: 'Another test',\n        isPublic: true,\n      };\n\n      // Create dashboard\n      const createPromise = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const createResult = await createPromise;\n\n      // Get all dashboards\n      const getAllPromise = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const dashboards = await getAllPromise;\n\n      // Should have one more dashboard\n      expect(dashboards).toHaveLength(4);\n      \n      // Find the created dashboard\n      const createdDashboard = dashboards.find(d => d.id === createResult.dashboardId);\n      expect(createdDashboard).toBeDefined();\n      expect(createdDashboard?.name).toBe(createRequest.name);\n      expect(createdDashboard?.description).toBe(createRequest.description);\n      expect(createdDashboard?.isPublic).toBe(createRequest.isPublic);\n    });\n\n    it('should generate unique IDs', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'Test Dashboard',\n        description: 'Test',\n        isPublic: false,\n      };\n\n      const promise1 = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const result1 = await promise1;\n\n      // Small delay to ensure different timestamp\n      jest.advanceTimersByTime(10);\n\n      const promise2 = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const result2 = await promise2;\n\n      expect(result1.dashboardId).not.toBe(result2.dashboardId);\n    });\n  });\n\n  describe('update', () => {\n    it('should update existing dashboard', async () => {\n      const updateRequest: UpdateDashboardRequest = {\n        name: 'Updated Sales Analytics',\n        description: 'Updated description',\n        isPublic: true,\n      };\n\n      const promise = dashboardApi.update('dash-1', updateRequest);\n      jest.advanceTimersByTime(600);\n      await promise;\n\n      // Verify update by getting the dashboard\n      const getPromise = dashboardApi.getById('dash-1');\n      jest.advanceTimersByTime(300);\n      const dashboard = await getPromise;\n\n      expect(dashboard.name).toBe(updateRequest.name);\n      expect(dashboard.description).toBe(updateRequest.description);\n      expect(dashboard.isPublic).toBe(updateRequest.isPublic);\n    });\n\n    it('should throw error when updating non-existent dashboard', async () => {\n      const updateRequest: UpdateDashboardRequest = {\n        name: 'Updated Name',\n      };\n\n      const promise = dashboardApi.update('non-existent', updateRequest);\n      jest.advanceTimersByTime(600);\n      \n      await expect(promise).rejects.toThrow('Dashboard with ID non-existent not found');\n    });\n\n    it('should update only provided fields', async () => {\n      // Get original state\n      const getPromise1 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const originalDashboards = await getPromise1;\n      const originalDashboard = originalDashboards.find(d => d.id === 'dash-2');\n\n      // Update only name\n      const updateRequest: UpdateDashboardRequest = {\n        name: 'Updated Marketing',\n      };\n\n      const updatePromise = dashboardApi.update('dash-2', updateRequest);\n      jest.advanceTimersByTime(600);\n      await updatePromise;\n\n      // Verify partial update\n      const getPromise2 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const updatedDashboards = await getPromise2;\n      const updatedDashboard = updatedDashboards.find(d => d.id === 'dash-2');\n\n      expect(updatedDashboard?.name).toBe(updateRequest.name);\n      expect(updatedDashboard?.description).toBe(originalDashboard?.description);\n      expect(updatedDashboard?.isPublic).toBe(originalDashboard?.isPublic);\n    });\n\n    it('should update updatedAt timestamp', async () => {\n      const getPromise1 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const originalDashboards = await getPromise1;\n      const originalDashboard = originalDashboards.find(d => d.id === 'dash-3');\n      const originalUpdatedAt = originalDashboard?.updatedAt;\n\n      const updateRequest: UpdateDashboardRequest = {\n        description: 'Updated customer insights',\n      };\n\n      const updatePromise = dashboardApi.update('dash-3', updateRequest);\n      jest.advanceTimersByTime(600);\n      await updatePromise;\n\n      const getPromise2 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const updatedDashboards = await getPromise2;\n      const updatedDashboard = updatedDashboards.find(d => d.id === 'dash-3');\n\n      expect(updatedDashboard?.updatedAt).not.toEqual(originalUpdatedAt);\n      expect(updatedDashboard?.updatedAt.getTime()).toBeGreaterThan(originalUpdatedAt?.getTime() || 0);\n    });\n  });\n\n  describe('delete', () => {\n    it('should delete existing dashboard', async () => {\n      // Get initial count\n      const getPromise1 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const initialDashboards = await getPromise1;\n      const initialCount = initialDashboards.length;\n\n      // Delete dashboard\n      const deletePromise = dashboardApi.delete('dash-1');\n      jest.advanceTimersByTime(400);\n      await deletePromise;\n\n      // Verify deletion\n      const getPromise2 = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const remainingDashboards = await getPromise2;\n\n      expect(remainingDashboards).toHaveLength(initialCount - 1);\n      expect(remainingDashboards.find(d => d.id === 'dash-1')).toBeUndefined();\n    });\n\n    it('should throw error when deleting non-existent dashboard', async () => {\n      const promise = dashboardApi.delete('non-existent');\n      jest.advanceTimersByTime(400);\n      \n      await expect(promise).rejects.toThrow('Dashboard with ID non-existent not found');\n    });\n\n    it('should not be able to get deleted dashboard by ID', async () => {\n      // Delete dashboard\n      const deletePromise = dashboardApi.delete('dash-2');\n      jest.advanceTimersByTime(400);\n      await deletePromise;\n\n      // Try to get deleted dashboard\n      const getPromise = dashboardApi.getById('dash-2');\n      jest.advanceTimersByTime(300);\n      \n      await expect(getPromise).rejects.toThrow('Dashboard with ID dash-2 not found');\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle empty dashboard name in create', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: '',\n        description: 'Empty name test',\n        isPublic: false,\n      };\n\n      const promise = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const result = await promise;\n\n      // Should still create with empty name\n      expect(result.dashboardId).toBeDefined();\n    });\n\n    it('should handle very long descriptions', async () => {\n      const longDescription = 'A'.repeat(1000);\n      const createRequest: CreateDashboardRequest = {\n        name: 'Long Description Dashboard',\n        description: longDescription,\n        isPublic: false,\n      };\n\n      const promise = dashboardApi.create(createRequest);\n      jest.advanceTimersByTime(800);\n      const result = await promise;\n\n      const getPromise = dashboardApi.getAll();\n      jest.advanceTimersByTime(500);\n      const dashboards = await getPromise;\n      \n      const created = dashboards.find(d => d.id === result.dashboardId);\n      expect(created?.description).toBe(longDescription);\n    });\n  });\n});"],"names":["describe","beforeEach","jest","clearAllMocks","useFakeTimers","resetMockDashboards","afterEach","useRealTimers","it","promise","dashboardApi","getAll","advanceTimersByTime","dashboards","expect","toBeInstanceOf","Array","toHaveLength","toMatchObject","id","name","description","isPublic","widgetCount","promise1","dashboards1","promise2","dashboards2","toEqual","not","toBe","forEach","dashboard","toHaveProperty","updatedAt","Date","getById","createdAt","widgets","settings","toBeDefined","backgroundColor","gridSize","autoRefresh","refreshInterval","rejects","toThrow","dashboard1","dashboard2","createRequest","create","result","dashboardId","toMatch","createPromise","createResult","getAllPromise","createdDashboard","find","d","result1","result2","updateRequest","update","getPromise","getPromise1","originalDashboards","originalDashboard","updatePromise","getPromise2","updatedDashboards","updatedDashboard","originalUpdatedAt","getTime","toBeGreaterThan","initialDashboards","initialCount","length","deletePromise","delete","remainingDashboards","toBeUndefined","longDescription","repeat","created"],"mappings":"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"}