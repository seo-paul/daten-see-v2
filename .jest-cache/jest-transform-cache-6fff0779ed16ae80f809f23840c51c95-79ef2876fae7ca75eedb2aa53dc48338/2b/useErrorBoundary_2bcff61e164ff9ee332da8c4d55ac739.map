{"version":3,"names":["cov_bug22mvp9","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","getErrorSeverity","isRecoverableError","useErrorBoundary","useErrorBoundaryAnalytics","useErrorBoundaryConfig","config","state","setState","_react","useState","errorCount","isRecovering","stateRef","useRef","current","reportError","useCallback","error","errorInfo","onError","prev","lastErrorTime","Date","now","_loggerconfig","appLogger","startRecovery","completeRecovery","resetErrorCount","analytics","setAnalytics","totalErrors","recoveredErrors","failedRecoveries","averageRecoveryTime","trackError","trackRecovery","recoveryTime","trackFailedRecovery","level","baseConfig","maxRetries","retryDelay","enableAutoRetry","warn","info","recoverableErrors","some","errorType","includes","message","retryCount"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/hooks/error/useErrorBoundary.ts"],"sourcesContent":["/**\n * Error Boundary Hook\n * Enhanced hooks for error boundary management and reporting\n */\n\nimport { useCallback, useRef, useState } from 'react';\n\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\ninterface ErrorBoundaryConfig {\n  maxRetries?: number;\n  retryDelay?: number;\n  enableAutoRetry?: boolean;\n  onError?: (error: Error) => void;\n  onRetry?: (retryCount: number) => void;\n  onMaxRetriesReached?: () => void;\n}\n\ninterface ErrorBoundaryState {\n  errorCount: number;\n  lastErrorTime?: number;\n  isRecovering: boolean;\n}\n\n/**\n * Hook for managing error boundary behavior\n */\nexport function useErrorBoundary(config: ErrorBoundaryConfig = {}): {\n  errorCount: number;\n  lastErrorTime?: number;\n  isRecovering: boolean;\n  reportError: (error: Error, errorInfo?: Record<string, unknown>) => void;\n  startRecovery: () => void;\n  completeRecovery: () => void;\n  resetErrorCount: () => void;\n} {\n  const [state, setState] = useState<ErrorBoundaryState>({\n    errorCount: 0,\n    isRecovering: false,\n  });\n  \n  const stateRef = useRef(state);\n  stateRef.current = state;\n\n  const reportError = useCallback((error: Error, errorInfo?: Record<string, unknown>) => {\n    const { onError } = config;\n    \n    setState(prev => ({\n      ...prev,\n      errorCount: prev.errorCount + 1,\n      lastErrorTime: Date.now(),\n    }));\n\n    appLogger.error('Error boundary error reported', {\n      error,\n      errorCount: stateRef.current.errorCount + 1,\n      ...errorInfo,\n    });\n\n    if (onError) {\n      onError(error);\n    }\n  }, [config]);\n\n  const startRecovery = useCallback(() => {\n    setState(prev => ({ ...prev, isRecovering: true }));\n  }, []);\n\n  const completeRecovery = useCallback(() => {\n    setState(prev => ({ ...prev, isRecovering: false }));\n  }, []);\n\n  const resetErrorCount = useCallback(() => {\n    setState({\n      errorCount: 0,\n      isRecovering: false,\n    });\n  }, []);\n\n  return {\n    ...state,\n    reportError,\n    startRecovery,\n    completeRecovery,\n    resetErrorCount,\n  };\n}\n\n/**\n * Hook for error boundary analytics and monitoring\n */\nexport function useErrorBoundaryAnalytics(): {\n  analytics: {\n    totalErrors: number;\n    recoveredErrors: number;\n    failedRecoveries: number;\n    averageRecoveryTime: number;\n  };\n  trackError: () => void;\n  trackRecovery: (recoveryTime: number) => void;\n  trackFailedRecovery: () => void;\n} {\n  const [analytics, setAnalytics] = useState({\n    totalErrors: 0,\n    recoveredErrors: 0,\n    failedRecoveries: 0,\n    averageRecoveryTime: 0,\n  });\n\n  const trackError = useCallback(() => {\n    setAnalytics(prev => ({\n      ...prev,\n      totalErrors: prev.totalErrors + 1,\n    }));\n  }, []);\n\n  const trackRecovery = useCallback((recoveryTime: number) => {\n    setAnalytics(prev => ({\n      ...prev,\n      recoveredErrors: prev.recoveredErrors + 1,\n      averageRecoveryTime: (prev.averageRecoveryTime + recoveryTime) / 2,\n    }));\n  }, []);\n\n  const trackFailedRecovery = useCallback(() => {\n    setAnalytics(prev => ({\n      ...prev,\n      failedRecoveries: prev.failedRecoveries + 1,\n    }));\n  }, []);\n\n  return {\n    analytics,\n    trackError,\n    trackRecovery,\n    trackFailedRecovery,\n  };\n}\n\n/**\n * Hook for creating error boundary configurations\n */\nexport function useErrorBoundaryConfig(level: 'page' | 'widget' | 'component'): () => ErrorBoundaryConfig {\n  return useCallback((): ErrorBoundaryConfig => {\n    const baseConfig: ErrorBoundaryConfig = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      enableAutoRetry: false,\n    };\n\n    switch (level) {\n      case 'page':\n        return {\n          ...baseConfig,\n          maxRetries: 2,\n          enableAutoRetry: true,\n          onError: (error: Error): void => {\n            appLogger.error('Page-level error occurred', { error, level });\n          },\n        };\n\n      case 'widget':\n        return {\n          ...baseConfig,\n          maxRetries: 3,\n          enableAutoRetry: true,\n          retryDelay: 500,\n          onError: (error: Error): void => {\n            appLogger.warn('Widget-level error occurred', { error, level });\n          },\n        };\n\n      case 'component':\n        return {\n          ...baseConfig,\n          maxRetries: 1,\n          enableAutoRetry: false,\n          onError: (error: Error): void => {\n            appLogger.info('Component-level error occurred', { error, level });\n          },\n        };\n\n      default:\n        return baseConfig;\n    }\n  }, [level]);\n}\n\n/**\n * Utility function to check if error is recoverable\n */\nexport function isRecoverableError(error: Error): boolean {\n  const recoverableErrors = [\n    'ChunkLoadError',\n    'Loading chunk',\n    'Network request failed',\n    'fetch is not defined',\n    'NetworkError',\n    'TimeoutError',\n    'AbortError',\n  ];\n\n  return recoverableErrors.some(errorType => \n    error.name.includes(errorType) || \n    error.message.includes(errorType)\n  );\n}\n\n/**\n * Utility function to get error severity\n */\nexport function getErrorSeverity(\n  error: Error, \n  level: 'page' | 'widget' | 'component',\n  retryCount: number\n): 'low' | 'medium' | 'high' | 'critical' {\n  // Critical errors that crash entire pages\n  if (level === 'page') return 'critical';\n  \n  // High-priority errors\n  if (error.name.includes('TypeError') || error.name.includes('ReferenceError')) {\n    return 'high';\n  }\n  \n  // Network-related errors are usually medium severity\n  if (isRecoverableError(error)) {\n    return retryCount >= 2 ? 'high' : 'medium';\n  }\n  \n  // Component-level errors are usually low-medium severity\n  if (level === 'component') {\n    return retryCount >= 1 ? 'medium' : 'low';\n  }\n  \n  return 'medium';\n}"],"mappings":"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","ignoreList":[]}