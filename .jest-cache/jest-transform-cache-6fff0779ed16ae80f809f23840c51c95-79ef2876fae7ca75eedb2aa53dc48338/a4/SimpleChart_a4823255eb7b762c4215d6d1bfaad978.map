{"version":3,"names":["cov_13l54n6mvg","actualCoverage","s","SimpleChart","f","SimpleKPICard","title","data","type","b","height","className","maxValue","Math","max","map","item","value","_jsxruntime","jsxs","style","jsx","index","backgroundColor","color","_config","CHART_COLORS","dataColors","length","minHeight","label","toLocaleString","total","reduce","sum","cumulativePercentage","width","min","slice","percentage","previousPercentage","background","toFixed","viewBox","i","x1","y1","x2","y2","stroke","strokeWidth","fill","primary","points","x","y","join","cx","cy","r","textAnchor","previousValue","unit","_color","formatValue","val","Intl","NumberFormat","currency","format","trend","trendPercentage","trendColor","TrendIcon","abs"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/charts/SimpleChart.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\nimport { CHART_COLORS } from '@/lib/charts/config';\n\n/**\n * Temporary Simple Chart Component\n * Simplified version to bypass complex Chart.js TypeScript issues\n * Will be replaced with full Chart.js implementation in 1.3.3\n */\n\nexport interface SimpleChartProps {\n  title?: string;\n  data: Array<{\n    label: string;\n    value: number;\n    color?: string;\n  }>;\n  type?: 'bar' | 'line' | 'pie';\n  height?: number;\n  className?: string;\n}\n\nexport function SimpleChart({\n  title,\n  data,\n  type = 'bar',\n  height = 300,\n  className = '',\n}: SimpleChartProps): React.ReactElement {\n  \n  const maxValue = Math.max(...data.map(item => item.value));\n  \n  if (type === 'bar') {\n    return (\n      <div \n        className={`w-full bg-[#FDF9F3] rounded-lg border border-[#E6D7B8] p-4 ${className}`}\n        style={{ height: height + 40 }}\n      >\n        {title && (\n          <h3 className=\"text-lg font-semibold text-[#3d3d3d] mb-4 text-center\">\n            {title}\n          </h3>\n        )}\n        <div className=\"h-full flex items-end justify-around space-x-2 px-2\">\n          {data.map((item, index) => (\n            <div key={index} className=\"flex flex-col items-center space-y-2 flex-1\">\n              <div\n                className=\"w-full rounded-t transition-all duration-700 ease-out\"\n                style={{\n                  height: `${(item.value / maxValue) * (height - 100)}px`,\n                  backgroundColor: item.color || CHART_COLORS.dataColors[index % CHART_COLORS.dataColors.length],\n                  minHeight: '10px',\n                }}\n              />\n              <div className=\"text-xs text-[#5d5d5d] text-center break-words\">\n                {item.label}\n              </div>\n              <div className=\"text-xs font-medium text-[#3d3d3d]\">\n                {item.value.toLocaleString('de-DE')}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  \n  if (type === 'pie') {\n    const total = data.reduce((sum, item) => sum + item.value, 0);\n    let cumulativePercentage = 0;\n    \n    return (\n      <div \n        className={`w-full bg-[#FDF9F3] rounded-lg border border-[#E6D7B8] p-4 ${className}`}\n        style={{ height: height + 40 }}\n      >\n        {title && (\n          <h3 className=\"text-lg font-semibold text-[#3d3d3d] mb-4 text-center\">\n            {title}\n          </h3>\n        )}\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"flex items-center space-x-8\">\n            {/* Simple Pie Representation */}\n            <div \n              className=\"rounded-full border-8 border-[#F5EFE7] relative\"\n              style={{ width: Math.min(height - 100, 200), height: Math.min(height - 100, 200) }}\n            >\n              {data.slice(0, 3).map((item, index) => {\n                const percentage = (item.value / total) * 100;\n                const previousPercentage = cumulativePercentage;\n                cumulativePercentage += percentage;\n                \n                return (\n                  <div\n                    key={index}\n                    className=\"absolute inset-0 rounded-full\"\n                    style={{\n                      background: `conic-gradient(${item.color || CHART_COLORS.dataColors[index]} ${previousPercentage}% ${cumulativePercentage}%, transparent ${cumulativePercentage}%)`,\n                    }}\n                  />\n                );\n              })}\n              <div className=\"absolute inset-4 bg-[#FDF9F3] rounded-full flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-[#3d3d3d]\">\n                    {total.toLocaleString('de-DE')}\n                  </div>\n                  <div className=\"text-sm text-[#5d5d5d]\">\n                    Gesamt\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Legend */}\n            <div className=\"space-y-3\">\n              {data.map((item, index) => {\n                const percentage = ((item.value / total) * 100).toFixed(1);\n                return (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{\n                        backgroundColor: item.color || CHART_COLORS.dataColors[index % CHART_COLORS.dataColors.length],\n                      }}\n                    />\n                    <div className=\"text-sm\">\n                      <div className=\"font-medium text-[#3d3d3d]\">{item.label}</div>\n                      <div className=\"text-[#5d5d5d]\">\n                        {item.value.toLocaleString('de-DE')} ({percentage}%)\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  // Line chart as simple connected dots\n  if (type === 'line') {\n    return (\n      <div \n        className={`w-full bg-[#FDF9F3] rounded-lg border border-[#E6D7B8] p-4 ${className}`}\n        style={{ height: height + 40 }}\n      >\n        {title && (\n          <h3 className=\"text-lg font-semibold text-[#3d3d3d] mb-4 text-center\">\n            {title}\n          </h3>\n        )}\n        <div className=\"h-full relative\">\n          <svg className=\"w-full h-full\" viewBox=\"0 0 400 200\">\n            {/* Grid lines */}\n            {[0, 1, 2, 3, 4].map(i => (\n              <line\n                key={i}\n                x1=\"40\"\n                y1={40 + (i * 32)}\n                x2=\"360\"\n                y2={40 + (i * 32)}\n                stroke=\"#F0E5C8\"\n                strokeWidth=\"1\"\n              />\n            ))}\n            \n            {/* Data line */}\n            <polyline\n              fill=\"none\"\n              stroke={CHART_COLORS.primary}\n              strokeWidth=\"3\"\n              points={data.map((item, index) => {\n                const x = 40 + (index * (320 / (data.length - 1)));\n                const y = 170 - ((item.value / maxValue) * 130);\n                return `${x},${y}`;\n              }).join(' ')}\n            />\n            \n            {/* Data points */}\n            {data.map((item, index) => {\n              const x = 40 + (index * (320 / (data.length - 1)));\n              const y = 170 - ((item.value / maxValue) * 130);\n              return (\n                <g key={index}>\n                  <circle\n                    cx={x}\n                    cy={y}\n                    r=\"4\"\n                    fill={CHART_COLORS.primary}\n                    stroke=\"#FDF9F3\"\n                    strokeWidth=\"2\"\n                  />\n                  <text\n                    x={x}\n                    y=\"195\"\n                    textAnchor=\"middle\"\n                    className=\"text-xs fill-current text-[#5d5d5d]\"\n                  >\n                    {item.label}\n                  </text>\n                </g>\n              );\n            })}\n          </svg>\n        </div>\n      </div>\n    );\n  }\n  \n  return <div>Chart type not supported</div>;\n}\n\n/**\n * Simple KPI Card without complex dependencies\n */\nexport function SimpleKPICard({\n  title,\n  value,\n  previousValue,\n  unit = 'number',\n  color: _color = CHART_COLORS.primary, // Underscore prefix to mark as intentionally unused\n  className = '',\n}: {\n  title: string;\n  value: number;\n  previousValue?: number;\n  unit?: 'currency' | 'percentage' | 'number';\n  color?: string;\n  className?: string;\n}): React.ReactElement {\n  \n  const formatValue = (val: number) => {\n    if (unit === 'currency') {\n      return new Intl.NumberFormat('de-DE', {\n        style: 'currency',\n        currency: 'EUR',\n      }).format(val);\n    }\n    if (unit === 'percentage') {\n      return `${val.toFixed(1)}%`;\n    }\n    return val.toLocaleString('de-DE');\n  };\n  \n  const trend = previousValue \n    ? value > previousValue ? 'up' : value < previousValue ? 'down' : 'neutral'\n    : 'neutral';\n  \n  const trendPercentage = previousValue && previousValue > 0\n    ? ((value - previousValue) / previousValue) * 100\n    : 0;\n  \n  const trendColor = trend === 'up' ? '#4A7C59' : trend === 'down' ? '#B85450' : '#7d7d7d';\n  const TrendIcon = trend === 'up' ? '↗' : trend === 'down' ? '↘' : '→';\n\n  return (\n    <div \n      className={`bg-[#FDF9F3] rounded-lg border border-[#E6D7B8] p-6 hover:shadow-md transition-shadow duration-200 ${className}`}\n    >\n      <h3 className=\"text-base font-medium text-[#3d3d3d] mb-4\">\n        {title}\n      </h3>\n      \n      <div className=\"space-y-3\">\n        <div className=\"text-3xl font-bold text-[#3d3d3d]\">\n          {formatValue(value)}\n        </div>\n        \n        {previousValue && (\n          <div className=\"flex items-center text-sm\">\n            <span style={{ color: trendColor }} className=\"mr-1\">\n              {TrendIcon} {Math.abs(trendPercentage).toFixed(1)}%\n            </span>\n            <span className=\"text-[#5d5d5d]\">\n              vs. vorherige Periode\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"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","ignoreList":[]}