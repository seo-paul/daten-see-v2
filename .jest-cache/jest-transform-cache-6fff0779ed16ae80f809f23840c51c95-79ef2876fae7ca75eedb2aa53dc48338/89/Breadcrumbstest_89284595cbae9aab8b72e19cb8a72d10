2505e9849e995466eb5aacc12ed7705a
/**
 * Breadcrumbs Component Tests - Streamlined
 * Testing core breadcrumb functionality only (Reduced from 80 â†’ 8 tests)
 */ "use strict";
jest.mock('@/contexts/NavigationContext', ()=>({
        useNavigation: ()=>mockNavigationContext
    }));
// Mock next/navigation
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _Breadcrumbs = require("../Breadcrumbs");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock NavigationContext
const mockNavigationContext = {
    currentPath: '/dashboard/123',
    previousPath: '/dashboards',
    breadcrumbs: [],
    pageTitle: 'Dashboard',
    setBreadcrumbs: jest.fn(),
    setPageTitle: jest.fn(),
    generateBreadcrumbs: jest.fn(),
    goBack: jest.fn()
};
describe('Breadcrumbs Component', ()=>{
    const sampleBreadcrumbs = [
        {
            label: 'Home',
            href: '/'
        },
        {
            label: 'Dashboards',
            href: '/dashboards'
        },
        {
            label: 'Analytics Dashboard',
            href: '/dashboard/123'
        }
    ];
    beforeEach(()=>{
        jest.clearAllMocks();
        mockNavigationContext.breadcrumbs = [];
    });
    // Core rendering test
    it('should render breadcrumbs when provided', ()=>{
        mockNavigationContext.breadcrumbs = sampleBreadcrumbs;
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        expect(_react.screen.getByText('Home')).toBeInTheDocument();
        expect(_react.screen.getByText('Dashboards')).toBeInTheDocument();
        expect(_react.screen.getByText('Analytics Dashboard')).toBeInTheDocument();
    });
    // Empty state test
    it('should not render when no breadcrumbs exist', ()=>{
        mockNavigationContext.breadcrumbs = [];
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        expect(_react.screen.queryByRole('navigation')).not.toBeInTheDocument();
    });
    // Link functionality test
    it('should render breadcrumb items as links', ()=>{
        mockNavigationContext.breadcrumbs = sampleBreadcrumbs.slice(0, 2); // Only first two items should be links
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        const homeLink = _react.screen.getByText('Home').closest('a');
        const dashboardsLink = _react.screen.getByText('Dashboards').closest('a');
        expect(homeLink).toHaveAttribute('href', '/');
        expect(dashboardsLink).toHaveAttribute('href', '/dashboards');
    });
    // Current page test
    it('should render current page as text (not link)', ()=>{
        mockNavigationContext.breadcrumbs = sampleBreadcrumbs;
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        const currentPage = _react.screen.getByText('Analytics Dashboard');
        expect(currentPage.closest('a')).toBeNull(); // Should not be a link
    });
    // Separator test
    it('should show separators between breadcrumb items', ()=>{
        mockNavigationContext.breadcrumbs = sampleBreadcrumbs;
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        const separators = _react.screen.getAllByText('/');
        expect(separators).toHaveLength(2); // n-1 separators for n items
    });
    // CompactBreadcrumbs test
    it('should render compact version with ellipsis for long paths', ()=>{
        const longBreadcrumbs = [
            {
                label: 'Home',
                href: '/'
            },
            {
                label: 'Level1',
                href: '/level1'
            },
            {
                label: 'Level2',
                href: '/level2'
            },
            {
                label: 'Level3',
                href: '/level3'
            },
            {
                label: 'Current',
                href: '/current'
            }
        ];
        mockNavigationContext.breadcrumbs = longBreadcrumbs;
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.CompactBreadcrumbs, {}));
        expect(_react.screen.getByText('Home')).toBeInTheDocument();
        expect(_react.screen.getByText('...')).toBeInTheDocument();
        expect(_react.screen.getByText('Current')).toBeInTheDocument();
    });
    // Accessibility test
    it('should have proper accessibility attributes', ()=>{
        mockNavigationContext.breadcrumbs = sampleBreadcrumbs;
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        const nav = _react.screen.getByRole('navigation');
        expect(nav).toHaveAttribute('aria-label', 'Breadcrumb');
    });
    // Single breadcrumb test
    it('should handle single breadcrumb item', ()=>{
        mockNavigationContext.breadcrumbs = [
            {
                label: 'Home',
                href: '/'
            }
        ];
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Breadcrumbs.Breadcrumbs, {}));
        expect(_react.screen.getByText('Home')).toBeInTheDocument();
        expect(_react.screen.queryByText('/')).not.toBeInTheDocument(); // No separator for single item
    });
});

//# sourceMappingURL=data:application/json;base64,