{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/navigation/__tests__/Breadcrumbs.test.tsx"],"sourcesContent":["/**\n * Breadcrumbs Component Tests - Streamlined\n * Testing core breadcrumb functionality only (Reduced from 80 â†’ 8 tests)\n */\n\nimport { render, screen } from '@testing-library/react';\nimport React from 'react';\n\nimport { Breadcrumbs, CompactBreadcrumbs } from '../Breadcrumbs';\nimport type { Breadcrumb } from '@/contexts/NavigationContext';\n\n// Mock NavigationContext\nconst mockNavigationContext = {\n  currentPath: '/dashboard/123',\n  previousPath: '/dashboards',\n  breadcrumbs: [],\n  pageTitle: 'Dashboard',\n  setBreadcrumbs: jest.fn(),\n  setPageTitle: jest.fn(),\n  generateBreadcrumbs: jest.fn(),\n  goBack: jest.fn(),\n};\n\njest.mock('@/contexts/NavigationContext', () => ({\n  useNavigation: () => mockNavigationContext,\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\ndescribe('Breadcrumbs Component', () => {\n  const sampleBreadcrumbs: Breadcrumb[] = [\n    { label: 'Home', href: '/' },\n    { label: 'Dashboards', href: '/dashboards' },\n    { label: 'Analytics Dashboard', href: '/dashboard/123' }\n  ];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockNavigationContext.breadcrumbs = [];\n  });\n\n  // Core rendering test\n  it('should render breadcrumbs when provided', () => {\n    mockNavigationContext.breadcrumbs = sampleBreadcrumbs;\n    render(<Breadcrumbs />);\n    \n    expect(screen.getByText('Home')).toBeInTheDocument();\n    expect(screen.getByText('Dashboards')).toBeInTheDocument();\n    expect(screen.getByText('Analytics Dashboard')).toBeInTheDocument();\n  });\n\n  // Empty state test\n  it('should not render when no breadcrumbs exist', () => {\n    mockNavigationContext.breadcrumbs = [];\n    render(<Breadcrumbs />);\n    \n    expect(screen.queryByRole('navigation')).not.toBeInTheDocument();\n  });\n\n  // Link functionality test\n  it('should render breadcrumb items as links', () => {\n    mockNavigationContext.breadcrumbs = sampleBreadcrumbs.slice(0, 2); // Only first two items should be links\n    render(<Breadcrumbs />);\n    \n    const homeLink = screen.getByText('Home').closest('a');\n    const dashboardsLink = screen.getByText('Dashboards').closest('a');\n    \n    expect(homeLink).toHaveAttribute('href', '/');\n    expect(dashboardsLink).toHaveAttribute('href', '/dashboards');\n  });\n\n  // Current page test\n  it('should render current page as text (not link)', () => {\n    mockNavigationContext.breadcrumbs = sampleBreadcrumbs;\n    render(<Breadcrumbs />);\n    \n    const currentPage = screen.getByText('Analytics Dashboard');\n    expect(currentPage.closest('a')).toBeNull(); // Should not be a link\n  });\n\n  // Separator test\n  it('should show separators between breadcrumb items', () => {\n    mockNavigationContext.breadcrumbs = sampleBreadcrumbs;\n    render(<Breadcrumbs />);\n    \n    const separators = screen.getAllByText('/');\n    expect(separators).toHaveLength(2); // n-1 separators for n items\n  });\n\n  // CompactBreadcrumbs test\n  it('should render compact version with ellipsis for long paths', () => {\n    const longBreadcrumbs = [\n      { label: 'Home', href: '/' },\n      { label: 'Level1', href: '/level1' },\n      { label: 'Level2', href: '/level2' },\n      { label: 'Level3', href: '/level3' },\n      { label: 'Current', href: '/current' }\n    ];\n    mockNavigationContext.breadcrumbs = longBreadcrumbs;\n    \n    render(<CompactBreadcrumbs />);\n    \n    expect(screen.getByText('Home')).toBeInTheDocument();\n    expect(screen.getByText('...')).toBeInTheDocument();\n    expect(screen.getByText('Current')).toBeInTheDocument();\n  });\n\n  // Accessibility test\n  it('should have proper accessibility attributes', () => {\n    mockNavigationContext.breadcrumbs = sampleBreadcrumbs;\n    render(<Breadcrumbs />);\n    \n    const nav = screen.getByRole('navigation');\n    expect(nav).toHaveAttribute('aria-label', 'Breadcrumb');\n  });\n\n  // Single breadcrumb test\n  it('should handle single breadcrumb item', () => {\n    mockNavigationContext.breadcrumbs = [{ label: 'Home', href: '/' }];\n    render(<Breadcrumbs />);\n    \n    expect(screen.getByText('Home')).toBeInTheDocument();\n    expect(screen.queryByText('/')).not.toBeInTheDocument(); // No separator for single item\n  });\n});"],"names":["jest","mock","useNavigation","mockNavigationContext","useRouter","push","fn","replace","back","forward","refresh","prefetch","currentPath","previousPath","breadcrumbs","pageTitle","setBreadcrumbs","setPageTitle","generateBreadcrumbs","goBack","describe","sampleBreadcrumbs","label","href","beforeEach","clearAllMocks","it","render","Breadcrumbs","expect","screen","getByText","toBeInTheDocument","queryByRole","not","slice","homeLink","closest","dashboardsLink","toHaveAttribute","currentPage","toBeNull","separators","getAllByText","toHaveLength","longBreadcrumbs","CompactBreadcrumbs","nav","getByRole","queryByText"],"mappings":"AAAA;;;CAGC;AAoBDA,KAAKC,IAAI,CAAC,gCAAgC,IAAO,CAAA;QAC/CC,eAAe,IAAMC;IACvB,CAAA;AAEA,uBAAuB;AACvBH,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCG,WAAW,IAAO,CAAA;gBAChBC,MAAML,KAAKM,EAAE;gBACbC,SAASP,KAAKM,EAAE;gBAChBE,MAAMR,KAAKM,EAAE;gBACbG,SAAST,KAAKM,EAAE;gBAChBI,SAASV,KAAKM,EAAE;gBAChBK,UAAUX,KAAKM,EAAE;YACnB,CAAA;IACF,CAAA;;;;;uBAhC+B;+DACb;6BAE8B;;;;;;AAGhD,yBAAyB;AACzB,MAAMH,wBAAwB;IAC5BS,aAAa;IACbC,cAAc;IACdC,aAAa,EAAE;IACfC,WAAW;IACXC,gBAAgBhB,KAAKM,EAAE;IACvBW,cAAcjB,KAAKM,EAAE;IACrBY,qBAAqBlB,KAAKM,EAAE;IAC5Ba,QAAQnB,KAAKM,EAAE;AACjB;AAkBAc,SAAS,yBAAyB;IAChC,MAAMC,oBAAkC;QACtC;YAAEC,OAAO;YAAQC,MAAM;QAAI;QAC3B;YAAED,OAAO;YAAcC,MAAM;QAAc;QAC3C;YAAED,OAAO;YAAuBC,MAAM;QAAiB;KACxD;IAEDC,WAAW;QACTxB,KAAKyB,aAAa;QAClBtB,sBAAsBW,WAAW,GAAG,EAAE;IACxC;IAEA,sBAAsB;IACtBY,GAAG,2CAA2C;QAC5CvB,sBAAsBW,WAAW,GAAGO;QACpCM,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnBC,OAAOC,aAAM,CAACC,SAAS,CAAC,SAASC,iBAAiB;QAClDH,OAAOC,aAAM,CAACC,SAAS,CAAC,eAAeC,iBAAiB;QACxDH,OAAOC,aAAM,CAACC,SAAS,CAAC,wBAAwBC,iBAAiB;IACnE;IAEA,mBAAmB;IACnBN,GAAG,+CAA+C;QAChDvB,sBAAsBW,WAAW,GAAG,EAAE;QACtCa,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnBC,OAAOC,aAAM,CAACG,WAAW,CAAC,eAAeC,GAAG,CAACF,iBAAiB;IAChE;IAEA,0BAA0B;IAC1BN,GAAG,2CAA2C;QAC5CvB,sBAAsBW,WAAW,GAAGO,kBAAkBc,KAAK,CAAC,GAAG,IAAI,uCAAuC;QAC1GR,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnB,MAAMQ,WAAWN,aAAM,CAACC,SAAS,CAAC,QAAQM,OAAO,CAAC;QAClD,MAAMC,iBAAiBR,aAAM,CAACC,SAAS,CAAC,cAAcM,OAAO,CAAC;QAE9DR,OAAOO,UAAUG,eAAe,CAAC,QAAQ;QACzCV,OAAOS,gBAAgBC,eAAe,CAAC,QAAQ;IACjD;IAEA,oBAAoB;IACpBb,GAAG,iDAAiD;QAClDvB,sBAAsBW,WAAW,GAAGO;QACpCM,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnB,MAAMY,cAAcV,aAAM,CAACC,SAAS,CAAC;QACrCF,OAAOW,YAAYH,OAAO,CAAC,MAAMI,QAAQ,IAAI,uBAAuB;IACtE;IAEA,iBAAiB;IACjBf,GAAG,mDAAmD;QACpDvB,sBAAsBW,WAAW,GAAGO;QACpCM,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnB,MAAMc,aAAaZ,aAAM,CAACa,YAAY,CAAC;QACvCd,OAAOa,YAAYE,YAAY,CAAC,IAAI,6BAA6B;IACnE;IAEA,0BAA0B;IAC1BlB,GAAG,8DAA8D;QAC/D,MAAMmB,kBAAkB;YACtB;gBAAEvB,OAAO;gBAAQC,MAAM;YAAI;YAC3B;gBAAED,OAAO;gBAAUC,MAAM;YAAU;YACnC;gBAAED,OAAO;gBAAUC,MAAM;YAAU;YACnC;gBAAED,OAAO;gBAAUC,MAAM;YAAU;YACnC;gBAAED,OAAO;gBAAWC,MAAM;YAAW;SACtC;QACDpB,sBAAsBW,WAAW,GAAG+B;QAEpClB,IAAAA,aAAM,gBAAC,qBAACmB,+BAAkB;QAE1BjB,OAAOC,aAAM,CAACC,SAAS,CAAC,SAASC,iBAAiB;QAClDH,OAAOC,aAAM,CAACC,SAAS,CAAC,QAAQC,iBAAiB;QACjDH,OAAOC,aAAM,CAACC,SAAS,CAAC,YAAYC,iBAAiB;IACvD;IAEA,qBAAqB;IACrBN,GAAG,+CAA+C;QAChDvB,sBAAsBW,WAAW,GAAGO;QACpCM,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnB,MAAMmB,MAAMjB,aAAM,CAACkB,SAAS,CAAC;QAC7BnB,OAAOkB,KAAKR,eAAe,CAAC,cAAc;IAC5C;IAEA,yBAAyB;IACzBb,GAAG,wCAAwC;QACzCvB,sBAAsBW,WAAW,GAAG;YAAC;gBAAEQ,OAAO;gBAAQC,MAAM;YAAI;SAAE;QAClEI,IAAAA,aAAM,gBAAC,qBAACC,wBAAW;QAEnBC,OAAOC,aAAM,CAACC,SAAS,CAAC,SAASC,iBAAiB;QAClDH,OAAOC,aAAM,CAACmB,WAAW,CAAC,MAAMf,GAAG,CAACF,iBAAiB,IAAI,+BAA+B;IAC1F;AACF"}