8d3ee5eb5bc452b552aa2d238597ac88
"use strict";

/* istanbul ignore next */
function cov_1yjm602jko() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/store/dashboard.store.ts";
  var hash = "8597c70c31da58e48c88c338dfd385ffeb0adc3c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/store/dashboard.store.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "3": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 35
        }
      },
      "4": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 64
        }
      },
      "6": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "7": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 55,
          column: 1
        }
      },
      "8": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 274,
          column: 8
        }
      },
      "9": {
        start: {
          line: 56,
          column: 96
        },
        end: {
          line: 274,
          column: 5
        }
      },
      "10": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "11": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "12": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 73
        }
      },
      "13": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 71
        }
      },
      "14": {
        start: {
          line: 71,
          column: 45
        },
        end: {
          line: 71,
          column: 69
        }
      },
      "15": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "16": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "17": {
        start: {
          line: 80,
          column: 37
        },
        end: {
          line: 80,
          column: 105
        }
      },
      "18": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "19": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 87,
          column: 19
        }
      },
      "20": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 15
        }
      },
      "21": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "22": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 98,
          column: 19
        }
      },
      "23": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 71
        }
      },
      "24": {
        start: {
          line: 100,
          column: 45
        },
        end: {
          line: 100,
          column: 69
        }
      },
      "25": {
        start: {
          line: 102,
          column: 34
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "26": {
        start: {
          line: 105,
          column: 51
        },
        end: {
          line: 105,
          column: 62
        }
      },
      "27": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 110,
          column: 19
        }
      },
      "28": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 113,
          column: 19
        }
      },
      "29": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "30": {
        start: {
          line: 116,
          column: 37
        },
        end: {
          line: 116,
          column: 104
        }
      },
      "31": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "32": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 124,
          column: 19
        }
      },
      "33": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 28
        }
      },
      "34": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "35": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "36": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 136,
          column: 19
        }
      },
      "37": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 71
        }
      },
      "38": {
        start: {
          line: 138,
          column: 45
        },
        end: {
          line: 138,
          column: 69
        }
      },
      "39": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "40": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "41": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 153,
          column: 21
        }
      },
      "42": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 157,
          column: 19
        }
      },
      "43": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 39
        }
      },
      "44": {
        start: {
          line: 160,
          column: 37
        },
        end: {
          line: 160,
          column: 106
        }
      },
      "45": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 164,
          column: 19
        }
      },
      "46": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 168,
          column: 19
        }
      },
      "47": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 46
        }
      },
      "48": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "49": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "50": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 180,
          column: 19
        }
      },
      "51": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 71
        }
      },
      "52": {
        start: {
          line: 182,
          column: 45
        },
        end: {
          line: 182,
          column: 69
        }
      },
      "53": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 217,
          column: 24
        }
      },
      "54": {
        start: {
          line: 183,
          column: 30
        },
        end: {
          line: 217,
          column: 21
        }
      },
      "55": {
        start: {
          line: 184,
          column: 70
        },
        end: {
          line: 196,
          column: 41
        }
      },
      "56": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "57": {
        start: {
          line: 222,
          column: 37
        },
        end: {
          line: 222,
          column: 106
        }
      },
      "58": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "59": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 230,
          column: 19
        }
      },
      "60": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "61": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "62": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 241,
          column: 19
        }
      },
      "63": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 71
        }
      },
      "64": {
        start: {
          line: 243,
          column: 45
        },
        end: {
          line: 243,
          column: 69
        }
      },
      "65": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 248,
          column: 24
        }
      },
      "66": {
        start: {
          line: 244,
          column: 30
        },
        end: {
          line: 248,
          column: 21
        }
      },
      "67": {
        start: {
          line: 245,
          column: 73
        },
        end: {
          line: 245,
          column: 92
        }
      },
      "68": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 251,
          column: 19
        }
      },
      "69": {
        start: {
          line: 253,
          column: 37
        },
        end: {
          line: 253,
          column: 106
        }
      },
      "70": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 257,
          column: 19
        }
      },
      "71": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 261,
          column: 19
        }
      },
      "72": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "73": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 88
          },
          end: {
            line: 56,
            column: 89
          }
        },
        loc: {
          start: {
            line: 56,
            column: 96
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 63,
            column: 25
          },
          end: {
            line: 63,
            column: 26
          }
        },
        loc: {
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 89,
            column: 9
          }
        },
        line: 63
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 34
          },
          end: {
            line: 71,
            column: 35
          }
        },
        loc: {
          start: {
            line: 71,
            column: 45
          },
          end: {
            line: 71,
            column: 69
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        },
        loc: {
          start: {
            line: 90,
            column: 36
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 90
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 100,
            column: 34
          },
          end: {
            line: 100,
            column: 35
          }
        },
        loc: {
          start: {
            line: 100,
            column: 45
          },
          end: {
            line: 100,
            column: 69
          }
        },
        line: 100
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 47
          }
        },
        loc: {
          start: {
            line: 105,
            column: 51
          },
          end: {
            line: 105,
            column: 62
          }
        },
        line: 105
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 128,
            column: 26
          }
        },
        loc: {
          start: {
            line: 128,
            column: 39
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 128
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 138,
            column: 34
          },
          end: {
            line: 138,
            column: 35
          }
        },
        loc: {
          start: {
            line: 138,
            column: 45
          },
          end: {
            line: 138,
            column: 69
          }
        },
        line: 138
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 20
          },
          end: {
            line: 147,
            column: 21
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 153,
            column: 21
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 172,
            column: 25
          },
          end: {
            line: 172,
            column: 26
          }
        },
        loc: {
          start: {
            line: 172,
            column: 39
          },
          end: {
            line: 232,
            column: 9
          }
        },
        line: 172
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 182,
            column: 34
          },
          end: {
            line: 182,
            column: 35
          }
        },
        loc: {
          start: {
            line: 182,
            column: 45
          },
          end: {
            line: 182,
            column: 69
          }
        },
        line: 182
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 21
          }
        },
        loc: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 217,
            column: 21
          }
        },
        line: 183
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 184,
            column: 57
          },
          end: {
            line: 184,
            column: 58
          }
        },
        loc: {
          start: {
            line: 184,
            column: 70
          },
          end: {
            line: 196,
            column: 41
          }
        },
        line: 184
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 233,
            column: 25
          },
          end: {
            line: 233,
            column: 26
          }
        },
        loc: {
          start: {
            line: 233,
            column: 37
          },
          end: {
            line: 263,
            column: 9
          }
        },
        line: 233
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 243,
            column: 34
          },
          end: {
            line: 243,
            column: 35
          }
        },
        loc: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 69
          }
        },
        line: 243
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 244,
            column: 21
          }
        },
        loc: {
          start: {
            line: 244,
            column: 30
          },
          end: {
            line: 248,
            column: 21
          }
        },
        line: 244
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 245,
            column: 60
          },
          end: {
            line: 245,
            column: 61
          }
        },
        loc: {
          start: {
            line: 245,
            column: 73
          },
          end: {
            line: 245,
            column: 92
          }
        },
        line: 245
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 264,
            column: 29
          },
          end: {
            line: 264,
            column: 30
          }
        },
        loc: {
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 264
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 269,
            column: 20
          },
          end: {
            line: 269,
            column: 21
          }
        },
        loc: {
          start: {
            line: 269,
            column: 24
          },
          end: {
            line: 273,
            column: 9
          }
        },
        line: 269
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 80,
            column: 37
          },
          end: {
            line: 80,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 62
          },
          end: {
            line: 80,
            column: 75
          }
        }, {
          start: {
            line: 80,
            column: 78
          },
          end: {
            line: 80,
            column: 105
          }
        }],
        line: 80
      },
      "1": {
        loc: {
          start: {
            line: 105,
            column: 26
          },
          end: {
            line: 105,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 26
          },
          end: {
            line: 105,
            column: 69
          }
        }, {
          start: {
            line: 105,
            column: 73
          },
          end: {
            line: 105,
            column: 92
          }
        }],
        line: 105
      },
      "2": {
        loc: {
          start: {
            line: 116,
            column: 37
          },
          end: {
            line: 116,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 116,
            column: 62
          },
          end: {
            line: 116,
            column: 75
          }
        }, {
          start: {
            line: 116,
            column: 78
          },
          end: {
            line: 116,
            column: 104
          }
        }],
        line: 116
      },
      "3": {
        loc: {
          start: {
            line: 160,
            column: 37
          },
          end: {
            line: 160,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 62
          },
          end: {
            line: 160,
            column: 75
          }
        }, {
          start: {
            line: 160,
            column: 78
          },
          end: {
            line: 160,
            column: 106
          }
        }],
        line: 160
      },
      "4": {
        loc: {
          start: {
            line: 184,
            column: 70
          },
          end: {
            line: 196,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 97
          },
          end: {
            line: 196,
            column: 29
          }
        }, {
          start: {
            line: 196,
            column: 32
          },
          end: {
            line: 196,
            column: 41
          }
        }],
        line: 184
      },
      "5": {
        loc: {
          start: {
            line: 186,
            column: 35
          },
          end: {
            line: 188,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 35
          },
          end: {
            line: 186,
            column: 44
          }
        }, {
          start: {
            line: 186,
            column: 48
          },
          end: {
            line: 188,
            column: 33
          }
        }],
        line: 186
      },
      "6": {
        loc: {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 191,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 51
          }
        }, {
          start: {
            line: 189,
            column: 55
          },
          end: {
            line: 191,
            column: 33
          }
        }],
        line: 189
      },
      "7": {
        loc: {
          start: {
            line: 192,
            column: 35
          },
          end: {
            line: 194,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 35
          },
          end: {
            line: 192,
            column: 62
          }
        }, {
          start: {
            line: 192,
            column: 66
          },
          end: {
            line: 194,
            column: 33
          }
        }],
        line: 192
      },
      "8": {
        loc: {
          start: {
            line: 197,
            column: 42
          },
          end: {
            line: 215,
            column: 50
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 83
          },
          end: {
            line: 215,
            column: 25
          }
        }, {
          start: {
            line: 215,
            column: 28
          },
          end: {
            line: 215,
            column: 50
          }
        }],
        line: 197
      },
      "9": {
        loc: {
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 201,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 199,
            column: 40
          }
        }, {
          start: {
            line: 199,
            column: 44
          },
          end: {
            line: 201,
            column: 29
          }
        }],
        line: 199
      },
      "10": {
        loc: {
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 204,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 202,
            column: 47
          }
        }, {
          start: {
            line: 202,
            column: 51
          },
          end: {
            line: 204,
            column: 29
          }
        }],
        line: 202
      },
      "11": {
        loc: {
          start: {
            line: 205,
            column: 31
          },
          end: {
            line: 207,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 31
          },
          end: {
            line: 205,
            column: 58
          }
        }, {
          start: {
            line: 205,
            column: 62
          },
          end: {
            line: 207,
            column: 29
          }
        }],
        line: 205
      },
      "12": {
        loc: {
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 213,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 31
          },
          end: {
            line: 208,
            column: 44
          }
        }, {
          start: {
            line: 208,
            column: 48
          },
          end: {
            line: 213,
            column: 29
          }
        }],
        line: 208
      },
      "13": {
        loc: {
          start: {
            line: 222,
            column: 37
          },
          end: {
            line: 222,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 62
          },
          end: {
            line: 222,
            column: 75
          }
        }, {
          start: {
            line: 222,
            column: 78
          },
          end: {
            line: 222,
            column: 106
          }
        }],
        line: 222
      },
      "14": {
        loc: {
          start: {
            line: 246,
            column: 42
          },
          end: {
            line: 246,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 78
          },
          end: {
            line: 246,
            column: 82
          }
        }, {
          start: {
            line: 246,
            column: 85
          },
          end: {
            line: 246,
            column: 107
          }
        }],
        line: 246
      },
      "15": {
        loc: {
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 253,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 62
          },
          end: {
            line: 253,
            column: 75
          }
        }, {
          start: {
            line: 253,
            column: 78
          },
          end: {
            line: 253,
            column: 106
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/store/dashboard.store.ts"],
      sourcesContent: ["import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\n\nimport { appLogger as logger } from '@/lib/monitoring/logger.config';\nimport type { \n  Dashboard, \n  DashboardListItem, \n  CreateDashboardRequest, \n  UpdateDashboardRequest \n} from '@/types/dashboard.types';\n\ninterface DashboardStore {\n  // State\n  dashboards: DashboardListItem[];\n  currentDashboard: Dashboard | null;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  fetchDashboards: () => Promise<void>;\n  fetchDashboard: (id: string) => Promise<Dashboard | null>;\n  createDashboard: (data: CreateDashboardRequest) => Promise<string>;\n  updateDashboard: (data: UpdateDashboardRequest) => Promise<void>;\n  deleteDashboard: (id: string) => Promise<void>;\n  setCurrentDashboard: (dashboard: Dashboard | null) => void;\n  clearError: () => void;\n}\n\n// Mock data for development\nconst mockDashboards: DashboardListItem[] = [\n  {\n    id: 'dash-1',\n    name: 'Sales Analytics',\n    description: '\xDCbersicht \xFCber Verkaufsdaten und KPIs',\n    isPublic: false,\n    updatedAt: new Date('2024-01-15T10:30:00Z'),\n    widgetCount: 6\n  },\n  {\n    id: 'dash-2', \n    name: 'Marketing Dashboard',\n    description: 'Social Media und Kampagnen Performance',\n    isPublic: true,\n    updatedAt: new Date('2024-01-14T16:45:00Z'),\n    widgetCount: 4\n  },\n  {\n    id: 'dash-3',\n    name: 'Operations Monitor',\n    description: 'System Health und Performance Metriken',\n    isPublic: false,\n    updatedAt: new Date('2024-01-13T09:15:00Z'),\n    widgetCount: 8\n  }\n];\n\nconst mockFullDashboard: Dashboard = {\n  id: 'dash-1',\n  name: 'Sales Analytics',\n  description: '\xDCbersicht \xFCber Verkaufsdaten und KPIs',\n  isPublic: false,\n  createdAt: new Date('2024-01-01T10:00:00Z'),\n  updatedAt: new Date('2024-01-15T10:30:00Z'),\n  widgets: [],\n  settings: {\n    backgroundColor: '#f8fafc',\n    gridSize: 24,\n    autoRefresh: true,\n    refreshInterval: 300\n  }\n};\n\nexport const useDashboardStore = create<DashboardStore>()(\n  subscribeWithSelector((set) => ({\n    // Initial state\n    dashboards: [],\n    currentDashboard: null,\n    isLoading: false,\n    error: null,\n\n    // Actions\n    fetchDashboards: async (): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Fetching dashboards list');\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        set({ \n          dashboards: mockDashboards,\n          isLoading: false \n        });\n        \n        logger.info('Dashboards loaded successfully', { \n          count: mockDashboards.length \n        });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboards';\n        logger.error('Failed to fetch dashboards', { error });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    fetchDashboard: async (id: string): Promise<Dashboard | null> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Fetching dashboard details', { dashboardId: id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Mock: return the full dashboard with given ID\n        const dashboard: Dashboard = {\n          ...mockFullDashboard,\n          id,\n          name: mockDashboards.find(d => d.id === id)?.name || 'Unknown Dashboard'\n        };\n        \n        set({ \n          currentDashboard: dashboard,\n          isLoading: false \n        });\n        \n        logger.info('Dashboard loaded successfully', { dashboardId: id });\n        return dashboard;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard';\n        logger.error('Failed to fetch dashboard', { error, dashboardId: id });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n        return null;\n      }\n    },\n\n    createDashboard: async (data: CreateDashboardRequest): Promise<string> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Creating new dashboard', { name: data.name });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        const newDashboard: DashboardListItem = {\n          id: `dash-${Date.now()}`,\n          name: data.name,\n          description: data.description,\n          isPublic: data.isPublic,\n          updatedAt: new Date(),\n          widgetCount: 0\n        };\n        \n        set(state => ({\n          dashboards: [newDashboard, ...state.dashboards],\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard created successfully', { \n          dashboardId: newDashboard.id,\n          name: data.name\n        });\n        \n        return newDashboard.id;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create dashboard';\n        logger.error('Failed to create dashboard', { error, data });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n        throw new Error(errorMessage);\n      }\n    },\n\n    updateDashboard: async (data: UpdateDashboardRequest): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Updating dashboard', { dashboardId: data.id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 600));\n        \n        set(state => ({\n          dashboards: state.dashboards.map(dashboard => \n            dashboard.id === data.id\n              ? {\n                  ...dashboard,\n                  ...(data.name && { name: data.name }),\n                  ...(data.description && { description: data.description }),\n                  ...(data.isPublic !== undefined && { isPublic: data.isPublic }),\n                  updatedAt: new Date()\n                }\n              : dashboard\n          ),\n          currentDashboard: state.currentDashboard?.id === data.id\n            ? {\n                ...state.currentDashboard,\n                ...(data.name && { name: data.name }),\n                ...(data.description && { description: data.description }),\n                ...(data.isPublic !== undefined && { isPublic: data.isPublic }),\n                ...(data.settings && { settings: { ...state.currentDashboard.settings, ...data.settings } }),\n                updatedAt: new Date()\n              }\n            : state.currentDashboard,\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard updated successfully', { dashboardId: data.id });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update dashboard';\n        logger.error('Failed to update dashboard', { error, data });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    deleteDashboard: async (id: string): Promise<void> => {\n      set({ isLoading: true, error: null });\n      \n      try {\n        logger.info('Deleting dashboard', { dashboardId: id });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 400));\n        \n        set(state => ({\n          dashboards: state.dashboards.filter(dashboard => dashboard.id !== id),\n          currentDashboard: state.currentDashboard?.id === id ? null : state.currentDashboard,\n          isLoading: false\n        }));\n        \n        logger.info('Dashboard deleted successfully', { dashboardId: id });\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete dashboard';\n        logger.error('Failed to delete dashboard', { error, dashboardId: id });\n        set({ \n          error: errorMessage,\n          isLoading: false \n        });\n      }\n    },\n\n    setCurrentDashboard: (dashboard: Dashboard | null): void => {\n      set({ currentDashboard: dashboard });\n    },\n\n    clearError: (): void => {\n      set({ error: null });\n    }\n  }))\n);"],
      names: ["useDashboardStore", "mockDashboards", "id", "name", "description", "isPublic", "updatedAt", "Date", "widgetCount", "mockFullDashboard", "createdAt", "widgets", "settings", "backgroundColor", "gridSize", "autoRefresh", "refreshInterval", "create", "subscribeWithSelector", "set", "dashboards", "currentDashboard", "isLoading", "error", "fetchDashboards", "logger", "info", "Promise", "resolve", "setTimeout", "count", "length", "errorMessage", "Error", "message", "fetchDashboard", "dashboardId", "dashboard", "find", "d", "createDashboard", "data", "newDashboard", "now", "state", "updateDashboard", "map", "undefined", "deleteDashboard", "filter", "setCurrentDashboard", "clearError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8597c70c31da58e48c88c338dfd385ffeb0adc3c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yjm602jko = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yjm602jko();
cov_1yjm602jko().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1yjm602jko().s[1]++;
Object.defineProperty(exports, "useDashboardStore", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1yjm602jko().f[0]++;
    cov_1yjm602jko().s[2]++;
    return useDashboardStore;
  }
});
const _zustand =
/* istanbul ignore next */
(cov_1yjm602jko().s[3]++, require("zustand"));
const _middleware =
/* istanbul ignore next */
(cov_1yjm602jko().s[4]++, require("zustand/middleware"));
const _loggerconfig =
/* istanbul ignore next */
(cov_1yjm602jko().s[5]++, require("../lib/monitoring/logger.config"));
// Mock data for development
const mockDashboards =
/* istanbul ignore next */
(cov_1yjm602jko().s[6]++, [{
  id: 'dash-1',
  name: 'Sales Analytics',
  description: 'Übersicht über Verkaufsdaten und KPIs',
  isPublic: false,
  updatedAt: new Date('2024-01-15T10:30:00Z'),
  widgetCount: 6
}, {
  id: 'dash-2',
  name: 'Marketing Dashboard',
  description: 'Social Media und Kampagnen Performance',
  isPublic: true,
  updatedAt: new Date('2024-01-14T16:45:00Z'),
  widgetCount: 4
}, {
  id: 'dash-3',
  name: 'Operations Monitor',
  description: 'System Health und Performance Metriken',
  isPublic: false,
  updatedAt: new Date('2024-01-13T09:15:00Z'),
  widgetCount: 8
}]);
const mockFullDashboard =
/* istanbul ignore next */
(cov_1yjm602jko().s[7]++, {
  id: 'dash-1',
  name: 'Sales Analytics',
  description: 'Übersicht über Verkaufsdaten und KPIs',
  isPublic: false,
  createdAt: new Date('2024-01-01T10:00:00Z'),
  updatedAt: new Date('2024-01-15T10:30:00Z'),
  widgets: [],
  settings: {
    backgroundColor: '#f8fafc',
    gridSize: 24,
    autoRefresh: true,
    refreshInterval: 300
  }
});
const useDashboardStore =
/* istanbul ignore next */
(cov_1yjm602jko().s[8]++, (0, _zustand.create)()((0, _middleware.subscribeWithSelector)(set => {
  /* istanbul ignore next */
  cov_1yjm602jko().f[1]++;
  cov_1yjm602jko().s[9]++;
  return {
    // Initial state
    dashboards: [],
    currentDashboard: null,
    isLoading: false,
    error: null,
    // Actions
    fetchDashboards: async () => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[2]++;
      cov_1yjm602jko().s[10]++;
      set({
        isLoading: true,
        error: null
      });
      /* istanbul ignore next */
      cov_1yjm602jko().s[11]++;
      try {
        /* istanbul ignore next */
        cov_1yjm602jko().s[12]++;
        _loggerconfig.appLogger.info('Fetching dashboards list');
        // Simulate API call
        /* istanbul ignore next */
        cov_1yjm602jko().s[13]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[3]++;
          cov_1yjm602jko().s[14]++;
          return setTimeout(resolve, 500);
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[15]++;
        set({
          dashboards: mockDashboards,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[16]++;
        _loggerconfig.appLogger.info('Dashboards loaded successfully', {
          count: mockDashboards.length
        });
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[17]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_1yjm602jko().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1yjm602jko().b[0][1]++, 'Failed to load dashboards'));
        /* istanbul ignore next */
        cov_1yjm602jko().s[18]++;
        _loggerconfig.appLogger.error('Failed to fetch dashboards', {
          error
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[19]++;
        set({
          error: errorMessage,
          isLoading: false
        });
      }
    },
    fetchDashboard: async id => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[4]++;
      cov_1yjm602jko().s[20]++;
      set({
        isLoading: true,
        error: null
      });
      /* istanbul ignore next */
      cov_1yjm602jko().s[21]++;
      try {
        /* istanbul ignore next */
        cov_1yjm602jko().s[22]++;
        _loggerconfig.appLogger.info('Fetching dashboard details', {
          dashboardId: id
        });
        // Simulate API call
        /* istanbul ignore next */
        cov_1yjm602jko().s[23]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[5]++;
          cov_1yjm602jko().s[24]++;
          return setTimeout(resolve, 300);
        });
        // Mock: return the full dashboard with given ID
        const dashboard =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[25]++, {
          ...mockFullDashboard,
          id,
          name:
          /* istanbul ignore next */
          (cov_1yjm602jko().b[1][0]++, mockDashboards.find(d => {
            /* istanbul ignore next */
            cov_1yjm602jko().f[6]++;
            cov_1yjm602jko().s[26]++;
            return d.id === id;
          })?.name) ||
          /* istanbul ignore next */
          (cov_1yjm602jko().b[1][1]++, 'Unknown Dashboard')
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[27]++;
        set({
          currentDashboard: dashboard,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[28]++;
        _loggerconfig.appLogger.info('Dashboard loaded successfully', {
          dashboardId: id
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[29]++;
        return dashboard;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[30]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_1yjm602jko().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1yjm602jko().b[2][1]++, 'Failed to load dashboard'));
        /* istanbul ignore next */
        cov_1yjm602jko().s[31]++;
        _loggerconfig.appLogger.error('Failed to fetch dashboard', {
          error,
          dashboardId: id
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[32]++;
        set({
          error: errorMessage,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[33]++;
        return null;
      }
    },
    createDashboard: async data => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[7]++;
      cov_1yjm602jko().s[34]++;
      set({
        isLoading: true,
        error: null
      });
      /* istanbul ignore next */
      cov_1yjm602jko().s[35]++;
      try {
        /* istanbul ignore next */
        cov_1yjm602jko().s[36]++;
        _loggerconfig.appLogger.info('Creating new dashboard', {
          name: data.name
        });
        // Simulate API call
        /* istanbul ignore next */
        cov_1yjm602jko().s[37]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[8]++;
          cov_1yjm602jko().s[38]++;
          return setTimeout(resolve, 800);
        });
        const newDashboard =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[39]++, {
          id: `dash-${Date.now()}`,
          name: data.name,
          description: data.description,
          isPublic: data.isPublic,
          updatedAt: new Date(),
          widgetCount: 0
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[40]++;
        set(state => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[9]++;
          cov_1yjm602jko().s[41]++;
          return {
            dashboards: [newDashboard, ...state.dashboards],
            isLoading: false
          };
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[42]++;
        _loggerconfig.appLogger.info('Dashboard created successfully', {
          dashboardId: newDashboard.id,
          name: data.name
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[43]++;
        return newDashboard.id;
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[44]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_1yjm602jko().b[3][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1yjm602jko().b[3][1]++, 'Failed to create dashboard'));
        /* istanbul ignore next */
        cov_1yjm602jko().s[45]++;
        _loggerconfig.appLogger.error('Failed to create dashboard', {
          error,
          data
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[46]++;
        set({
          error: errorMessage,
          isLoading: false
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[47]++;
        throw new Error(errorMessage);
      }
    },
    updateDashboard: async data => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[10]++;
      cov_1yjm602jko().s[48]++;
      set({
        isLoading: true,
        error: null
      });
      /* istanbul ignore next */
      cov_1yjm602jko().s[49]++;
      try {
        /* istanbul ignore next */
        cov_1yjm602jko().s[50]++;
        _loggerconfig.appLogger.info('Updating dashboard', {
          dashboardId: data.id
        });
        // Simulate API call
        /* istanbul ignore next */
        cov_1yjm602jko().s[51]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[11]++;
          cov_1yjm602jko().s[52]++;
          return setTimeout(resolve, 600);
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[53]++;
        set(state => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[12]++;
          cov_1yjm602jko().s[54]++;
          return {
            dashboards: state.dashboards.map(dashboard => {
              /* istanbul ignore next */
              cov_1yjm602jko().f[13]++;
              cov_1yjm602jko().s[55]++;
              return dashboard.id === data.id ?
              /* istanbul ignore next */
              (cov_1yjm602jko().b[4][0]++, {
                ...dashboard,
                ...(
                /* istanbul ignore next */
                (cov_1yjm602jko().b[5][0]++, data.name) &&
                /* istanbul ignore next */
                (cov_1yjm602jko().b[5][1]++, {
                  name: data.name
                })),
                ...(
                /* istanbul ignore next */
                (cov_1yjm602jko().b[6][0]++, data.description) &&
                /* istanbul ignore next */
                (cov_1yjm602jko().b[6][1]++, {
                  description: data.description
                })),
                ...(
                /* istanbul ignore next */
                (cov_1yjm602jko().b[7][0]++, data.isPublic !== undefined) &&
                /* istanbul ignore next */
                (cov_1yjm602jko().b[7][1]++, {
                  isPublic: data.isPublic
                })),
                updatedAt: new Date()
              }) :
              /* istanbul ignore next */
              (cov_1yjm602jko().b[4][1]++, dashboard);
            }),
            currentDashboard: state.currentDashboard?.id === data.id ?
            /* istanbul ignore next */
            (cov_1yjm602jko().b[8][0]++, {
              ...state.currentDashboard,
              ...(
              /* istanbul ignore next */
              (cov_1yjm602jko().b[9][0]++, data.name) &&
              /* istanbul ignore next */
              (cov_1yjm602jko().b[9][1]++, {
                name: data.name
              })),
              ...(
              /* istanbul ignore next */
              (cov_1yjm602jko().b[10][0]++, data.description) &&
              /* istanbul ignore next */
              (cov_1yjm602jko().b[10][1]++, {
                description: data.description
              })),
              ...(
              /* istanbul ignore next */
              (cov_1yjm602jko().b[11][0]++, data.isPublic !== undefined) &&
              /* istanbul ignore next */
              (cov_1yjm602jko().b[11][1]++, {
                isPublic: data.isPublic
              })),
              ...(
              /* istanbul ignore next */
              (cov_1yjm602jko().b[12][0]++, data.settings) &&
              /* istanbul ignore next */
              (cov_1yjm602jko().b[12][1]++, {
                settings: {
                  ...state.currentDashboard.settings,
                  ...data.settings
                }
              })),
              updatedAt: new Date()
            }) :
            /* istanbul ignore next */
            (cov_1yjm602jko().b[8][1]++, state.currentDashboard),
            isLoading: false
          };
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[56]++;
        _loggerconfig.appLogger.info('Dashboard updated successfully', {
          dashboardId: data.id
        });
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[57]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_1yjm602jko().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1yjm602jko().b[13][1]++, 'Failed to update dashboard'));
        /* istanbul ignore next */
        cov_1yjm602jko().s[58]++;
        _loggerconfig.appLogger.error('Failed to update dashboard', {
          error,
          data
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[59]++;
        set({
          error: errorMessage,
          isLoading: false
        });
      }
    },
    deleteDashboard: async id => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[14]++;
      cov_1yjm602jko().s[60]++;
      set({
        isLoading: true,
        error: null
      });
      /* istanbul ignore next */
      cov_1yjm602jko().s[61]++;
      try {
        /* istanbul ignore next */
        cov_1yjm602jko().s[62]++;
        _loggerconfig.appLogger.info('Deleting dashboard', {
          dashboardId: id
        });
        // Simulate API call
        /* istanbul ignore next */
        cov_1yjm602jko().s[63]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[15]++;
          cov_1yjm602jko().s[64]++;
          return setTimeout(resolve, 400);
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[65]++;
        set(state => {
          /* istanbul ignore next */
          cov_1yjm602jko().f[16]++;
          cov_1yjm602jko().s[66]++;
          return {
            dashboards: state.dashboards.filter(dashboard => {
              /* istanbul ignore next */
              cov_1yjm602jko().f[17]++;
              cov_1yjm602jko().s[67]++;
              return dashboard.id !== id;
            }),
            currentDashboard: state.currentDashboard?.id === id ?
            /* istanbul ignore next */
            (cov_1yjm602jko().b[14][0]++, null) :
            /* istanbul ignore next */
            (cov_1yjm602jko().b[14][1]++, state.currentDashboard),
            isLoading: false
          };
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[68]++;
        _loggerconfig.appLogger.info('Dashboard deleted successfully', {
          dashboardId: id
        });
      } catch (error) {
        const errorMessage =
        /* istanbul ignore next */
        (cov_1yjm602jko().s[69]++, error instanceof Error ?
        /* istanbul ignore next */
        (cov_1yjm602jko().b[15][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1yjm602jko().b[15][1]++, 'Failed to delete dashboard'));
        /* istanbul ignore next */
        cov_1yjm602jko().s[70]++;
        _loggerconfig.appLogger.error('Failed to delete dashboard', {
          error,
          dashboardId: id
        });
        /* istanbul ignore next */
        cov_1yjm602jko().s[71]++;
        set({
          error: errorMessage,
          isLoading: false
        });
      }
    },
    setCurrentDashboard: dashboard => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[18]++;
      cov_1yjm602jko().s[72]++;
      set({
        currentDashboard: dashboard
      });
    },
    clearError: () => {
      /* istanbul ignore next */
      cov_1yjm602jko().f[19]++;
      cov_1yjm602jko().s[73]++;
      set({
        error: null
      });
    }
  };
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,