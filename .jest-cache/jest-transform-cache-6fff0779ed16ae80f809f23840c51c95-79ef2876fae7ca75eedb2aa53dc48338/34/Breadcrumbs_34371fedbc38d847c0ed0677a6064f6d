7aef72565e4501b01b1271b7aa14af8f
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Breadcrumbs () {
        return Breadcrumbs;
    },
    get CompactBreadcrumbs () {
        return CompactBreadcrumbs;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _lucidereact = require("lucide-react");
const _link = /*#__PURE__*/ _interop_require_default(require("next/link"));
const _NavigationContext = require("../../contexts/NavigationContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function Breadcrumbs({ className = '', showHome = true }) {
    const { breadcrumbs } = (0, _NavigationContext.useNavigation)();
    if (breadcrumbs.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: className
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("nav", {
        className: `flex items-center space-x-2 text-sm ${className}`,
        "aria-label": "Breadcrumb",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("ol", {
            className: "flex items-center space-x-2",
            children: breadcrumbs.map((breadcrumb, index)=>{
                const isLast = index === breadcrumbs.length - 1;
                const isHome = breadcrumb.href === '/';
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                    className: "flex items-center",
                    children: [
                        index > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ChevronRight, {
                            className: "h-4 w-4 text-gray-400 mx-2"
                        }),
                        isLast ? // Active/current page - no link
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: "font-medium text-gray-900 flex items-center",
                            "aria-current": "page",
                            children: [
                                isHome && showHome && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Home, {
                                    className: "h-4 w-4 mr-1"
                                }),
                                breadcrumb.label
                            ]
                        }) : // Clickable breadcrumb
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_link.default, {
                            href: breadcrumb.href,
                            className: "text-gray-500 hover:text-gray-700 transition-colors flex items-center",
                            children: [
                                isHome && showHome && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Home, {
                                    className: "h-4 w-4 mr-1"
                                }),
                                breadcrumb.label
                            ]
                        })
                    ]
                }, breadcrumb.href);
            })
        })
    });
}
function CompactBreadcrumbs({ className = '' }) {
    const { breadcrumbs } = (0, _NavigationContext.useNavigation)();
    // Show only last 2 breadcrumbs
    const compactBreadcrumbs = breadcrumbs.slice(-2);
    if (compactBreadcrumbs.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: className
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("nav", {
        className: `flex items-center space-x-2 text-sm ${className}`,
        "aria-label": "Breadcrumb",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("ol", {
            className: "flex items-center space-x-2",
            children: [
                breadcrumbs.length > 2 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                    className: "text-gray-400",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            children: "..."
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ChevronRight, {
                            className: "h-4 w-4 text-gray-400 mx-2 inline"
                        })
                    ]
                }),
                compactBreadcrumbs.map((breadcrumb, index)=>{
                    const isLast = index === compactBreadcrumbs.length - 1;
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                        className: "flex items-center",
                        children: [
                            index > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ChevronRight, {
                                className: "h-4 w-4 text-gray-400 mx-2"
                            }),
                            isLast ? /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "font-medium text-gray-900",
                                "aria-current": "page",
                                children: breadcrumb.label
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_link.default, {
                                href: breadcrumb.href,
                                className: "text-gray-500 hover:text-gray-700 transition-colors",
                                children: breadcrumb.label
                            })
                        ]
                    }, breadcrumb.href);
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,