6a49f54529c6ae40178cb8d775244eba
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get ApiClient () {
        return ApiClient;
    },
    get ApiClientError () {
        return ApiClientError;
    },
    get NetworkError () {
        return NetworkError;
    },
    get TimeoutError () {
        return TimeoutError;
    },
    get apiClient () {
        return apiClient;
    }
});
const _loggerconfig = require("../monitoring/logger.config");
// API Configuration
const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001/api';
const REQUEST_TIMEOUT = 10000; // 10 seconds
class ApiClientError extends Error {
    constructor(message, status, code, details){
        super(message);
        this.name = 'ApiClientError';
        this.status = status;
        this.code = code;
        if (details !== undefined) {
            this.details = details;
        }
    }
}
class NetworkError extends Error {
    constructor(message){
        super(message);
        this.name = 'NetworkError';
    }
}
class TimeoutError extends Error {
    constructor(){
        super('Request timeout');
        this.name = 'TimeoutError';
    }
}
// API Client Class
class ApiClient {
    constructor(baseURL, timeout = REQUEST_TIMEOUT){
        this.baseURL = baseURL;
        this.defaultTimeout = timeout;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
    }
    // Set authentication token
    setAuthToken(token) {
        this.defaultHeaders['Authorization'] = `Bearer ${token}`;
    }
    // Remove authentication token
    clearAuthToken() {
        delete this.defaultHeaders['Authorization'];
    }
    // Request interceptor
    async prepareRequest(config) {
        const requestId = Math.random().toString(36).substring(7);
        _loggerconfig.appLogger.debug('API request starting', {
            requestId,
            method: config.method,
            url: config.url,
            hasData: !!config.data
        });
        // Merge headers
        const headers = {
            ...this.defaultHeaders,
            ...config.headers || {},
            'X-Request-ID': requestId
        };
        return {
            ...config,
            headers,
            timeout: config.timeout || this.defaultTimeout
        };
    }
    // Response interceptor
    async handleResponse(response, requestId, startTime) {
        const duration = Date.now() - startTime;
        if (!response.ok) {
            let errorData;
            try {
                const rawError = await response.json();
                // Check if it has the expected error structure
                if (rawError.error && typeof rawError.error === 'object') {
                    errorData = rawError;
                } else {
                    throw new Error('Invalid error format');
                }
            } catch  {
                // Fallback for non-JSON error responses
                errorData = {
                    success: false,
                    error: {
                        code: `HTTP_${response.status}`,
                        message: response.statusText || 'Unknown error'
                    },
                    timestamp: new Date().toISOString()
                };
            }
            _loggerconfig.appLogger.error('API request failed', {
                requestId,
                status: response.status,
                errorCode: errorData.error.code,
                errorMessage: errorData.error.message,
                duration
            });
            throw new ApiClientError(errorData.error.message, response.status, errorData.error.code, errorData.error.details);
        }
        const data = await response.json();
        _loggerconfig.appLogger.debug('API request completed', {
            requestId,
            duration
        });
        return data;
    }
    // Core request method
    async request(config) {
        const startTime = Date.now();
        const preparedConfig = await this.prepareRequest({
            ...config,
            headers: config.headers || {}
        });
        const requestId = preparedConfig.headers['X-Request-ID'];
        try {
            // Create AbortController for timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(()=>controller.abort(), preparedConfig.timeout);
            const fetchOptions = {
                method: preparedConfig.method,
                headers: preparedConfig.headers,
                signal: controller.signal
            };
            if (preparedConfig.data) {
                fetchOptions.body = JSON.stringify(preparedConfig.data);
            }
            const response = await fetch(`${this.baseURL}${preparedConfig.url}`, fetchOptions);
            clearTimeout(timeoutId);
            return await this.handleResponse(response, requestId, startTime);
        } catch (error) {
            const duration = Date.now() - startTime;
            if (error instanceof Error) {
                if (error.name === 'AbortError') {
                    _loggerconfig.appLogger.error('API request timeout', {
                        requestId,
                        duration
                    });
                    throw new TimeoutError();
                }
                if (error.name === 'TypeError' || error.message.includes('Network')) {
                    _loggerconfig.appLogger.error('Network error during API request', {
                        requestId,
                        error: error.message,
                        duration
                    });
                    throw new NetworkError('Network connection failed');
                }
            }
            // Re-throw API client errors
            if (error instanceof ApiClientError) {
                throw error;
            }
            // Log unknown errors
            _loggerconfig.appLogger.error('API request unknown error', {
                requestId,
                error: error instanceof Error ? error.message : 'Unknown error',
                duration
            });
            throw error;
        }
    }
    // HTTP Methods
    async get(url, headers) {
        return this.request({
            method: 'GET',
            url,
            headers: headers || {}
        });
    }
    async post(url, data, headers) {
        return this.request({
            method: 'POST',
            url,
            data,
            headers: headers || {}
        });
    }
    async put(url, data, headers) {
        return this.request({
            method: 'PUT',
            url,
            data,
            headers: headers || {}
        });
    }
    async patch(url, data, headers) {
        return this.request({
            method: 'PATCH',
            url,
            data,
            headers: headers || {}
        });
    }
    async delete(url, headers) {
        return this.request({
            method: 'DELETE',
            url,
            headers: headers || {}
        });
    }
}
const apiClient = new ApiClient(API_BASE_URL);

//# sourceMappingURL=data:application/json;base64,