{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/client.ts"],"sourcesContent":["import { appLogger } from '@/lib/monitoring/logger.config';\nimport type { ApiError } from '@/types/api.types';\n\n// API Configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001/api';\nconst REQUEST_TIMEOUT = 10000; // 10 seconds\n\n// Custom Error Classes\nexport class ApiClientError extends Error {\n  public readonly status: number;\n  public readonly code: string;\n  public readonly details?: Record<string, unknown>;\n\n  constructor(message: string, status: number, code: string, details?: Record<string, unknown>) {\n    super(message);\n    this.name = 'ApiClientError';\n    this.status = status;\n    this.code = code;\n    if (details !== undefined) {\n      this.details = details;\n    }\n  }\n}\n\nexport class NetworkError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class TimeoutError extends Error {\n  constructor() {\n    super('Request timeout');\n    this.name = 'TimeoutError';\n  }\n}\n\n// Request/Response Types\ninterface RequestConfig {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  url: string;\n  data?: unknown;\n  headers: Record<string, string>;\n  timeout?: number;\n}\n\n// API Client Class\nclass ApiClient {\n  private baseURL: string;\n  private defaultTimeout: number;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseURL: string, timeout: number = REQUEST_TIMEOUT) {\n    this.baseURL = baseURL;\n    this.defaultTimeout = timeout;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n  }\n\n  // Set authentication token\n  public setAuthToken(token: string): void {\n    this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Remove authentication token\n  public clearAuthToken(): void {\n    delete this.defaultHeaders['Authorization'];\n  }\n\n  // Request interceptor\n  private async prepareRequest(config: RequestConfig): Promise<RequestConfig> {\n    const requestId = Math.random().toString(36).substring(7);\n    \n    appLogger.debug('API request starting', {\n      requestId,\n      method: config.method,\n      url: config.url,\n      hasData: !!config.data,\n    });\n\n    // Merge headers\n    const headers = {\n      ...this.defaultHeaders,\n      ...(config.headers || {}),\n      'X-Request-ID': requestId,\n    };\n\n    return {\n      ...config,\n      headers,\n      timeout: config.timeout || this.defaultTimeout,\n    };\n  }\n\n  // Response interceptor\n  private async handleResponse<T>(\n    response: Response,\n    requestId: string,\n    startTime: number\n  ): Promise<T> {\n    const duration = Date.now() - startTime;\n\n    if (!response.ok) {\n      let errorData: ApiError;\n      \n      try {\n        const rawError = await response.json();\n        // Check if it has the expected error structure\n        if (rawError.error && typeof rawError.error === 'object') {\n          errorData = rawError as ApiError;\n        } else {\n          throw new Error('Invalid error format');\n        }\n      } catch {\n        // Fallback for non-JSON error responses\n        errorData = {\n          success: false,\n          error: {\n            code: `HTTP_${response.status}`,\n            message: response.statusText || 'Unknown error',\n          },\n          timestamp: new Date().toISOString(),\n        };\n      }\n\n      appLogger.error('API request failed', {\n        requestId,\n        status: response.status,\n        errorCode: errorData.error.code,\n        errorMessage: errorData.error.message,\n        duration,\n      });\n\n      throw new ApiClientError(\n        errorData.error.message,\n        response.status,\n        errorData.error.code,\n        errorData.error.details\n      );\n    }\n\n    const data = await response.json();\n\n    appLogger.debug('API request completed', {\n      requestId,\n      duration,\n    });\n\n    return data;\n  }\n\n  // Core request method\n  public async request<T>(config: Omit<RequestConfig, 'headers'> & { headers?: Record<string, string> }): Promise<T> {\n    const startTime = Date.now();\n    const preparedConfig = await this.prepareRequest({\n      ...config,\n      headers: config.headers || {},\n    } as RequestConfig);\n    const requestId = preparedConfig.headers['X-Request-ID'] as string;\n\n    try {\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), preparedConfig.timeout);\n\n      const fetchOptions: RequestInit = {\n        method: preparedConfig.method,\n        headers: preparedConfig.headers,\n        signal: controller.signal,\n      };\n      \n      if (preparedConfig.data) {\n        fetchOptions.body = JSON.stringify(preparedConfig.data);\n      }\n      \n      const response = await fetch(`${this.baseURL}${preparedConfig.url}`, fetchOptions);\n\n      clearTimeout(timeoutId);\n\n      return await this.handleResponse<T>(response, requestId, startTime);\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      if (error instanceof Error) {\n        if (error.name === 'AbortError') {\n          appLogger.error('API request timeout', { requestId, duration });\n          throw new TimeoutError();\n        }\n\n        if (error.name === 'TypeError' || error.message.includes('Network')) {\n          appLogger.error('Network error during API request', { requestId, error: error.message, duration });\n          throw new NetworkError('Network connection failed');\n        }\n      }\n\n      // Re-throw API client errors\n      if (error instanceof ApiClientError) {\n        throw error;\n      }\n\n      // Log unknown errors\n      appLogger.error('API request unknown error', {\n        requestId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        duration,\n      });\n\n      throw error;\n    }\n  }\n\n  // HTTP Methods\n  public async get<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'GET', url, headers: headers || {} });\n  }\n\n  public async post<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'POST', url, data, headers: headers || {} });\n  }\n\n  public async put<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PUT', url, data, headers: headers || {} });\n  }\n\n  public async patch<T>(url: string, data?: unknown, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'PATCH', url, data, headers: headers || {} });\n  }\n\n  public async delete<T>(url: string, headers?: Record<string, string>): Promise<T> {\n    return this.request<T>({ method: 'DELETE', url, headers: headers || {} });\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient(API_BASE_URL);\n\n// Export types and errors\nexport type { RequestConfig };\nexport { ApiClient };"],"names":["ApiClient","ApiClientError","NetworkError","TimeoutError","apiClient","API_BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","REQUEST_TIMEOUT","Error","message","status","code","details","name","undefined","baseURL","timeout","defaultTimeout","defaultHeaders","setAuthToken","token","clearAuthToken","prepareRequest","config","requestId","Math","random","toString","substring","appLogger","debug","method","url","hasData","data","headers","handleResponse","response","startTime","duration","Date","now","ok","errorData","rawError","json","error","success","statusText","timestamp","toISOString","errorCode","errorMessage","request","preparedConfig","controller","AbortController","timeoutId","setTimeout","abort","fetchOptions","signal","body","JSON","stringify","fetch","clearTimeout","includes","get","post","put","patch","delete"],"mappings":"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"}