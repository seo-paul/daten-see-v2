f2597b4af3a2ec2d9f957aaff3dca417
"use strict";

/* istanbul ignore next */
function cov_1j8tpdgbub() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/lib/auth/token.ts";
  var hash = "e963f72d7832acdf03a707131aca32b5470ece1b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/lib/auth/token.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "3": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 11,
          column: 60
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "5": {
        start: {
          line: 13,
          column: 39
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "6": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "7": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "8": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 20
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "10": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "11": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 19
        }
      },
      "12": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "13": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "14": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "15": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "17": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "18": {
        start: {
          line: 36,
          column: 32
        },
        end: {
          line: 36,
          column: 88
        }
      },
      "19": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "21": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 95
        }
      },
      "22": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "23": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 57
        }
      },
      "24": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 39
        }
      },
      "25": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "26": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "27": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 31
        }
      },
      "28": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "29": {
        start: {
          line: 54,
          column: 18
        },
        end: {
          line: 54,
          column: 30
        }
      },
      "30": {
        start: {
          line: 55,
          column: 26
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "31": {
        start: {
          line: 56,
          column: 25
        },
        end: {
          line: 56,
          column: 39
        }
      },
      "32": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 54
        }
      },
      "33": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "34": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "35": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "36": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "37": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "38": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 76
        }
      },
      "39": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 72
        }
      },
      "40": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 15
        }
      },
      "41": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "42": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 52
        }
      },
      "43": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "44": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "45": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "46": {
        start: {
          line: 101,
          column: 26
        },
        end: {
          line: 101,
          column: 57
        }
      },
      "47": {
        start: {
          line: 102,
          column: 33
        },
        end: {
          line: 102,
          column: 72
        }
      },
      "48": {
        start: {
          line: 103,
          column: 33
        },
        end: {
          line: 103,
          column: 71
        }
      },
      "49": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 104,
          column: 74
        }
      },
      "50": {
        start: {
          line: 105,
          column: 24
        },
        end: {
          line: 105,
          column: 34
        }
      },
      "51": {
        start: {
          line: 106,
          column: 30
        },
        end: {
          line: 106,
          column: 65
        }
      },
      "52": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 80
        }
      },
      "53": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "54": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "55": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 120,
          column: 14
        }
      },
      "56": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "57": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "58": {
        start: {
          line: 137,
          column: 26
        },
        end: {
          line: 137,
          column: 45
        }
      },
      "59": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 58
        }
      },
      "60": {
        start: {
          line: 143,
          column: 26
        },
        end: {
          line: 143,
          column: 45
        }
      },
      "61": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 38
        }
      },
      "62": {
        start: {
          line: 149,
          column: 26
        },
        end: {
          line: 149,
          column: 45
        }
      },
      "63": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "64": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 25
        }
      },
      "65": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 30
        }
      },
      "66": {
        start: {
          line: 154,
          column: 35
        },
        end: {
          line: 154,
          column: 74
        }
      },
      "67": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 57
        }
      },
      "68": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "69": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "70": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "71": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 47
        }
      },
      "72": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 55
        }
      },
      "73": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 54
        }
      },
      "74": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 73
        }
      },
      "75": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "76": {
        start: {
          line: 177,
          column: 22
        },
        end: {
          line: 177,
          column: 43
        }
      },
      "77": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "78": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "79": {
        start: {
          line: 180,
          column: 53
        },
        end: {
          line: 180,
          column: 104
        }
      },
      "80": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 46
        }
      },
      "81": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 74
        }
      },
      "82": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 186,
          column: 19
        }
      },
      "83": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "84": {
        start: {
          line: 190,
          column: 53
        },
        end: {
          line: 190,
          column: 104
        }
      },
      "85": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 43
        }
      },
      "86": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 74
        }
      },
      "87": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 196,
          column: 19
        }
      },
      "88": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 214,
          column: 9
        }
      },
      "89": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 49
        }
      },
      "90": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 40
        }
      },
      "91": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 40
        }
      },
      "92": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 206,
          column: 74
        }
      },
      "93": {
        start: {
          line: 207,
          column: 32
        },
        end: {
          line: 207,
          column: 147
        }
      },
      "94": {
        start: {
          line: 207,
          column: 83
        },
        end: {
          line: 207,
          column: 136
        }
      },
      "95": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "96": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "97": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 24
        }
      },
      "98": {
        start: {
          line: 219,
          column: 22
        },
        end: {
          line: 219,
          column: 43
        }
      },
      "99": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 32
        }
      },
      "100": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 32
        }
      },
      "101": {
        start: {
          line: 221,
          column: 24
        },
        end: {
          line: 221,
          column: 53
        }
      },
      "102": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "103": {
        start: {
          line: 222,
          column: 22
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "104": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 227,
          column: 10
        }
      },
      "105": {
        start: {
          line: 230,
          column: 21
        },
        end: {
          line: 230,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 33
          }
        },
        loc: {
          start: {
            line: 12,
            column: 47
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 16,
            column: 40
          }
        },
        loc: {
          start: {
            line: 16,
            column: 61
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 34
          }
        },
        loc: {
          start: {
            line: 20,
            column: 53
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 20
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 62
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        loc: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 90,
            column: 6
          },
          end: {
            line: 90,
            column: 7
          }
        },
        loc: {
          start: {
            line: 90,
            column: 21
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 90
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 136,
            column: 6
          },
          end: {
            line: 136,
            column: 7
          }
        },
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 136
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 6
          },
          end: {
            line: 142,
            column: 7
          }
        },
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 148,
            column: 6
          },
          end: {
            line: 148,
            column: 7
          }
        },
        loc: {
          start: {
            line: 148,
            column: 21
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 148
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 159,
            column: 6
          },
          end: {
            line: 159,
            column: 7
          }
        },
        loc: {
          start: {
            line: 159,
            column: 20
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 159
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 176,
            column: 7
          }
        },
        loc: {
          start: {
            line: 176,
            column: 29
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 180,
            column: 35
          },
          end: {
            line: 180,
            column: 36
          }
        },
        loc: {
          start: {
            line: 180,
            column: 53
          },
          end: {
            line: 180,
            column: 104
          }
        },
        line: 180
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 180,
            column: 111
          },
          end: {
            line: 180,
            column: 112
          }
        },
        loc: {
          start: {
            line: 180,
            column: 128
          },
          end: {
            line: 183,
            column: 13
          }
        },
        line: 180
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 183,
            column: 21
          },
          end: {
            line: 183,
            column: 22
          }
        },
        loc: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 187,
            column: 13
          }
        },
        line: 183
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 35
          },
          end: {
            line: 190,
            column: 36
          }
        },
        loc: {
          start: {
            line: 190,
            column: 53
          },
          end: {
            line: 190,
            column: 104
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 190,
            column: 111
          },
          end: {
            line: 190,
            column: 112
          }
        },
        loc: {
          start: {
            line: 190,
            column: 128
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 190
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 193,
            column: 21
          },
          end: {
            line: 193,
            column: 22
          }
        },
        loc: {
          start: {
            line: 193,
            column: 30
          },
          end: {
            line: 197,
            column: 13
          }
        },
        line: 193
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 202,
            column: 6
          },
          end: {
            line: 202,
            column: 7
          }
        },
        loc: {
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 202
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 207,
            column: 78
          },
          end: {
            line: 207,
            column: 79
          }
        },
        loc: {
          start: {
            line: 207,
            column: 83
          },
          end: {
            line: 207,
            column: 136
          }
        },
        line: 207
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 218,
            column: 6
          },
          end: {
            line: 218,
            column: 7
          }
        },
        loc: {
          start: {
            line: 218,
            column: 27
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 218
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 17,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 17,
            column: 45
          }
        }, {
          start: {
            line: 17,
            column: 48
          },
          end: {
            line: 17,
            column: 65
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 20
          }
        }, {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 27
          }
        }, {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 45
          }
        }],
        line: 21
      },
      "4": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "5": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 24,
            column: 20
          }
        }, {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 24,
            column: 47
          }
        }, {
          start: {
            line: 24,
            column: 51
          },
          end: {
            line: 24,
            column: 76
          }
        }],
        line: 24
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "7": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: 30,
            column: 17
          },
          end: {
            line: 30,
            column: 31
          }
        }],
        line: 30
      },
      "8": {
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 36,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 36,
            column: 53
          }
        }, {
          start: {
            line: 36,
            column: 57
          },
          end: {
            line: 36,
            column: 88
          }
        }],
        line: 36
      },
      "9": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "10": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 38,
            column: 29
          }
        }, {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 38,
            column: 79
          }
        }],
        line: 38
      },
      "11": {
        loc: {
          start: {
            line: 39,
            column: 23
          },
          end: {
            line: 39,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 47
          },
          end: {
            line: 39,
            column: 88
          }
        }, {
          start: {
            line: 39,
            column: 91
          },
          end: {
            line: 39,
            column: 95
          }
        }],
        line: 39
      },
      "12": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        }, {
          start: {
            line: 42,
            column: 19
          },
          end: {
            line: 44,
            column: 13
          }
        }],
        line: 40
      },
      "13": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 20
          }
        }, {
          start: {
            line: 40,
            column: 25
          },
          end: {
            line: 40,
            column: 33
          }
        }, {
          start: {
            line: 40,
            column: 37
          },
          end: {
            line: 40,
            column: 45
          }
        }],
        line: 40
      },
      "14": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "15": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "16": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 48
          },
          end: {
            line: 83,
            column: 61
          }
        }, {
          start: {
            line: 83,
            column: 64
          },
          end: {
            line: 83,
            column: 79
          }
        }],
        line: 83
      },
      "17": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "18": {
        loc: {
          start: {
            line: 104,
            column: 30
          },
          end: {
            line: 104,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 45
          },
          end: {
            line: 104,
            column: 67
          }
        }, {
          start: {
            line: 104,
            column: 70
          },
          end: {
            line: 104,
            column: 74
          }
        }],
        line: 104
      },
      "19": {
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 106,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 42
          },
          end: {
            line: 106,
            column: 58
          }
        }, {
          start: {
            line: 106,
            column: 61
          },
          end: {
            line: 106,
            column: 65
          }
        }],
        line: 106
      },
      "20": {
        loc: {
          start: {
            line: 107,
            column: 31
          },
          end: {
            line: 107,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 31
          },
          end: {
            line: 107,
            column: 36
          }
        }, {
          start: {
            line: 107,
            column: 40
          },
          end: {
            line: 107,
            column: 52
          }
        }, {
          start: {
            line: 107,
            column: 56
          },
          end: {
            line: 107,
            column: 65
          }
        }, {
          start: {
            line: 107,
            column: 69
          },
          end: {
            line: 107,
            column: 79
          }
        }],
        line: 107
      },
      "21": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "22": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 108,
            column: 21
          }
        }, {
          start: {
            line: 108,
            column: 25
          },
          end: {
            line: 108,
            column: 34
          }
        }],
        line: 108
      },
      "23": {
        loc: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 48
          },
          end: {
            line: 123,
            column: 61
          }
        }, {
          start: {
            line: 123,
            column: 64
          },
          end: {
            line: 123,
            column: 79
          }
        }],
        line: 123
      },
      "24": {
        loc: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 138,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 35
          },
          end: {
            line: 138,
            column: 50
          }
        }, {
          start: {
            line: 138,
            column: 53
          },
          end: {
            line: 138,
            column: 57
          }
        }],
        line: 138
      },
      "25": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "26": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 32
          }
        }, {
          start: {
            line: 150,
            column: 36
          },
          end: {
            line: 150,
            column: 52
          }
        }],
        line: 150
      },
      "27": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "28": {
        loc: {
          start: {
            line: 170,
            column: 23
          },
          end: {
            line: 170,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 48
          },
          end: {
            line: 170,
            column: 61
          }
        }, {
          start: {
            line: 170,
            column: 64
          },
          end: {
            line: 170,
            column: 79
          }
        }],
        line: 170
      },
      "29": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: 188,
            column: 15
          },
          end: {
            line: 198,
            column: 9
          }
        }],
        line: 178
      },
      "30": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "31": {
        loc: {
          start: {
            line: 211,
            column: 23
          },
          end: {
            line: 211,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 48
          },
          end: {
            line: 211,
            column: 61
          }
        }, {
          start: {
            line: 211,
            column: 64
          },
          end: {
            line: 211,
            column: 79
          }
        }],
        line: 211
      },
      "32": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "33": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 222,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 222,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/lib/auth/token.ts"],
      sourcesContent: ["import { appLogger } from '@/lib/monitoring/logger.config';\n\n// Token storage keys\nconst TOKEN_KEY = 'auth_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n\n// Token interfaces\nexport interface TokenData {\n  token: string;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface StoredTokenInfo {\n  token: string | null;\n  refreshToken: string | null;\n  expiresAt: Date | null;\n  isValid: boolean;\n  isExpired: boolean;\n}\n\nexport interface TokenManager {\n  isClient: boolean;\n  setTokens(tokenData: TokenData): void;\n  getTokenInfo(): StoredTokenInfo;\n  getAccessToken(): string | null;\n  getRefreshToken(): string | null;\n  needsRefresh(): boolean;\n  clearTokens(): void;\n  updateApiClientToken(): void;\n  parseTokenPayload(token: string): Record<string, unknown> | null;\n  getCurrentUserInfo(): { userId?: string; email?: string; role?: string } | null;\n}\n\n/**\n * Secure Token Manager Implementation\n * Handles JWT token storage, validation, and expiration checks\n * Uses localStorage for client-side storage (will be enhanced with httpOnly cookies later)\n */\nclass TokenManagerImpl implements TokenManager {\n  public isClient: boolean;\n\n  constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  /**\n   * Store authentication tokens securely\n   */\n  public setTokens(tokenData: TokenData): void {\n    if (!this.isClient) {\n      appLogger.warn('Token storage attempted on server side');\n      return;\n    }\n\n    try {\n      localStorage.setItem(TOKEN_KEY, tokenData.token);\n      localStorage.setItem(REFRESH_TOKEN_KEY, tokenData.refreshToken);\n      localStorage.setItem(TOKEN_EXPIRY_KEY, tokenData.expiresAt);\n\n      appLogger.debug('Tokens stored successfully', {\n        expiresAt: tokenData.expiresAt,\n        hasToken: !!tokenData.token,\n        hasRefreshToken: !!tokenData.refreshToken,\n      });\n    } catch (error) {\n      appLogger.error('Failed to store tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw new Error('Token storage failed');\n    }\n  }\n\n  /**\n   * Retrieve stored tokens with validation\n   */\n  public getTokenInfo(): StoredTokenInfo {\n    if (!this.isClient) {\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n\n    try {\n      const token = localStorage.getItem(TOKEN_KEY);\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\n      const expiryString = localStorage.getItem(TOKEN_EXPIRY_KEY);\n\n      const expiresAt = expiryString ? new Date(expiryString) : null;\n      const now = new Date();\n\n      const isExpired = expiresAt ? expiresAt <= now : true;\n      const isValid = !!(token && refreshToken && expiresAt && !isExpired);\n\n      if (token && isExpired) {\n        appLogger.debug('Token expired', {\n          expiresAt: expiresAt?.toISOString(),\n          now: now.toISOString(),\n        });\n      }\n\n      return {\n        token,\n        refreshToken,\n        expiresAt,\n        isValid,\n        isExpired,\n      };\n    } catch (error) {\n      appLogger.error('Failed to retrieve tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n  }\n\n  /**\n   * Get current valid access token\n   */\n  public getAccessToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.isValid ? tokenInfo.token : null;\n  }\n\n  /**\n   * Get refresh token for token renewal\n   */\n  public getRefreshToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.refreshToken;\n  }\n\n  /**\n   * Check if token needs refresh (expires in next 5 minutes)\n   */\n  public needsRefresh(): boolean {\n    const tokenInfo = this.getTokenInfo();\n    \n    if (!tokenInfo.expiresAt || !tokenInfo.token) {\n      return false;\n    }\n\n    const now = new Date();\n    const fiveMinutesFromNow = new Date(now.getTime() + 5 * 60 * 1000);\n    \n    return tokenInfo.expiresAt <= fiveMinutesFromNow;\n  }\n\n  /**\n   * Clear all stored tokens\n   */\n  public clearTokens(): void {\n    if (!this.isClient) {\n      return;\n    }\n\n    try {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(TOKEN_EXPIRY_KEY);\n\n      appLogger.debug('Tokens cleared successfully');\n    } catch (error) {\n      appLogger.error('Failed to clear tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n\n  /**\n   * Update API client with current token\n   */\n  public updateApiClientToken(): void {\n    const token = this.getAccessToken();\n    \n    if (token) {\n      // Import dynamically to avoid circular dependency\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.setAuthToken(token);\n        appLogger.debug('API client token updated');\n      }).catch((error) => {\n        appLogger.error('Failed to update API client token', { error });\n      });\n    } else {\n      // Clear token from API client\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.clearAuthToken();\n        appLogger.debug('API client token cleared');\n      }).catch((error) => {\n        appLogger.error('Failed to clear API client token', { error });\n      });\n    }\n  }\n\n  /**\n   * Parse JWT token payload (without verification - for client-side info only)\n   */\n  public parseTokenPayload(token: string): Record<string, unknown> | null {\n    try {\n      const base64Url = token.split('.')[1];\n      if (!base64Url) return null;\n\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      appLogger.warn('Failed to parse token payload', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get user info from current token\n   */\n  public getCurrentUserInfo(): { userId?: string; email?: string; role?: string } | null {\n    const token = this.getAccessToken();\n    if (!token) return null;\n\n    const payload = this.parseTokenPayload(token);\n    if (!payload) return null;\n\n    return {\n      userId: payload.sub as string,\n      email: payload.email as string,\n      role: payload.role as string,\n    };\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = new TokenManagerImpl();"],
      names: ["tokenManager", "TOKEN_KEY", "REFRESH_TOKEN_KEY", "TOKEN_EXPIRY_KEY", "TokenManagerImpl", "isClient", "window", "setTokens", "tokenData", "appLogger", "warn", "localStorage", "setItem", "token", "refreshToken", "expiresAt", "debug", "hasToken", "hasRefreshToken", "error", "Error", "message", "getTokenInfo", "isValid", "isExpired", "getItem", "expiryString", "Date", "now", "toISOString", "getAccessToken", "tokenInfo", "getRefreshToken", "needsRefresh", "fiveMinutesFromNow", "getTime", "clearTokens", "removeItem", "updateApiClientToken", "then", "apiClient", "setAuthToken", "catch", "clearAuthToken", "parseTokenPayload", "base64Url", "split", "base64", "replace", "jsonPayload", "decodeURIComponent", "atob", "map", "c", "charCodeAt", "toString", "slice", "join", "JSON", "parse", "getCurrentUserInfo", "payload", "userId", "sub", "email", "role"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e963f72d7832acdf03a707131aca32b5470ece1b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1j8tpdgbub = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1j8tpdgbub();
cov_1j8tpdgbub().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1j8tpdgbub().s[1]++;
Object.defineProperty(exports, "tokenManager", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[0]++;
    cov_1j8tpdgbub().s[2]++;
    return tokenManager;
  }
});
const _loggerconfig =
/* istanbul ignore next */
(cov_1j8tpdgbub().s[3]++, require("../monitoring/logger.config"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1j8tpdgbub().f[1]++;
  cov_1j8tpdgbub().s[4]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1j8tpdgbub().b[0][0]++;
    cov_1j8tpdgbub().s[5]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1j8tpdgbub().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1j8tpdgbub().s[6]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1j8tpdgbub().s[7]++, new WeakMap());
  /* istanbul ignore next */
  cov_1j8tpdgbub().s[8]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[2]++;
    cov_1j8tpdgbub().s[9]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1j8tpdgbub().f[3]++;
  cov_1j8tpdgbub().s[10]++;
  if (
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().b[2][0]++;
    cov_1j8tpdgbub().s[11]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1j8tpdgbub().b[2][1]++;
  }
  cov_1j8tpdgbub().s[12]++;
  if (
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().b[4][0]++;
    cov_1j8tpdgbub().s[13]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1j8tpdgbub().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1j8tpdgbub().s[14]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1j8tpdgbub().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().b[6][0]++;
    cov_1j8tpdgbub().s[16]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1j8tpdgbub().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1j8tpdgbub().s[17]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1j8tpdgbub().s[18]++,
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1j8tpdgbub().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1j8tpdgbub().s[19]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[21]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1j8tpdgbub().b[12][0]++;
        cov_1j8tpdgbub().s[23]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1j8tpdgbub().b[12][1]++;
        cov_1j8tpdgbub().s[24]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1j8tpdgbub().s[25]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1j8tpdgbub().s[26]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().b[14][0]++;
    cov_1j8tpdgbub().s[27]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1j8tpdgbub().b[14][1]++;
  }
  cov_1j8tpdgbub().s[28]++;
  return newObj;
}
// Token storage keys
const TOKEN_KEY =
/* istanbul ignore next */
(cov_1j8tpdgbub().s[29]++, 'auth_token');
const REFRESH_TOKEN_KEY =
/* istanbul ignore next */
(cov_1j8tpdgbub().s[30]++, 'refresh_token');
const TOKEN_EXPIRY_KEY =
/* istanbul ignore next */
(cov_1j8tpdgbub().s[31]++, 'token_expiry');
/**
 * Secure Token Manager Implementation
 * Handles JWT token storage, validation, and expiration checks
 * Uses localStorage for client-side storage (will be enhanced with httpOnly cookies later)
 */
class TokenManagerImpl {
  constructor() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[4]++;
    cov_1j8tpdgbub().s[32]++;
    this.isClient = typeof window !== 'undefined';
  }
  /**
  * Store authentication tokens securely
  */
  setTokens(tokenData) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[5]++;
    cov_1j8tpdgbub().s[33]++;
    if (!this.isClient) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[15][0]++;
      cov_1j8tpdgbub().s[34]++;
      _loggerconfig.appLogger.warn('Token storage attempted on server side');
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[15][1]++;
    }
    cov_1j8tpdgbub().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[37]++;
      localStorage.setItem(TOKEN_KEY, tokenData.token);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[38]++;
      localStorage.setItem(REFRESH_TOKEN_KEY, tokenData.refreshToken);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[39]++;
      localStorage.setItem(TOKEN_EXPIRY_KEY, tokenData.expiresAt);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[40]++;
      _loggerconfig.appLogger.debug('Tokens stored successfully', {
        expiresAt: tokenData.expiresAt,
        hasToken: !!tokenData.token,
        hasRefreshToken: !!tokenData.refreshToken
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[41]++;
      _loggerconfig.appLogger.error('Failed to store tokens', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[16][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[16][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[42]++;
      throw new Error('Token storage failed');
    }
  }
  /**
  * Retrieve stored tokens with validation
  */
  getTokenInfo() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[6]++;
    cov_1j8tpdgbub().s[43]++;
    if (!this.isClient) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[17][0]++;
      cov_1j8tpdgbub().s[44]++;
      return {
        token: null,
        refreshToken: null,
        expiresAt: null,
        isValid: false,
        isExpired: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[17][1]++;
    }
    cov_1j8tpdgbub().s[45]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[46]++, localStorage.getItem(TOKEN_KEY));
      const refreshToken =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[47]++, localStorage.getItem(REFRESH_TOKEN_KEY));
      const expiryString =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[48]++, localStorage.getItem(TOKEN_EXPIRY_KEY));
      const expiresAt =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[49]++, expiryString ?
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[18][0]++, new Date(expiryString)) :
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[18][1]++, null));
      const now =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[50]++, new Date());
      const isExpired =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[51]++, expiresAt ?
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[19][0]++, expiresAt <= now) :
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[19][1]++, true));
      const isValid =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[52]++, !!(
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[20][0]++, token) &&
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[20][1]++, refreshToken) &&
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[20][2]++, expiresAt) &&
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[20][3]++, !isExpired)));
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[53]++;
      if (
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[22][0]++, token) &&
      /* istanbul ignore next */
      (cov_1j8tpdgbub().b[22][1]++, isExpired)) {
        /* istanbul ignore next */
        cov_1j8tpdgbub().b[21][0]++;
        cov_1j8tpdgbub().s[54]++;
        _loggerconfig.appLogger.debug('Token expired', {
          expiresAt: expiresAt?.toISOString(),
          now: now.toISOString()
        });
      } else
      /* istanbul ignore next */
      {
        cov_1j8tpdgbub().b[21][1]++;
      }
      cov_1j8tpdgbub().s[55]++;
      return {
        token,
        refreshToken,
        expiresAt,
        isValid,
        isExpired
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[56]++;
      _loggerconfig.appLogger.error('Failed to retrieve tokens', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[23][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[57]++;
      return {
        token: null,
        refreshToken: null,
        expiresAt: null,
        isValid: false,
        isExpired: true
      };
    }
  }
  /**
  * Get current valid access token
  */
  getAccessToken() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[7]++;
    const tokenInfo =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[58]++, this.getTokenInfo());
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[59]++;
    return tokenInfo.isValid ?
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[24][0]++, tokenInfo.token) :
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[24][1]++, null);
  }
  /**
  * Get refresh token for token renewal
  */
  getRefreshToken() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[8]++;
    const tokenInfo =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[60]++, this.getTokenInfo());
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[61]++;
    return tokenInfo.refreshToken;
  }
  /**
  * Check if token needs refresh (expires in next 5 minutes)
  */
  needsRefresh() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[9]++;
    const tokenInfo =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[62]++, this.getTokenInfo());
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[26][0]++, !tokenInfo.expiresAt) ||
    /* istanbul ignore next */
    (cov_1j8tpdgbub().b[26][1]++, !tokenInfo.token)) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[25][0]++;
      cov_1j8tpdgbub().s[64]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[25][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[65]++, new Date());
    const fiveMinutesFromNow =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[66]++, new Date(now.getTime() + 5 * 60 * 1000));
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[67]++;
    return tokenInfo.expiresAt <= fiveMinutesFromNow;
  }
  /**
  * Clear all stored tokens
  */
  clearTokens() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[10]++;
    cov_1j8tpdgbub().s[68]++;
    if (!this.isClient) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[27][0]++;
      cov_1j8tpdgbub().s[69]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[27][1]++;
    }
    cov_1j8tpdgbub().s[70]++;
    try {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[71]++;
      localStorage.removeItem(TOKEN_KEY);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[72]++;
      localStorage.removeItem(REFRESH_TOKEN_KEY);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[73]++;
      localStorage.removeItem(TOKEN_EXPIRY_KEY);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[74]++;
      _loggerconfig.appLogger.debug('Tokens cleared successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[75]++;
      _loggerconfig.appLogger.error('Failed to clear tokens', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[28][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[28][1]++, 'Unknown error')
      });
    }
  }
  /**
  * Update API client with current token
  */
  updateApiClientToken() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[11]++;
    const token =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[76]++, this.getAccessToken());
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[77]++;
    if (token) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[29][0]++;
      cov_1j8tpdgbub().s[78]++;
      // Import dynamically to avoid circular dependency
      Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[12]++;
        cov_1j8tpdgbub().s[79]++;
        return /*#__PURE__*/_interop_require_wildcard(require("../api/client"));
      }).then(({
        apiClient
      }) => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[13]++;
        cov_1j8tpdgbub().s[80]++;
        apiClient.setAuthToken(token);
        /* istanbul ignore next */
        cov_1j8tpdgbub().s[81]++;
        _loggerconfig.appLogger.debug('API client token updated');
      }).catch(error => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[14]++;
        cov_1j8tpdgbub().s[82]++;
        _loggerconfig.appLogger.error('Failed to update API client token', {
          error
        });
      });
    } else {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[29][1]++;
      cov_1j8tpdgbub().s[83]++;
      // Clear token from API client
      Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[15]++;
        cov_1j8tpdgbub().s[84]++;
        return /*#__PURE__*/_interop_require_wildcard(require("../api/client"));
      }).then(({
        apiClient
      }) => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[16]++;
        cov_1j8tpdgbub().s[85]++;
        apiClient.clearAuthToken();
        /* istanbul ignore next */
        cov_1j8tpdgbub().s[86]++;
        _loggerconfig.appLogger.debug('API client token cleared');
      }).catch(error => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[17]++;
        cov_1j8tpdgbub().s[87]++;
        _loggerconfig.appLogger.error('Failed to clear API client token', {
          error
        });
      });
    }
  }
  /**
  * Parse JWT token payload (without verification - for client-side info only)
  */
  parseTokenPayload(token) {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[18]++;
    cov_1j8tpdgbub().s[88]++;
    try {
      const base64Url =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[89]++, token.split('.')[1]);
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[90]++;
      if (!base64Url) {
        /* istanbul ignore next */
        cov_1j8tpdgbub().b[30][0]++;
        cov_1j8tpdgbub().s[91]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1j8tpdgbub().b[30][1]++;
      }
      const base64 =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[92]++, base64Url.replace(/-/g, '+').replace(/_/g, '/'));
      const jsonPayload =
      /* istanbul ignore next */
      (cov_1j8tpdgbub().s[93]++, decodeURIComponent(atob(base64).split('').map(c => {
        /* istanbul ignore next */
        cov_1j8tpdgbub().f[19]++;
        cov_1j8tpdgbub().s[94]++;
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join('')));
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[95]++;
      return JSON.parse(jsonPayload);
    } catch (error) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[96]++;
      _loggerconfig.appLogger.warn('Failed to parse token payload', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1j8tpdgbub().b[31][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_1j8tpdgbub().s[97]++;
      return null;
    }
  }
  /**
  * Get user info from current token
  */
  getCurrentUserInfo() {
    /* istanbul ignore next */
    cov_1j8tpdgbub().f[20]++;
    const token =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[98]++, this.getAccessToken());
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[99]++;
    if (!token) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[32][0]++;
      cov_1j8tpdgbub().s[100]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[32][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_1j8tpdgbub().s[101]++, this.parseTokenPayload(token));
    /* istanbul ignore next */
    cov_1j8tpdgbub().s[102]++;
    if (!payload) {
      /* istanbul ignore next */
      cov_1j8tpdgbub().b[33][0]++;
      cov_1j8tpdgbub().s[103]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1j8tpdgbub().b[33][1]++;
    }
    cov_1j8tpdgbub().s[104]++;
    return {
      userId: payload.sub,
      email: payload.email,
      role: payload.role
    };
  }
}
const tokenManager =
/* istanbul ignore next */
(cov_1j8tpdgbub().s[105]++, new TokenManagerImpl());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,