{"version":3,"names":["tokenManager","TOKEN_KEY","cov_1j8tpdgbub","s","REFRESH_TOKEN_KEY","TOKEN_EXPIRY_KEY","TokenManagerImpl","constructor","f","isClient","window","setTokens","tokenData","b","_loggerconfig","appLogger","warn","localStorage","setItem","token","refreshToken","expiresAt","debug","hasToken","hasRefreshToken","error","Error","message","getTokenInfo","isValid","isExpired","getItem","expiryString","Date","now","toISOString","getAccessToken","tokenInfo","getRefreshToken","needsRefresh","fiveMinutesFromNow","getTime","clearTokens","removeItem","updateApiClientToken","Promise","resolve","then","_interop_require_wildcard","require","apiClient","setAuthToken","catch","clearAuthToken","parseTokenPayload","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","getCurrentUserInfo","payload","userId","sub","email","role"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/auth/token.ts"],"sourcesContent":["import { appLogger } from '@/lib/monitoring/logger.config';\n\n// Token storage keys\nconst TOKEN_KEY = 'auth_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst TOKEN_EXPIRY_KEY = 'token_expiry';\n\n// Token interfaces\nexport interface TokenData {\n  token: string;\n  refreshToken: string;\n  expiresAt: string;\n}\n\nexport interface StoredTokenInfo {\n  token: string | null;\n  refreshToken: string | null;\n  expiresAt: Date | null;\n  isValid: boolean;\n  isExpired: boolean;\n}\n\nexport interface TokenManager {\n  isClient: boolean;\n  setTokens(tokenData: TokenData): void;\n  getTokenInfo(): StoredTokenInfo;\n  getAccessToken(): string | null;\n  getRefreshToken(): string | null;\n  needsRefresh(): boolean;\n  clearTokens(): void;\n  updateApiClientToken(): void;\n  parseTokenPayload(token: string): Record<string, unknown> | null;\n  getCurrentUserInfo(): { userId?: string; email?: string; role?: string } | null;\n}\n\n/**\n * Secure Token Manager Implementation\n * Handles JWT token storage, validation, and expiration checks\n * Uses localStorage for client-side storage (will be enhanced with httpOnly cookies later)\n */\nclass TokenManagerImpl implements TokenManager {\n  public isClient: boolean;\n\n  constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  /**\n   * Store authentication tokens securely\n   */\n  public setTokens(tokenData: TokenData): void {\n    if (!this.isClient) {\n      appLogger.warn('Token storage attempted on server side');\n      return;\n    }\n\n    try {\n      localStorage.setItem(TOKEN_KEY, tokenData.token);\n      localStorage.setItem(REFRESH_TOKEN_KEY, tokenData.refreshToken);\n      localStorage.setItem(TOKEN_EXPIRY_KEY, tokenData.expiresAt);\n\n      appLogger.debug('Tokens stored successfully', {\n        expiresAt: tokenData.expiresAt,\n        hasToken: !!tokenData.token,\n        hasRefreshToken: !!tokenData.refreshToken,\n      });\n    } catch (error) {\n      appLogger.error('Failed to store tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw new Error('Token storage failed');\n    }\n  }\n\n  /**\n   * Retrieve stored tokens with validation\n   */\n  public getTokenInfo(): StoredTokenInfo {\n    if (!this.isClient) {\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n\n    try {\n      const token = localStorage.getItem(TOKEN_KEY);\n      const refreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\n      const expiryString = localStorage.getItem(TOKEN_EXPIRY_KEY);\n\n      const expiresAt = expiryString ? new Date(expiryString) : null;\n      const now = new Date();\n\n      const isExpired = expiresAt ? expiresAt <= now : true;\n      const isValid = !!(token && refreshToken && expiresAt && !isExpired);\n\n      if (token && isExpired) {\n        appLogger.debug('Token expired', {\n          expiresAt: expiresAt?.toISOString(),\n          now: now.toISOString(),\n        });\n      }\n\n      return {\n        token,\n        refreshToken,\n        expiresAt,\n        isValid,\n        isExpired,\n      };\n    } catch (error) {\n      appLogger.error('Failed to retrieve tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      return {\n        token: null,\n        refreshToken: null,\n        expiresAt: null,\n        isValid: false,\n        isExpired: true,\n      };\n    }\n  }\n\n  /**\n   * Get current valid access token\n   */\n  public getAccessToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.isValid ? tokenInfo.token : null;\n  }\n\n  /**\n   * Get refresh token for token renewal\n   */\n  public getRefreshToken(): string | null {\n    const tokenInfo = this.getTokenInfo();\n    return tokenInfo.refreshToken;\n  }\n\n  /**\n   * Check if token needs refresh (expires in next 5 minutes)\n   */\n  public needsRefresh(): boolean {\n    const tokenInfo = this.getTokenInfo();\n    \n    if (!tokenInfo.expiresAt || !tokenInfo.token) {\n      return false;\n    }\n\n    const now = new Date();\n    const fiveMinutesFromNow = new Date(now.getTime() + 5 * 60 * 1000);\n    \n    return tokenInfo.expiresAt <= fiveMinutesFromNow;\n  }\n\n  /**\n   * Clear all stored tokens\n   */\n  public clearTokens(): void {\n    if (!this.isClient) {\n      return;\n    }\n\n    try {\n      localStorage.removeItem(TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(TOKEN_EXPIRY_KEY);\n\n      appLogger.debug('Tokens cleared successfully');\n    } catch (error) {\n      appLogger.error('Failed to clear tokens', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n\n  /**\n   * Update API client with current token\n   */\n  public updateApiClientToken(): void {\n    const token = this.getAccessToken();\n    \n    if (token) {\n      // Import dynamically to avoid circular dependency\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.setAuthToken(token);\n        appLogger.debug('API client token updated');\n      }).catch((error) => {\n        appLogger.error('Failed to update API client token', { error });\n      });\n    } else {\n      // Clear token from API client\n      import('@/lib/api/client').then(({ apiClient }) => {\n        apiClient.clearAuthToken();\n        appLogger.debug('API client token cleared');\n      }).catch((error) => {\n        appLogger.error('Failed to clear API client token', { error });\n      });\n    }\n  }\n\n  /**\n   * Parse JWT token payload (without verification - for client-side info only)\n   */\n  public parseTokenPayload(token: string): Record<string, unknown> | null {\n    try {\n      const base64Url = token.split('.')[1];\n      if (!base64Url) return null;\n\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      appLogger.warn('Failed to parse token payload', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get user info from current token\n   */\n  public getCurrentUserInfo(): { userId?: string; email?: string; role?: string } | null {\n    const token = this.getAccessToken();\n    if (!token) return null;\n\n    const payload = this.parseTokenPayload(token);\n    if (!payload) return null;\n\n    return {\n      userId: payload.sub as string,\n      email: payload.email as string,\n      role: payload.role as string,\n    };\n  }\n}\n\n// Export singleton instance\nexport const tokenManager = new TokenManagerImpl();"],"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","ignoreList":[]}