9f24115ad6c0b5501cc5665252432103
"use strict";
// Mock Sentry
jest.mock('@sentry/nextjs', ()=>({
        withScope: jest.fn((callback)=>{
            const mockScope = {
                setTag: jest.fn(),
                setLevel: jest.fn(),
                setContext: jest.fn()
            };
            callback(mockScope);
            return 'mock-error-id';
        }),
        captureException: jest.fn()
    }));
// Mock logger
jest.mock('@/lib/monitoring/logger.config', ()=>({
        appLogger: {
            error: jest.fn(),
            info: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _ErrorBoundary = require("../ErrorBoundary");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const ThrowError = ({ shouldThrow })=>{
    if (shouldThrow) {
        throw new Error('Test error');
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "No error"
    });
};
describe('ErrorBoundary', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Suppress console.error for expected error tests
        jest.spyOn(console, 'error').mockImplementation(()=>{});
    });
    afterEach(()=>{
        console.error.mockRestore();
    });
    it('should render children when no error occurs', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: false
            })
        }));
        expect(_react.screen.getByText('No error')).toBeInTheDocument();
    });
    it('should render error UI when error occurs', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText('Oops! Etwas ist schiefgelaufen')).toBeInTheDocument();
        expect(_react.screen.getByText('Seite neu laden')).toBeInTheDocument();
    });
    it('should handle retry functionality', ()=>{
        const TestComponent = ({ shouldThrow })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: shouldThrow
                })
            });
        const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
            shouldThrow: true
        }));
        expect(_react.screen.getByText('Oops! Etwas ist schiefgelaufen')).toBeInTheDocument();
        _react.fireEvent.click(_react.screen.getByText('Seite neu laden'));
        // After retry click, the error boundary should clear its state
        // We need to re-render with a non-throwing component
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
            shouldThrow: false
        }));
        expect(_react.screen.getByText('No error')).toBeInTheDocument();
    });
    it('should capture error in Sentry', ()=>{
        const sentry = require('@sentry/nextjs');
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(sentry.captureException).toHaveBeenCalledWith(expect.objectContaining({
            message: 'Test error'
        }));
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96d2VpZ2VuL1NpdGVzL2RhdGVuLXNlZS12Mi9zcmMvc2hhcmVkL2NvbXBvbmVudHMvX190ZXN0c19fL0Vycm9yQm91bmRhcnkudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gJy4uL0Vycm9yQm91bmRhcnknO1xuXG4vLyBNb2NrIFNlbnRyeVxuamVzdC5tb2NrKCdAc2VudHJ5L25leHRqcycsICgpID0+ICh7XG4gIHdpdGhTY29wZTogamVzdC5mbigoY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBtb2NrU2NvcGUgPSB7XG4gICAgICBzZXRUYWc6IGplc3QuZm4oKSxcbiAgICAgIHNldExldmVsOiBqZXN0LmZuKCksXG4gICAgICBzZXRDb250ZXh0OiBqZXN0LmZuKCksXG4gICAgfTtcbiAgICBjYWxsYmFjayhtb2NrU2NvcGUpO1xuICAgIHJldHVybiAnbW9jay1lcnJvci1pZCc7XG4gIH0pLFxuICBjYXB0dXJlRXhjZXB0aW9uOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIE1vY2sgbG9nZ2VyXG5qZXN0Lm1vY2soJ0AvbGliL21vbml0b3JpbmcvbG9nZ2VyLmNvbmZpZycsICgpID0+ICh7XG4gIGFwcExvZ2dlcjoge1xuICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgaW5mbzogamVzdC5mbigpLFxuICB9LFxufSkpO1xuXG5jb25zdCBUaHJvd0Vycm9yOiBSZWFjdC5GQzx7IHNob3VsZFRocm93OiBib29sZWFuIH0+ID0gKHsgc2hvdWxkVGhyb3cgfSkgPT4ge1xuICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKTtcbiAgfVxuICByZXR1cm4gPGRpdj5ObyBlcnJvcjwvZGl2Pjtcbn07XG5cbmRlc2NyaWJlKCdFcnJvckJvdW5kYXJ5JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAvLyBTdXBwcmVzcyBjb25zb2xlLmVycm9yIGZvciBleHBlY3RlZCBlcnJvciB0ZXN0c1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAoY29uc29sZS5lcnJvciBhcyBqZXN0Lk1vY2spLm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGNoaWxkcmVuIHdoZW4gbm8gZXJyb3Igb2NjdXJzJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgICA8VGhyb3dFcnJvciBzaG91bGRUaHJvdz17ZmFsc2V9IC8+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdObyBlcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBlcnJvciBVSSB3aGVuIGVycm9yIG9jY3VycycsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPFRocm93RXJyb3Igc2hvdWxkVGhyb3c9e3RydWV9IC8+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdPb3BzISBFdHdhcyBpc3Qgc2NoaWVmZ2VsYXVmZW4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VpdGUgbmV1IGxhZGVuJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHJldHJ5IGZ1bmN0aW9uYWxpdHknLCAoKSA9PiB7XG4gICAgY29uc3QgVGVzdENvbXBvbmVudCA9ICh7IHNob3VsZFRocm93IH06IHsgc2hvdWxkVGhyb3c6IGJvb2xlYW4gfSkgPT4gKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxUaHJvd0Vycm9yIHNob3VsZFRocm93PXtzaG91bGRUaHJvd30gLz5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApO1xuXG4gICAgY29uc3QgeyByZXJlbmRlciB9ID0gcmVuZGVyKDxUZXN0Q29tcG9uZW50IHNob3VsZFRocm93PXt0cnVlfSAvPik7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnT29wcyEgRXR3YXMgaXN0IHNjaGllZmdlbGF1ZmVuJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGV4dCgnU2VpdGUgbmV1IGxhZGVuJykpO1xuXG4gICAgLy8gQWZ0ZXIgcmV0cnkgY2xpY2ssIHRoZSBlcnJvciBib3VuZGFyeSBzaG91bGQgY2xlYXIgaXRzIHN0YXRlXG4gICAgLy8gV2UgbmVlZCB0byByZS1yZW5kZXIgd2l0aCBhIG5vbi10aHJvd2luZyBjb21wb25lbnRcbiAgICByZXJlbmRlcig8VGVzdENvbXBvbmVudCBzaG91bGRUaHJvdz17ZmFsc2V9IC8+KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdObyBlcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNhcHR1cmUgZXJyb3IgaW4gU2VudHJ5JywgKCkgPT4ge1xuICAgIGNvbnN0IHNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbmV4dGpzJyk7XG4gICAgXG4gICAgcmVuZGVyKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxUaHJvd0Vycm9yIHNob3VsZFRocm93PXt0cnVlfSAvPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICk7XG5cbiAgICBleHBlY3Qoc2VudHJ5LmNhcHR1cmVFeGNlcHRpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBtZXNzYWdlOiAnVGVzdCBlcnJvcicgfSlcbiAgICApO1xuICB9KTtcbn0pOyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIndpdGhTY29wZSIsImZuIiwiY2FsbGJhY2siLCJtb2NrU2NvcGUiLCJzZXRUYWciLCJzZXRMZXZlbCIsInNldENvbnRleHQiLCJjYXB0dXJlRXhjZXB0aW9uIiwiYXBwTG9nZ2VyIiwiZXJyb3IiLCJpbmZvIiwiVGhyb3dFcnJvciIsInNob3VsZFRocm93IiwiRXJyb3IiLCJkaXYiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwic3B5T24iLCJjb25zb2xlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiYWZ0ZXJFYWNoIiwibW9ja1Jlc3RvcmUiLCJpdCIsInJlbmRlciIsIkVycm9yQm91bmRhcnkiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsIlRlc3RDb21wb25lbnQiLCJyZXJlbmRlciIsImZpcmVFdmVudCIsImNsaWNrIiwic2VudHJ5IiwicmVxdWlyZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7QUFLQSxjQUFjO0FBQ2RBLEtBQUtDLElBQUksQ0FBQyxrQkFBa0IsSUFBTyxDQUFBO1FBQ2pDQyxXQUFXRixLQUFLRyxFQUFFLENBQUMsQ0FBQ0M7WUFDbEIsTUFBTUMsWUFBWTtnQkFDaEJDLFFBQVFOLEtBQUtHLEVBQUU7Z0JBQ2ZJLFVBQVVQLEtBQUtHLEVBQUU7Z0JBQ2pCSyxZQUFZUixLQUFLRyxFQUFFO1lBQ3JCO1lBQ0FDLFNBQVNDO1lBQ1QsT0FBTztRQUNUO1FBQ0FJLGtCQUFrQlQsS0FBS0csRUFBRTtJQUMzQixDQUFBO0FBRUEsY0FBYztBQUNkSCxLQUFLQyxJQUFJLENBQUMsa0NBQWtDLElBQU8sQ0FBQTtRQUNqRFMsV0FBVztZQUNUQyxPQUFPWCxLQUFLRyxFQUFFO1lBQ2RTLE1BQU1aLEtBQUtHLEVBQUU7UUFDZjtJQUNGLENBQUE7Ozs7O3VCQXpCMEM7K0RBQ3hCOytCQUVZOzs7Ozs7QUF3QjlCLE1BQU1VLGFBQWlELENBQUMsRUFBRUMsV0FBVyxFQUFFO0lBQ3JFLElBQUlBLGFBQWE7UUFDZixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFDQSxxQkFBTyxxQkFBQ0M7a0JBQUk7O0FBQ2Q7QUFFQUMsU0FBUyxpQkFBaUI7SUFDeEJDLFdBQVc7UUFDVGxCLEtBQUttQixhQUFhO1FBQ2xCLGtEQUFrRDtRQUNsRG5CLEtBQUtvQixLQUFLLENBQUNDLFNBQVMsU0FBU0Msa0JBQWtCLENBQUMsS0FBTztJQUN6RDtJQUVBQyxVQUFVO1FBQ1BGLFFBQVFWLEtBQUssQ0FBZWEsV0FBVztJQUMxQztJQUVBQyxHQUFHLCtDQUErQztRQUNoREMsSUFBQUEsYUFBTSxnQkFDSixxQkFBQ0MsNEJBQWE7c0JBQ1osY0FBQSxxQkFBQ2Q7Z0JBQVdDLGFBQWE7OztRQUk3QmMsT0FBT0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsYUFBYUMsaUJBQWlCO0lBQ3hEO0lBRUFOLEdBQUcsNENBQTRDO1FBQzdDQyxJQUFBQSxhQUFNLGdCQUNKLHFCQUFDQyw0QkFBYTtzQkFDWixjQUFBLHFCQUFDZDtnQkFBV0MsYUFBYTs7O1FBSTdCYyxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxtQ0FBbUNDLGlCQUFpQjtRQUM1RUgsT0FBT0MsYUFBTSxDQUFDQyxTQUFTLENBQUMsb0JBQW9CQyxpQkFBaUI7SUFDL0Q7SUFFQU4sR0FBRyxxQ0FBcUM7UUFDdEMsTUFBTU8sZ0JBQWdCLENBQUMsRUFBRWxCLFdBQVcsRUFBNEIsaUJBQzlELHFCQUFDYSw0QkFBYTswQkFDWixjQUFBLHFCQUFDZDtvQkFBV0MsYUFBYUE7OztRQUk3QixNQUFNLEVBQUVtQixRQUFRLEVBQUUsR0FBR1AsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ007WUFBY2xCLGFBQWE7O1FBRXhEYyxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxtQ0FBbUNDLGlCQUFpQjtRQUU1RUcsZ0JBQVMsQ0FBQ0MsS0FBSyxDQUFDTixhQUFNLENBQUNDLFNBQVMsQ0FBQztRQUVqQywrREFBK0Q7UUFDL0QscURBQXFEO1FBQ3JERyx1QkFBUyxxQkFBQ0Q7WUFBY2xCLGFBQWE7O1FBRXJDYyxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyxhQUFhQyxpQkFBaUI7SUFDeEQ7SUFFQU4sR0FBRyxrQ0FBa0M7UUFDbkMsTUFBTVcsU0FBU0MsUUFBUTtRQUV2QlgsSUFBQUEsYUFBTSxnQkFDSixxQkFBQ0MsNEJBQWE7c0JBQ1osY0FBQSxxQkFBQ2Q7Z0JBQVdDLGFBQWE7OztRQUk3QmMsT0FBT1EsT0FBTzNCLGdCQUFnQixFQUFFNkIsb0JBQW9CLENBQ2xEVixPQUFPVyxnQkFBZ0IsQ0FBQztZQUFFQyxTQUFTO1FBQWE7SUFFcEQ7QUFDRiJ9