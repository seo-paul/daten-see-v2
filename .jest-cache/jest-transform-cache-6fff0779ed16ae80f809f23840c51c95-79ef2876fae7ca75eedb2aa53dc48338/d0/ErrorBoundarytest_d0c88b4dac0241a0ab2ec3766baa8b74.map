{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/shared/components/__tests__/ErrorBoundary.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react';\nimport React from 'react';\n\nimport { ErrorBoundary } from '../ErrorBoundary';\n\n// Mock Sentry\njest.mock('@sentry/nextjs', () => ({\n  withScope: jest.fn((callback) => {\n    const mockScope = {\n      setTag: jest.fn(),\n      setLevel: jest.fn(),\n      setContext: jest.fn(),\n    };\n    callback(mockScope);\n    return 'mock-error-id';\n  }),\n  captureException: jest.fn(),\n}));\n\n// Mock logger\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    error: jest.fn(),\n    info: jest.fn(),\n  },\n}));\n\nconst ThrowError: React.FC<{ shouldThrow: boolean }> = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('Test error');\n  }\n  return <div>No error</div>;\n};\n\ndescribe('ErrorBoundary', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Suppress console.error for expected error tests\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    (console.error as jest.Mock).mockRestore();\n  });\n\n  it('should render children when no error occurs', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={false} />\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('No error')).toBeInTheDocument();\n  });\n\n  it('should render error UI when error occurs', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('Oops! Etwas ist schiefgelaufen')).toBeInTheDocument();\n    expect(screen.getByText('Seite neu laden')).toBeInTheDocument();\n  });\n\n  it('should render retry button and handle clicks', () => {\n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n\n    expect(screen.getByText('Oops! Etwas ist schiefgelaufen')).toBeInTheDocument();\n    \n    const retryButton = screen.getByText('Seite neu laden');\n    expect(retryButton).toBeInTheDocument();\n    \n    // Verify retry button is clickable\n    fireEvent.click(retryButton);\n    \n    // Button should still be present after click (since error persists in this test)\n    expect(screen.getByText('Seite neu laden')).toBeInTheDocument();\n  });\n\n  it('should capture error in Sentry', () => {\n    const sentry = require('@sentry/nextjs');\n    \n    render(\n      <ErrorBoundary>\n        <ThrowError shouldThrow={true} />\n      </ErrorBoundary>\n    );\n\n    expect(sentry.captureException).toHaveBeenCalledWith(\n      expect.objectContaining({ message: 'Test error' })\n    );\n  });\n});"],"names":["jest","mock","withScope","fn","callback","mockScope","setTag","setLevel","setContext","captureException","appLogger","error","info","ThrowError","shouldThrow","Error","div","describe","beforeEach","clearAllMocks","spyOn","console","mockImplementation","afterEach","mockRestore","it","render","ErrorBoundary","expect","screen","getByText","toBeInTheDocument","retryButton","fireEvent","click","sentry","require","toHaveBeenCalledWith","objectContaining","message"],"mappings":";AAKA,cAAc;AACdA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,WAAWF,KAAKG,EAAE,CAAC,CAACC;YAClB,MAAMC,YAAY;gBAChBC,QAAQN,KAAKG,EAAE;gBACfI,UAAUP,KAAKG,EAAE;gBACjBK,YAAYR,KAAKG,EAAE;YACrB;YACAC,SAASC;YACT,OAAO;QACT;QACAI,kBAAkBT,KAAKG,EAAE;IAC3B,CAAA;AAEA,cAAc;AACdH,KAAKC,IAAI,CAAC,kCAAkC,IAAO,CAAA;QACjDS,WAAW;YACTC,OAAOX,KAAKG,EAAE;YACdS,MAAMZ,KAAKG,EAAE;QACf;IACF,CAAA;;;;;uBAzB0C;+DACxB;+BAEY;;;;;;AAwB9B,MAAMU,aAAiD,CAAC,EAAEC,WAAW,EAAE;IACrE,IAAIA,aAAa;QACf,MAAM,IAAIC,MAAM;IAClB;IACA,qBAAO,qBAACC;kBAAI;;AACd;AAEAC,SAAS,iBAAiB;IACxBC,WAAW;QACTlB,KAAKmB,aAAa;QAClB,kDAAkD;QAClDnB,KAAKoB,KAAK,CAACC,SAAS,SAASC,kBAAkB,CAAC,KAAO;IACzD;IAEAC,UAAU;QACPF,QAAQV,KAAK,CAAea,WAAW;IAC1C;IAEAC,GAAG,+CAA+C;QAChDC,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;sBACZ,cAAA,qBAACd;gBAAWC,aAAa;;;QAI7Bc,OAAOC,aAAM,CAACC,SAAS,CAAC,aAAaC,iBAAiB;IACxD;IAEAN,GAAG,4CAA4C;QAC7CC,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;sBACZ,cAAA,qBAACd;gBAAWC,aAAa;;;QAI7Bc,OAAOC,aAAM,CAACC,SAAS,CAAC,mCAAmCC,iBAAiB;QAC5EH,OAAOC,aAAM,CAACC,SAAS,CAAC,oBAAoBC,iBAAiB;IAC/D;IAEAN,GAAG,gDAAgD;QACjDC,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;sBACZ,cAAA,qBAACd;gBAAWC,aAAa;;;QAI7Bc,OAAOC,aAAM,CAACC,SAAS,CAAC,mCAAmCC,iBAAiB;QAE5E,MAAMC,cAAcH,aAAM,CAACC,SAAS,CAAC;QACrCF,OAAOI,aAAaD,iBAAiB;QAErC,mCAAmC;QACnCE,gBAAS,CAACC,KAAK,CAACF;QAEhB,iFAAiF;QACjFJ,OAAOC,aAAM,CAACC,SAAS,CAAC,oBAAoBC,iBAAiB;IAC/D;IAEAN,GAAG,kCAAkC;QACnC,MAAMU,SAASC,QAAQ;QAEvBV,IAAAA,aAAM,gBACJ,qBAACC,4BAAa;sBACZ,cAAA,qBAACd;gBAAWC,aAAa;;;QAI7Bc,OAAOO,OAAO1B,gBAAgB,EAAE4B,oBAAoB,CAClDT,OAAOU,gBAAgB,CAAC;YAAEC,SAAS;QAAa;IAEpD;AACF"}