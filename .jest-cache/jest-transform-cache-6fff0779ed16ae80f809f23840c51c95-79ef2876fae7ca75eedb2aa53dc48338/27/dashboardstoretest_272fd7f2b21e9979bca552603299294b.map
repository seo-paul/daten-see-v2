{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/store/__tests__/dashboard.store.test.ts"],"sourcesContent":["// Testing Dashboard Store functionality\n\nimport type { CreateDashboardRequest, UpdateDashboardRequest } from '@/types/dashboard.types';\n\nimport { useDashboardStore } from '../dashboard.store';\n\n// Mock the logger\njest.mock('@/lib/monitoring/logger.config', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n  },\n  appLogger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  },\n}));\n\n// Create a proper test wrapper for Zustand store\nconst createTestStore = (): typeof useDashboardStore => {\n  // Reset the store to initial state before each test\n  const initialState = {\n    dashboards: [],\n    currentDashboard: null,\n    isLoading: false,\n    error: null,\n  };\n  \n  useDashboardStore.setState(initialState);\n  \n  return useDashboardStore;\n};\n\ndescribe('Dashboard Store', () => {\n  beforeEach(() => {\n    // Properly reset Zustand store before each test\n    createTestStore();\n  });\n\n  afterEach(() => {\n    // Clean up after each test\n    useDashboardStore.setState({\n      dashboards: [],\n      currentDashboard: null,\n      isLoading: false,\n      error: null,\n    });\n  });\n\n  describe('fetchDashboards', () => {\n    it('should load mock dashboards successfully', async () => {\n      const store = useDashboardStore.getState();\n\n      // Call fetchDashboards\n      const fetchPromise = store.fetchDashboards();\n      \n      // Check loading state immediately\n      let state = useDashboardStore.getState();\n      expect(state.isLoading).toBe(true);\n\n      // Wait for fetch to complete\n      await fetchPromise;\n\n      // Check final state\n      state = useDashboardStore.getState();\n      expect(state.isLoading).toBe(false);\n      expect(state.dashboards).toHaveLength(3);\n      expect(state.dashboards[0]?.name).toBe('Sales Analytics');\n      expect(state.error).toBeNull();\n    });\n  });\n\n  describe('createDashboard', () => {\n    it('should create a new dashboard successfully', async () => {\n      const store = useDashboardStore.getState();\n\n      const newDashboard: CreateDashboardRequest = {\n        name: 'Test Dashboard',\n        description: 'This is a test dashboard for unit testing',\n        isPublic: true,\n      };\n\n      const dashboardId = await store.createDashboard(newDashboard);\n\n      expect(dashboardId).toBeTruthy();\n      \n      const state = useDashboardStore.getState();\n      expect(state.dashboards).toHaveLength(1);\n      expect(state.dashboards[0]?.name).toBe('Test Dashboard');\n      expect(state.dashboards[0]?.isPublic).toBe(true);\n      expect(state.error).toBeNull();\n    });\n\n    it('should handle store state correctly during creation', async () => {\n      const store = useDashboardStore.getState();\n      \n      const newDashboard: CreateDashboardRequest = {\n        name: 'Error Test Dashboard',\n        description: 'This dashboard will test our error handling',\n        isPublic: false,\n      };\n\n      // Create a dashboard and verify the state transitions correctly\n      const createPromise = store.createDashboard(newDashboard);\n\n      // Check loading state during creation\n      let state = useDashboardStore.getState();\n      expect(state.isLoading).toBe(true);\n\n      // Wait for creation to complete\n      await createPromise;\n\n      // Check final state after successful creation\n      state = useDashboardStore.getState();\n      expect(state.isLoading).toBe(false);\n      expect(state.error).toBeNull();\n      expect(state.dashboards).toHaveLength(1);\n    });\n  });\n\n  describe('updateDashboard', () => {\n    it('should update an existing dashboard', async () => {\n      const store = useDashboardStore.getState();\n\n      // First load dashboards\n      await store.fetchDashboards();\n      \n      let state = useDashboardStore.getState();\n      const originalDashboard = state.dashboards[0];\n      expect(originalDashboard).toBeDefined();\n      expect(originalDashboard!.name).toBe('Sales Analytics');\n\n      const updateData: UpdateDashboardRequest = {\n        id: originalDashboard!.id,\n        name: 'Updated Sales Analytics',\n        description: 'Updated description',\n        isPublic: true,\n      };\n\n      await store.updateDashboard(updateData);\n\n      state = useDashboardStore.getState();\n      const updatedDashboard = state.dashboards.find(d => d.id === originalDashboard!.id);\n      expect(updatedDashboard?.name).toBe('Updated Sales Analytics');\n      expect(updatedDashboard?.description).toBe('Updated description');\n      expect(updatedDashboard?.isPublic).toBe(true);\n      expect(state.error).toBeNull();\n    });\n  });\n\n  describe('deleteDashboard', () => {\n    it('should delete a dashboard successfully', async () => {\n      const store = useDashboardStore.getState();\n\n      // First load dashboards\n      await store.fetchDashboards();\n      \n      let state = useDashboardStore.getState();\n      const initialCount = state.dashboards.length;\n      const dashboardToDelete = state.dashboards[0];\n      expect(dashboardToDelete).toBeDefined();\n\n      await store.deleteDashboard(dashboardToDelete!.id);\n\n      state = useDashboardStore.getState();\n      expect(state.dashboards).toHaveLength(initialCount - 1);\n      expect(state.dashboards.find(d => d.id === dashboardToDelete!.id)).toBeUndefined();\n      expect(state.error).toBeNull();\n    });\n  });\n\n  describe('fetchDashboard', () => {\n    it('should load a single dashboard successfully', async () => {\n      const store = useDashboardStore.getState();\n\n      await store.fetchDashboard('dash-1');\n\n      const state = useDashboardStore.getState();\n      expect(state.currentDashboard).toBeTruthy();\n      expect(state.currentDashboard?.id).toBe('dash-1');\n      expect(state.currentDashboard?.name).toBe('Sales Analytics');\n      expect(state.error).toBeNull();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should clear errors when clearError is called', () => {\n      // Set an error state\n      useDashboardStore.setState({ error: 'Test error' });\n\n      let state = useDashboardStore.getState();\n      expect(state.error).toBe('Test error');\n\n      state.clearError();\n\n      state = useDashboardStore.getState();\n      expect(state.error).toBeNull();\n    });\n  });\n});"],"names":["jest","mock","logger","info","fn","error","appLogger","warn","debug","createTestStore","initialState","dashboards","currentDashboard","isLoading","useDashboardStore","setState","describe","beforeEach","afterEach","it","store","getState","fetchPromise","fetchDashboards","state","expect","toBe","toHaveLength","name","toBeNull","newDashboard","description","isPublic","dashboardId","createDashboard","toBeTruthy","createPromise","originalDashboard","toBeDefined","updateData","id","updateDashboard","updatedDashboard","find","d","initialCount","length","dashboardToDelete","deleteDashboard","toBeUndefined","fetchDashboard","clearError"],"mappings":"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"}