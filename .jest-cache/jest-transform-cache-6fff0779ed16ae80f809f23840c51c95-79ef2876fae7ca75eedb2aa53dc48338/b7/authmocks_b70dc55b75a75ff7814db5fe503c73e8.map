{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/test-utils/auth-mocks.ts"],"sourcesContent":["/**\n * Authentication Mocks for Testing\n * Provides mock implementations for auth-related functionality\n */\n\nimport type { User } from '@/types/auth.types';\nimport type { TokenManager, StoredTokenInfo } from '@/lib/auth/token';\n\nexport interface MockTokenManagerOptions {\n  user?: User | null;\n  isAuthenticated?: boolean;\n  isLoading?: boolean;\n  error?: string | null;\n}\n\n/**\n * Creates a mock TokenManager for testing\n */\nexport function createMockTokenManager(options: MockTokenManagerOptions = {}): TokenManager {\n  const {\n    user = null,\n    isAuthenticated = false,\n    isLoading = false,\n    error = null,\n  } = options;\n\n  const mockTokenInfo: StoredTokenInfo = {\n    token: isAuthenticated ? 'mock-token' : null,\n    refreshToken: isAuthenticated ? 'mock-refresh-token' : null,\n    expiresAt: isAuthenticated ? new Date(Date.now() + 3600000) : null,\n    isValid: isAuthenticated,\n    isExpired: !isAuthenticated,\n  };\n\n  const mockManager = {\n    // Token management\n    setTokens: jest.fn(),\n    clearTokens: jest.fn(),\n    getAccessToken: jest.fn().mockReturnValue(isAuthenticated ? 'mock-token' : null),\n    getRefreshToken: jest.fn().mockReturnValue(isAuthenticated ? 'mock-refresh-token' : null),\n    \n    // Token info\n    getTokenInfo: jest.fn().mockReturnValue(mockTokenInfo),\n\n    // Token validation\n    needsRefresh: jest.fn().mockReturnValue(false),\n\n    // Token parsing\n    parseTokenPayload: jest.fn().mockReturnValue(\n      isAuthenticated && user\n        ? {\n            sub: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            exp: Math.floor(Date.now() / 1000) + 3600,\n            iat: Math.floor(Date.now() / 1000),\n          }\n        : null\n    ),\n\n    // API integration\n    updateApiClientToken: jest.fn(),\n\n    // User info from token\n    getCurrentUserInfo: jest.fn().mockReturnValue(\n      isAuthenticated && user\n        ? {\n            userId: user.id,\n            email: user.email,\n            role: user.role,\n          }\n        : null\n    ),\n  } as unknown as TokenManager;\n\n  // Add test-specific markers for better detection\n  Object.defineProperty(mockManager, '__isTestMock', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n\n  Object.defineProperty(mockManager, '__testEnvironment', {\n    value: 'jest',\n    writable: false,\n    enumerable: false,\n    configurable: false,\n  });\n\n  return mockManager;\n}\n\n/**\n * Mock user data for testing\n */\nexport const mockUsers = {\n  user: {\n    id: 'user-1',\n    email: 'user@example.com',\n    name: 'Test User',\n    role: 'user' as const,\n  },\n  admin: {\n    id: 'admin-1',\n    email: 'admin@example.com',\n    name: 'Admin User',\n    role: 'admin' as const,\n  },\n};\n\n/**\n * Mock auth responses for API testing\n */\nexport const mockAuthResponses = {\n  loginSuccess: {\n    success: true,\n    message: 'Login successful',\n    timestamp: new Date().toISOString(),\n    data: {\n      user: mockUsers.user,\n      token: 'mock.jwt.token',\n      refreshToken: 'mock.refresh.token',\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    },\n  },\n  loginError: {\n    success: false,\n    message: 'Invalid credentials',\n    timestamp: new Date().toISOString(),\n    error: {\n      code: 'INVALID_CREDENTIALS',\n      details: 'Email or password is incorrect',\n    },\n  },\n  refreshSuccess: {\n    success: true,\n    timestamp: new Date().toISOString(),\n    data: {\n      token: 'new.jwt.token',\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    },\n  },\n};\n\n/**\n * Mock AuthContext state for testing\n */\nexport interface MockAuthContextState {\n  user?: User | null;\n  isAuthenticated?: boolean;\n  isLoading?: boolean;\n  error?: string | null;\n  login?: jest.Mock;\n  logout?: jest.Mock;\n  clearError?: jest.Mock;\n}\n\nexport function createMockAuthContext(state: MockAuthContextState = {}) {\n  return {\n    user: state.user || null,\n    isAuthenticated: state.isAuthenticated || false,\n    isLoading: state.isLoading || false,\n    error: state.error || null,\n    login: state.login || jest.fn(),\n    logout: state.logout || jest.fn(),\n    clearError: state.clearError || jest.fn(),\n  };\n}\n\n/**\n * Utility to create authenticated mock context\n */\nexport function createAuthenticatedMockContext(user: User = mockUsers.user) {\n  return createMockAuthContext({\n    user,\n    isAuthenticated: true,\n    isLoading: false,\n    error: null,\n  });\n}\n\n/**\n * Utility to create unauthenticated mock context\n */\nexport function createUnauthenticatedMockContext() {\n  return createMockAuthContext({\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    error: null,\n  });\n}\n\n/**\n * Utility to create loading mock context\n */\nexport function createLoadingMockContext() {\n  return createMockAuthContext({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    error: null,\n  });\n}\n\n/**\n * Utility to create error mock context\n */\nexport function createErrorMockContext(error: string = 'Authentication failed') {\n  return createMockAuthContext({\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    error,\n  });\n}"],"names":["createAuthenticatedMockContext","createErrorMockContext","createLoadingMockContext","createMockAuthContext","createMockTokenManager","createUnauthenticatedMockContext","mockAuthResponses","mockUsers","options","user","isAuthenticated","isLoading","error","mockTokenInfo","token","refreshToken","expiresAt","Date","now","isValid","isExpired","mockManager","setTokens","jest","fn","clearTokens","getAccessToken","mockReturnValue","getRefreshToken","getTokenInfo","needsRefresh","parseTokenPayload","sub","id","email","name","role","exp","Math","floor","iat","updateApiClientToken","getCurrentUserInfo","userId","Object","defineProperty","value","writable","enumerable","configurable","admin","loginSuccess","success","message","timestamp","toISOString","data","loginError","code","details","refreshSuccess","state","login","logout","clearError"],"mappings":"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"}