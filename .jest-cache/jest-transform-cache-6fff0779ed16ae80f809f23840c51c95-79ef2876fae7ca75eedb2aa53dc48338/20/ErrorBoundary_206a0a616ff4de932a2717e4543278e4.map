{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/shared/components/ErrorBoundary.tsx"],"sourcesContent":["'use client';\n\nimport * as Sentry from '@sentry/nextjs';\nimport React, { Component, ReactNode } from 'react';\n\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  level?: 'page' | 'widget' | 'component';\n  context?: Record<string, unknown>;\n  maxRetries?: number;\n  retryDelay?: number;\n  enableAutoRetry?: boolean;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  onRetry?: (retryCount: number) => void;\n  onMaxRetriesReached?: () => void;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorId?: string;\n  retryCount: number;\n  isRetrying: boolean;\n  lastRetryTime?: number;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  private retryTimeoutId?: NodeJS.Timeout;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { \n      hasError: false,\n      retryCount: 0,\n      isRetrying: false,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return {\n      hasError: true,\n      error,\n      isRetrying: false,\n    };\n  }\n\n  override componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    const { level = 'component', context, onError, enableAutoRetry = false, maxRetries = 3 } = this.props;\n    \n    // Enhanced logging with context and retry information\n    appLogger.error(`Error Boundary Triggered (${level})`, {\n      error,\n      component: `error-boundary-${level}`,\n      metadata: {\n        componentStack: errorInfo.componentStack,\n        errorBoundaryLevel: level,\n        retryCount: this.state.retryCount,\n        autoRetryEnabled: enableAutoRetry,\n        ...context,\n      },\n    });\n\n    // Capture to Sentry with enhanced context\n    Sentry.withScope((scope) => {\n      const severity = this.getErrorSeverity();\n      scope.setTag('errorBoundary', level);\n      scope.setTag('retryCount', this.state.retryCount);\n      scope.setTag('severity', severity);\n      scope.setLevel(severity === 'critical' ? 'fatal' : 'error');\n      scope.setContext('errorInfo', {\n        componentStack: errorInfo.componentStack,\n        level,\n        retryCount: this.state.retryCount,\n        autoRetryEnabled: enableAutoRetry,\n        severity,\n        ...context,\n      });\n      \n      const errorId = Sentry.captureException(error);\n      this.setState({ errorId });\n    });\n\n    // Call custom error handler if provided\n    if (onError) {\n      try {\n        onError(error, errorInfo);\n      } catch (handlerError) {\n        appLogger.error('Error in custom error handler', { handlerError });\n      }\n    }\n\n    // Auto-retry logic for transient errors\n    if (enableAutoRetry && this.state.retryCount < maxRetries && this.isTransientError(error)) {\n      this.scheduleAutoRetry();\n    }\n  }\n\n  /**\n   * Check if error is likely transient and worth retrying\n   */\n  private isTransientError = (error: Error): boolean => {\n    const transientErrors = [\n      'ChunkLoadError',\n      'Loading chunk',\n      'Network request failed',\n      'fetch is not defined',\n      'NetworkError',\n      'TimeoutError',\n    ];\n    \n    return transientErrors.some(errorType => \n      error.name.includes(errorType) || \n      error.message.includes(errorType)\n    );\n  };\n\n  /**\n   * Calculate exponential backoff delay\n   */\n  private getRetryDelay = (): number => {\n    const { retryDelay = 1000 } = this.props;\n    const { retryCount } = this.state;\n    \n    // Exponential backoff: 1s, 2s, 4s, 8s, etc.\n    return retryDelay * Math.pow(2, retryCount);\n  };\n\n  /**\n   * Schedule automatic retry with exponential backoff\n   */\n  private scheduleAutoRetry = (): void => {\n    const delay = this.getRetryDelay();\n    const { level = 'component' } = this.props;\n    \n    appLogger.info('Scheduling auto-retry', {\n      component: `error-boundary-${level}`,\n      retryCount: this.state.retryCount,\n      delay,\n    });\n\n    this.setState({ isRetrying: true });\n\n    this.retryTimeoutId = setTimeout(() => {\n      this.performRetry();\n    }, delay);\n  };\n\n  /**\n   * Perform the actual retry\n   */\n  private performRetry = (): void => {\n    const { level = 'component', onRetry, maxRetries = 3, onMaxRetriesReached } = this.props;\n    const newRetryCount = this.state.retryCount + 1;\n\n    appLogger.info('Performing error boundary retry', {\n      component: `error-boundary-${level}`,\n      retryCount: newRetryCount,\n    });\n\n    if (onRetry) {\n      onRetry(newRetryCount);\n    }\n\n    if (newRetryCount >= maxRetries) {\n      appLogger.warn('Max retries reached', {\n        component: `error-boundary-${level}`,\n        maxRetries,\n      });\n      \n      if (onMaxRetriesReached) {\n        onMaxRetriesReached();\n      }\n      \n      this.setState({ \n        isRetrying: false,\n        retryCount: newRetryCount,\n      });\n      return;\n    }\n\n    this.setState({ \n      hasError: false,\n      retryCount: newRetryCount,\n      isRetrying: false,\n      lastRetryTime: Date.now(),\n    });\n  };\n\n  /**\n   * Manual retry handler\n   */\n  private handleRetry = (): void => {\n    const { level = 'component' } = this.props;\n    \n    appLogger.info('Manual Error Boundary Retry', {\n      component: `error-boundary-${level}`,\n      action: 'manual-retry',\n      retryCount: this.state.retryCount,\n    });\n    \n    this.performRetry();\n  };\n\n  private handleReportIssue = (): void => {\n    const { level = 'component' } = this.props;\n    if (this.state.errorId) {\n      appLogger.userAction('report-error', undefined, {\n        errorId: this.state.errorId,\n        errorBoundaryLevel: level,\n      });\n      \n      // In production, this could open a support ticket\n      if (typeof window !== 'undefined') {\n        window.open(\n          `mailto:support@daten-see.com?subject=Error Report - ${this.state.errorId}&body=Error ID: ${this.state.errorId}%0A%0APlease describe what you were doing when this error occurred.`,\n          '_blank'\n        );\n      }\n    }\n  };\n\n  /**\n   * Cleanup on unmount\n   */\n  override componentWillUnmount(): void {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  /**\n   * Render retry status indicator\n   */\n  private renderRetryStatus = (): ReactNode => {\n    const { isRetrying, retryCount } = this.state;\n    const { maxRetries = 3 } = this.props;\n    \n    if (!isRetrying && retryCount === 0) return null;\n\n    return (\n      <div className=\"mt-3 text-xs text-gray-600\">\n        {isRetrying ? (\n          <div className=\"flex items-center\">\n            <svg className=\"animate-spin -ml-1 mr-2 h-3 w-3 text-gray-600\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n            </svg>\n            Versuche erneut... (Versuch {retryCount + 1} von {maxRetries})\n          </div>\n        ) : (\n          <div>\n            Versuche: {retryCount} von {maxRetries}\n            {retryCount >= maxRetries && \" (Maximum erreicht)\"}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Get error severity based on level and retry count\n   */\n  private getErrorSeverity = (): 'low' | 'medium' | 'high' | 'critical' => {\n    const { level = 'component' } = this.props;\n    const { retryCount } = this.state;\n    \n    if (level === 'page') return 'critical';\n    if (level === 'widget' && retryCount >= 2) return 'high';\n    if (retryCount >= 3) return 'high';\n    return 'medium';\n  };\n\n  override render(): ReactNode {\n    if (this.state.hasError) {\n      // Custom fallback UI or use provided fallback\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      const { level = 'component' } = this.props;\n      \n      return (\n        <div className=\"error-boundary-fallback\" data-level={level} role=\"alert\">\n          <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-start\">\n              <div className=\"flex-shrink-0\">\n                <svg\n                  className=\"w-5 h-5 text-red-400\"\n                  viewBox=\"0 0 20 20\"\n                  fill=\"currentColor\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-red-800\">\n                  Oops! Etwas ist schiefgelaufen\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700\">\n                  <p>\n                    {level === 'page' && 'Diese Seite ist auf einen Fehler gestoßen und kann nicht angezeigt werden.'}\n                    {level === 'widget' && 'Dieses Widget ist auf einen Fehler gestoßen und kann nicht angezeigt werden.'}\n                    {level === 'component' && 'Diese Komponente ist auf einen Fehler gestoßen.'}\n                  </p>\n                  \n                  {process.env.NODE_ENV === 'development' && this.state.error && (\n                    <details className=\"mt-2\">\n                      <summary className=\"cursor-pointer font-medium\">\n                        Development Error Details\n                      </summary>\n                      <pre className=\"mt-2 text-xs bg-red-100 p-2 rounded overflow-auto\">\n                        {this.state.error.message}\n                        {'\\n'}\n                        {this.state.error.stack}\n                      </pre>\n                    </details>\n                  )}\n                  \n                  {/* Retry Status */}\n                  {this.renderRetryStatus()}\n                </div>\n                \n                <div className=\"mt-4 flex space-x-3\">\n                  <button\n                    onClick={this.handleRetry}\n                    disabled={this.state.isRetrying}\n                    className=\"bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:bg-gray-400 disabled:cursor-not-allowed\"\n                  >\n                    {this.state.isRetrying ? (\n                      <span className=\"flex items-center\">\n                        <svg className=\"animate-spin -ml-1 mr-1 h-3 w-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                        </svg>\n                        Versuche erneut...\n                      </span>\n                    ) : 'Seite neu laden'}\n                  </button>\n                  \n                  {this.state.errorId && process.env.NODE_ENV === 'production' && (\n                    <button\n                      onClick={this.handleReportIssue}\n                      className=\"bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n                    >\n                      Problem melden\n                    </button>\n                  )}\n                  \n                  {this.state.errorId && (\n                    <span className=\"text-xs text-gray-500 self-center\">\n                      Error ID: {this.state.errorId.slice(0, 8)}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}"],"names":["ErrorBoundary","Component","props","isTransientError","error","transientErrors","some","errorType","name","includes","message","getRetryDelay","retryDelay","retryCount","state","Math","pow","scheduleAutoRetry","delay","level","appLogger","info","component","setState","isRetrying","retryTimeoutId","setTimeout","performRetry","onRetry","maxRetries","onMaxRetriesReached","newRetryCount","warn","hasError","lastRetryTime","Date","now","handleRetry","action","handleReportIssue","errorId","userAction","undefined","errorBoundaryLevel","window","open","renderRetryStatus","div","className","svg","fill","viewBox","circle","cx","cy","r","stroke","strokeWidth","path","d","getErrorSeverity","getDerivedStateFromError","componentDidCatch","errorInfo","context","onError","enableAutoRetry","metadata","componentStack","autoRetryEnabled","Sentry","withScope","scope","severity","setTag","setLevel","setContext","captureException","handlerError","componentWillUnmount","clearTimeout","render","fallback","data-level","role","fillRule","clipRule","h3","p","process","env","NODE_ENV","details","summary","pre","stack","button","onClick","disabled","span","slice","children"],"mappings":"AAAA;;;;;+BA6BaA;;;eAAAA;;;;gEA3BW;+DACoB;8BAElB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBnB,MAAMA,sBAAsBC,gBAAS;IAG1C,YAAYC,KAAY,CAAE;QACxB,KAAK,CAACA,QAmER;;GAEC,QACOC,mBAAmB,CAACC;YAC1B,MAAMC,kBAAkB;gBACtB;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,OAAOA,gBAAgBC,IAAI,CAACC,CAAAA,YAC1BH,MAAMI,IAAI,CAACC,QAAQ,CAACF,cACpBH,MAAMM,OAAO,CAACD,QAAQ,CAACF;QAE3B,GAEA;;GAEC,QACOI,gBAAgB;YACtB,MAAM,EAAEC,aAAa,IAAI,EAAE,GAAG,IAAI,CAACV,KAAK;YACxC,MAAM,EAAEW,UAAU,EAAE,GAAG,IAAI,CAACC,KAAK;YAEjC,4CAA4C;YAC5C,OAAOF,aAAaG,KAAKC,GAAG,CAAC,GAAGH;QAClC,GAEA;;GAEC,QACOI,oBAAoB;YAC1B,MAAMC,QAAQ,IAAI,CAACP,aAAa;YAChC,MAAM,EAAEQ,QAAQ,WAAW,EAAE,GAAG,IAAI,CAACjB,KAAK;YAE1CkB,uBAAS,CAACC,IAAI,CAAC,yBAAyB;gBACtCC,WAAW,CAAC,eAAe,EAAEH,OAAO;gBACpCN,YAAY,IAAI,CAACC,KAAK,CAACD,UAAU;gBACjCK;YACF;YAEA,IAAI,CAACK,QAAQ,CAAC;gBAAEC,YAAY;YAAK;YAEjC,IAAI,CAACC,cAAc,GAAGC,WAAW;gBAC/B,IAAI,CAACC,YAAY;YACnB,GAAGT;QACL,GAEA;;GAEC,QACOS,eAAe;YACrB,MAAM,EAAER,QAAQ,WAAW,EAAES,OAAO,EAAEC,aAAa,CAAC,EAAEC,mBAAmB,EAAE,GAAG,IAAI,CAAC5B,KAAK;YACxF,MAAM6B,gBAAgB,IAAI,CAACjB,KAAK,CAACD,UAAU,GAAG;YAE9CO,uBAAS,CAACC,IAAI,CAAC,mCAAmC;gBAChDC,WAAW,CAAC,eAAe,EAAEH,OAAO;gBACpCN,YAAYkB;YACd;YAEA,IAAIH,SAAS;gBACXA,QAAQG;YACV;YAEA,IAAIA,iBAAiBF,YAAY;gBAC/BT,uBAAS,CAACY,IAAI,CAAC,uBAAuB;oBACpCV,WAAW,CAAC,eAAe,EAAEH,OAAO;oBACpCU;gBACF;gBAEA,IAAIC,qBAAqB;oBACvBA;gBACF;gBAEA,IAAI,CAACP,QAAQ,CAAC;oBACZC,YAAY;oBACZX,YAAYkB;gBACd;gBACA;YACF;YAEA,IAAI,CAACR,QAAQ,CAAC;gBACZU,UAAU;gBACVpB,YAAYkB;gBACZP,YAAY;gBACZU,eAAeC,KAAKC,GAAG;YACzB;QACF,GAEA;;GAEC,QACOC,cAAc;YACpB,MAAM,EAAElB,QAAQ,WAAW,EAAE,GAAG,IAAI,CAACjB,KAAK;YAE1CkB,uBAAS,CAACC,IAAI,CAAC,+BAA+B;gBAC5CC,WAAW,CAAC,eAAe,EAAEH,OAAO;gBACpCmB,QAAQ;gBACRzB,YAAY,IAAI,CAACC,KAAK,CAACD,UAAU;YACnC;YAEA,IAAI,CAACc,YAAY;QACnB,QAEQY,oBAAoB;YAC1B,MAAM,EAAEpB,QAAQ,WAAW,EAAE,GAAG,IAAI,CAACjB,KAAK;YAC1C,IAAI,IAAI,CAACY,KAAK,CAAC0B,OAAO,EAAE;gBACtBpB,uBAAS,CAACqB,UAAU,CAAC,gBAAgBC,WAAW;oBAC9CF,SAAS,IAAI,CAAC1B,KAAK,CAAC0B,OAAO;oBAC3BG,oBAAoBxB;gBACtB;gBAEA,kDAAkD;gBAClD,IAAI,OAAOyB,WAAW,aAAa;oBACjCA,OAAOC,IAAI,CACT,CAAC,oDAAoD,EAAE,IAAI,CAAC/B,KAAK,CAAC0B,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC1B,KAAK,CAAC0B,OAAO,CAAC,mEAAmE,CAAC,EACnL;gBAEJ;YACF;QACF,GAWA;;GAEC,QACOM,oBAAoB;YAC1B,MAAM,EAAEtB,UAAU,EAAEX,UAAU,EAAE,GAAG,IAAI,CAACC,KAAK;YAC7C,MAAM,EAAEe,aAAa,CAAC,EAAE,GAAG,IAAI,CAAC3B,KAAK;YAErC,IAAI,CAACsB,cAAcX,eAAe,GAAG,OAAO;YAE5C,qBACE,qBAACkC;gBAAIC,WAAU;0BACZxB,2BACC,sBAACuB;oBAAIC,WAAU;;sCACb,sBAACC;4BAAID,WAAU;4BAAgDE,MAAK;4BAAOC,SAAQ;;8CACjF,qBAACC;oCAAOJ,WAAU;oCAAaK,IAAG;oCAAKC,IAAG;oCAAKC,GAAE;oCAAKC,QAAO;oCAAeC,aAAY;;8CACxF,qBAACC;oCAAKV,WAAU;oCAAaE,MAAK;oCAAeS,GAAE;;;;wBAC/C;wBACuB9C,aAAa;wBAAE;wBAAMgB;wBAAW;;mCAG/D,sBAACkB;;wBAAI;wBACQlC;wBAAW;wBAAMgB;wBAC3BhB,cAAcgB,cAAc;;;;QAKvC,GAEA;;GAEC,QACO+B,mBAAmB;YACzB,MAAM,EAAEzC,QAAQ,WAAW,EAAE,GAAG,IAAI,CAACjB,KAAK;YAC1C,MAAM,EAAEW,UAAU,EAAE,GAAG,IAAI,CAACC,KAAK;YAEjC,IAAIK,UAAU,QAAQ,OAAO;YAC7B,IAAIA,UAAU,YAAYN,cAAc,GAAG,OAAO;YAClD,IAAIA,cAAc,GAAG,OAAO;YAC5B,OAAO;QACT;QA/OE,IAAI,CAACC,KAAK,GAAG;YACXmB,UAAU;YACVpB,YAAY;YACZW,YAAY;QACd;IACF;IAEA,OAAOqC,yBAAyBzD,KAAY,EAAkB;QAC5D,OAAO;YACL6B,UAAU;YACV7B;YACAoB,YAAY;QACd;IACF;IAESsC,kBAAkB1D,KAAY,EAAE2D,SAA0B,EAAQ;QACzE,MAAM,EAAE5C,QAAQ,WAAW,EAAE6C,OAAO,EAAEC,OAAO,EAAEC,kBAAkB,KAAK,EAAErC,aAAa,CAAC,EAAE,GAAG,IAAI,CAAC3B,KAAK;QAErG,sDAAsD;QACtDkB,uBAAS,CAAChB,KAAK,CAAC,CAAC,0BAA0B,EAAEe,MAAM,CAAC,CAAC,EAAE;YACrDf;YACAkB,WAAW,CAAC,eAAe,EAAEH,OAAO;YACpCgD,UAAU;gBACRC,gBAAgBL,UAAUK,cAAc;gBACxCzB,oBAAoBxB;gBACpBN,YAAY,IAAI,CAACC,KAAK,CAACD,UAAU;gBACjCwD,kBAAkBH;gBAClB,GAAGF,OAAO;YACZ;QACF;QAEA,0CAA0C;QAC1CM,QAAOC,SAAS,CAAC,CAACC;YAChB,MAAMC,WAAW,IAAI,CAACb,gBAAgB;YACtCY,MAAME,MAAM,CAAC,iBAAiBvD;YAC9BqD,MAAME,MAAM,CAAC,cAAc,IAAI,CAAC5D,KAAK,CAACD,UAAU;YAChD2D,MAAME,MAAM,CAAC,YAAYD;YACzBD,MAAMG,QAAQ,CAACF,aAAa,aAAa,UAAU;YACnDD,MAAMI,UAAU,CAAC,aAAa;gBAC5BR,gBAAgBL,UAAUK,cAAc;gBACxCjD;gBACAN,YAAY,IAAI,CAACC,KAAK,CAACD,UAAU;gBACjCwD,kBAAkBH;gBAClBO;gBACA,GAAGT,OAAO;YACZ;YAEA,MAAMxB,UAAU8B,QAAOO,gBAAgB,CAACzE;YACxC,IAAI,CAACmB,QAAQ,CAAC;gBAAEiB;YAAQ;QAC1B;QAEA,wCAAwC;QACxC,IAAIyB,SAAS;YACX,IAAI;gBACFA,QAAQ7D,OAAO2D;YACjB,EAAE,OAAOe,cAAc;gBACrB1D,uBAAS,CAAChB,KAAK,CAAC,iCAAiC;oBAAE0E;gBAAa;YAClE;QACF;QAEA,wCAAwC;QACxC,IAAIZ,mBAAmB,IAAI,CAACpD,KAAK,CAACD,UAAU,GAAGgB,cAAc,IAAI,CAAC1B,gBAAgB,CAACC,QAAQ;YACzF,IAAI,CAACa,iBAAiB;QACxB;IACF;IA8HA;;GAEC,GACD,AAAS8D,uBAA6B;QACpC,IAAI,IAAI,CAACtD,cAAc,EAAE;YACvBuD,aAAa,IAAI,CAACvD,cAAc;QAClC;IACF;IA4CSwD,SAAoB;QAC3B,IAAI,IAAI,CAACnE,KAAK,CAACmB,QAAQ,EAAE;YACvB,8CAA8C;YAC9C,IAAI,IAAI,CAAC/B,KAAK,CAACgF,QAAQ,EAAE;gBACvB,OAAO,IAAI,CAAChF,KAAK,CAACgF,QAAQ;YAC5B;YAEA,MAAM,EAAE/D,QAAQ,WAAW,EAAE,GAAG,IAAI,CAACjB,KAAK;YAE1C,qBACE,qBAAC6C;gBAAIC,WAAU;gBAA0BmC,cAAYhE;gBAAOiE,MAAK;0BAC/D,cAAA,qBAACrC;oBAAIC,WAAU;8BACb,cAAA,sBAACD;wBAAIC,WAAU;;0CACb,qBAACD;gCAAIC,WAAU;0CACb,cAAA,qBAACC;oCACCD,WAAU;oCACVG,SAAQ;oCACRD,MAAK;8CAEL,cAAA,qBAACQ;wCACC2B,UAAS;wCACT1B,GAAE;wCACF2B,UAAS;;;;0CAIf,sBAACvC;gCAAIC,WAAU;;kDACb,qBAACuC;wCAAGvC,WAAU;kDAAmC;;kDAGjD,sBAACD;wCAAIC,WAAU;;0DACb,sBAACwC;;oDACErE,UAAU,UAAU;oDACpBA,UAAU,YAAY;oDACtBA,UAAU,eAAe;;;4CAG3BsE,QAAQC,GAAG,CAACC,QAAQ,KAAK,iBAAiB,IAAI,CAAC7E,KAAK,CAACV,KAAK,kBACzD,sBAACwF;gDAAQ5C,WAAU;;kEACjB,qBAAC6C;wDAAQ7C,WAAU;kEAA6B;;kEAGhD,sBAAC8C;wDAAI9C,WAAU;;4DACZ,IAAI,CAAClC,KAAK,CAACV,KAAK,CAACM,OAAO;4DACxB;4DACA,IAAI,CAACI,KAAK,CAACV,KAAK,CAAC2F,KAAK;;;;;4CAM5B,IAAI,CAACjD,iBAAiB;;;kDAGzB,sBAACC;wCAAIC,WAAU;;0DACb,qBAACgD;gDACCC,SAAS,IAAI,CAAC5D,WAAW;gDACzB6D,UAAU,IAAI,CAACpF,KAAK,CAACU,UAAU;gDAC/BwB,WAAU;0DAET,IAAI,CAAClC,KAAK,CAACU,UAAU,iBACpB,sBAAC2E;oDAAKnD,WAAU;;sEACd,sBAACC;4DAAID,WAAU;4DAA6CE,MAAK;4DAAOC,SAAQ;;8EAC9E,qBAACC;oEAAOJ,WAAU;oEAAaK,IAAG;oEAAKC,IAAG;oEAAKC,GAAE;oEAAKC,QAAO;oEAAeC,aAAY;;8EACxF,qBAACC;oEAAKV,WAAU;oEAAaE,MAAK;oEAAeS,GAAE;;;;wDAC/C;;qDAGN;;4CAGL,IAAI,CAAC7C,KAAK,CAAC0B,OAAO,IAAIiD,QAAQC,GAAG,CAACC,QAAQ,KAAK,8BAC9C,qBAACK;gDACCC,SAAS,IAAI,CAAC1D,iBAAiB;gDAC/BS,WAAU;0DACX;;4CAKF,IAAI,CAAClC,KAAK,CAAC0B,OAAO,kBACjB,sBAAC2D;gDAAKnD,WAAU;;oDAAoC;oDACvC,IAAI,CAAClC,KAAK,CAAC0B,OAAO,CAAC4D,KAAK,CAAC,GAAG;;;;;;;;;;;QASzD;QAEA,OAAO,IAAI,CAAClG,KAAK,CAACmG,QAAQ;IAC5B;AACF"}