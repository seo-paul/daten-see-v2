{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/dashboard/__tests__/EditDashboardModal.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport type { DashboardListItem } from '@/types/dashboard.types';\n\nimport { EditDashboardModal } from '../EditDashboardModal';\n\ndescribe('EditDashboardModal', () => {\n  const mockDashboard: DashboardListItem = {\n    id: '1',\n    name: 'Test Dashboard',\n    description: 'Test description',\n    isPublic: false,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n  };\n\n  const defaultProps = {\n    isOpen: true,\n    onClose: jest.fn(),\n    onSubmit: jest.fn(),\n    dashboard: mockDashboard,\n    isLoading: false,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should submit form with updated data', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByDisplayValue('Test Dashboard');\n    await user.clear(nameInput);\n    await user.type(nameInput, 'Updated Dashboard');\n    \n    await user.click(screen.getByText('Änderungen speichern'));\n\n    expect(defaultProps.onSubmit).toHaveBeenCalledWith({\n      name: 'Updated Dashboard',\n      description: 'Test description',\n      isPublic: false,\n    });\n  });\n\n  it('should handle validation errors', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByDisplayValue('Test Dashboard');\n    await user.clear(nameInput);\n    await user.click(screen.getByText('Änderungen speichern'));\n\n    expect(defaultProps.onSubmit).not.toHaveBeenCalled();\n  });\n});"],"names":["describe","mockDashboard","id","name","description","isPublic","createdAt","updatedAt","defaultProps","isOpen","onClose","jest","fn","onSubmit","dashboard","isLoading","beforeEach","clearAllMocks","it","user","userEvent","setup","render","EditDashboardModal","nameInput","screen","getByDisplayValue","clear","type","click","getByText","expect","toHaveBeenCalledWith","not","toHaveBeenCalled"],"mappings":";;;;;uBAA+B;kEACT;oCAIa;;;;;;AAEnCA,SAAS,sBAAsB;IAC7B,MAAMC,gBAAmC;QACvCC,IAAI;QACJC,MAAM;QACNC,aAAa;QACbC,UAAU;QACVC,WAAW;QACXC,WAAW;IACb;IAEA,MAAMC,eAAe;QACnBC,QAAQ;QACRC,SAASC,KAAKC,EAAE;QAChBC,UAAUF,KAAKC,EAAE;QACjBE,WAAWb;QACXc,WAAW;IACb;IAEAC,WAAW;QACTL,KAAKM,aAAa;IACpB;IAEAC,GAAG,wCAAwC;QACzC,MAAMC,OAAOC,kBAAS,CAACC,KAAK;QAC5BC,IAAAA,aAAM,gBAAC,qBAACC,sCAAkB;YAAE,GAAGf,YAAY;;QAE3C,MAAMgB,YAAYC,aAAM,CAACC,iBAAiB,CAAC;QAC3C,MAAMP,KAAKQ,KAAK,CAACH;QACjB,MAAML,KAAKS,IAAI,CAACJ,WAAW;QAE3B,MAAML,KAAKU,KAAK,CAACJ,aAAM,CAACK,SAAS,CAAC;QAElCC,OAAOvB,aAAaK,QAAQ,EAAEmB,oBAAoB,CAAC;YACjD7B,MAAM;YACNC,aAAa;YACbC,UAAU;QACZ;IACF;IAEAa,GAAG,mCAAmC;QACpC,MAAMC,OAAOC,kBAAS,CAACC,KAAK;QAC5BC,IAAAA,aAAM,gBAAC,qBAACC,sCAAkB;YAAE,GAAGf,YAAY;;QAE3C,MAAMgB,YAAYC,aAAM,CAACC,iBAAiB,CAAC;QAC3C,MAAMP,KAAKQ,KAAK,CAACH;QACjB,MAAML,KAAKU,KAAK,CAACJ,aAAM,CAACK,SAAS,CAAC;QAElCC,OAAOvB,aAAaK,QAAQ,EAAEoB,GAAG,CAACC,gBAAgB;IACpD;AACF"}