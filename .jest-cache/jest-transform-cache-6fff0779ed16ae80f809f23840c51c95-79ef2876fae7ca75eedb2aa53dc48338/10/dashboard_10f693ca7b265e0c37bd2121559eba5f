48dcf5cfa303d0613cc6f764ccaed08b
/**
 * Dashboard API Service
 * Type-safe dashboard operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DashboardService () {
        return DashboardService;
    },
    get WidgetService () {
        return WidgetService;
    },
    get dashboardApi () {
        return DashboardService;
    },
    get widgetApi () {
        return WidgetService;
    }
});
const _index = require("./index");
class DashboardService {
    /**
   * Get all dashboards for current user/workspace
   */ static async getDashboards(workspaceId) {
        const endpoint = workspaceId ? `/dashboards?workspaceId=${workspaceId}` : '/dashboards';
        return (0, _index.createQueryFunction)(()=>_index.apiClient.get(endpoint))();
    }
    /**
   * Get paginated dashboards
   */ static async getDashboardsPaginated(page = 1, limit = 20, workspaceId) {
        const endpoint = workspaceId ? `/dashboards?workspaceId=${workspaceId}` : '/dashboards';
        return _index.apiClient.getPaginated(endpoint, page, limit);
    }
    /**
   * Get single dashboard by ID
   */ static async getDashboard(id) {
        return (0, _index.createQueryFunction)(()=>_index.apiClient.get(`/dashboards/${id}`))();
    }
    /**
   * Create new dashboard
   */ static async createDashboard(data) {
        const response = await _index.apiClient.post('/dashboards', data);
        if (!response.success) {
            throw new Error(response.message || 'Failed to create dashboard');
        }
        return response.data;
    }
    /**
   * Update existing dashboard
   */ static async updateDashboard(id, data) {
        const response = await _index.apiClient.put(`/dashboards/${id}`, data);
        if (!response.success) {
            throw new Error(response.message || 'Failed to update dashboard');
        }
        return response.data;
    }
    /**
   * Delete dashboard
   */ static async deleteDashboard(id) {
        const response = await _index.apiClient.delete(`/dashboards/${id}`);
        if (!response.success) {
            throw new Error(response.message || 'Failed to delete dashboard');
        }
    }
    /**
   * Duplicate dashboard
   */ static async duplicateDashboard(id, title) {
        const response = await _index.apiClient.post(`/dashboards/${id}/duplicate`, title ? {
            title
        } : {});
        if (!response.success) {
            throw new Error(response.message || 'Failed to duplicate dashboard');
        }
        return response.data;
    }
}
class WidgetService {
    /**
   * Get all widgets for a dashboard
   */ static async getWidgets(dashboardId) {
        return (0, _index.createQueryFunction)(()=>_index.apiClient.get(`/dashboards/${dashboardId}/widgets`))();
    }
    /**
   * Get single widget
   */ static async getWidget(dashboardId, widgetId) {
        return (0, _index.createQueryFunction)(()=>_index.apiClient.get(`/dashboards/${dashboardId}/widgets/${widgetId}`))();
    }
    /**
   * Create new widget
   */ static async createWidget(data) {
        const response = await _index.apiClient.post(`/dashboards/${data.dashboardId}/widgets`, data);
        if (!response.success) {
            throw new Error(response.message || 'Failed to create widget');
        }
        return response.data;
    }
    /**
   * Update widget
   */ static async updateWidget(dashboardId, widgetId, data) {
        const response = await _index.apiClient.put(`/dashboards/${dashboardId}/widgets/${widgetId}`, data);
        if (!response.success) {
            throw new Error(response.message || 'Failed to update widget');
        }
        return response.data;
    }
    /**
   * Delete widget
   */ static async deleteWidget(dashboardId, widgetId) {
        const response = await _index.apiClient.delete(`/dashboards/${dashboardId}/widgets/${widgetId}`);
        if (!response.success) {
            throw new Error(response.message || 'Failed to delete widget');
        }
    }
    /**
   * Bulk update widget positions
   */ static async updateWidgetPositions(dashboardId, widgets) {
        const response = await _index.apiClient.put(`/dashboards/${dashboardId}/widgets/positions`, widgets);
        if (!response.success) {
            throw new Error(response.message || 'Failed to update widget positions');
        }
        return response.data;
    }
}

//# sourceMappingURL=data:application/json;base64,