{"version":3,"names":[],"sources":["/Users/zweigen/Sites/daten-see-v2/src/types/auth.types.ts"],"sourcesContent":["/**\n * Authentication Types\n * Core types for authentication and authorization\n */\n\n// Extract User type from API types\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'user' | 'admin';\n  avatar?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Auth state types\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Auth context methods\nexport interface AuthActions {\n  login: (credentials: { email: string; password: string }) => Promise<void>;\n  logout: () => Promise<void>;\n  clearError: () => void;\n}\n\n// Combined auth context interface\nexport interface AuthContextType extends AuthState, AuthActions {}\n\n// Token information\nexport interface TokenInfo {\n  token: string | null;\n  refreshToken: string | null;\n  expiresAt: string | null;\n}\n\n// Token payload (JWT claims)\nexport interface TokenPayload {\n  sub: string; // User ID\n  email: string;\n  name: string;\n  role: 'user' | 'admin';\n  exp: number; // Expiration timestamp\n  iat: number; // Issued at timestamp\n  [key: string]: unknown; // Additional claims\n}\n\n// Auth storage interface\nexport interface AuthStorage {\n  getItem: (key: string) => string | null;\n  setItem: (key: string, value: string) => void;\n  removeItem: (key: string) => void;\n}\n\n// Role definitions\nexport type UserRole = 'user' | 'admin';\n\n// Permission definitions\nexport interface Permission {\n  resource: string;\n  action: string;\n}\n\n// Route protection options\nexport interface RouteProtectionOptions {\n  requireAuth?: boolean;\n  requiredRole?: UserRole;\n  requiredPermissions?: Permission[];\n  redirectTo?: string;\n}\n\n// Auth provider configuration\nexport interface AuthProviderConfig {\n  apiBaseUrl?: string;\n  tokenStorageKey?: string;\n  refreshTokenStorageKey?: string;\n  autoRefresh?: boolean;\n  refreshThreshold?: number; // Minutes before expiry to refresh\n}\n\n// Auth hook return types\nexport interface UseAuthReturn extends AuthState {\n  login: (credentials: { email: string; password: string }) => Promise<void>;\n  logout: () => Promise<void>;\n  clearError: () => void;\n  refresh: () => Promise<void>;\n}\n\nexport interface UseRouteProtectionReturn {\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  user: User | null;\n  hasAccess: boolean;\n}\n\n// Auth event types\nexport type AuthEvent = \n  | 'login'\n  | 'logout' \n  | 'token_refresh'\n  | 'token_expired'\n  | 'auth_error';\n\nexport interface AuthEventData {\n  type: AuthEvent;\n  user?: User | null;\n  error?: string;\n  timestamp: number;\n}\n\n// Auth listener callback\nexport type AuthEventListener = (data: AuthEventData) => void;"],"mappings":"AAAA;;;GAAA,CAKA","ignoreList":[]}