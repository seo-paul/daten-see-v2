ff564832fe918704f3ea4e0f394a66da
"use strict";
// Mock the API client
jest.mock('../index', ()=>({
        apiClient: {
            get: jest.fn(),
            post: jest.fn(),
            put: jest.fn(),
            delete: jest.fn(),
            getPaginated: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _dashboard = require("../dashboard");
const _index = require("../index");
const mockApiClient = _index.apiClient;
describe('DashboardService', ()=>{
    const mockDashboard = {
        id: '1',
        name: 'Test Dashboard',
        description: 'Test description',
        isPublic: false,
        createdAt: new Date('2024-01-01T00:00:00Z'),
        updatedAt: new Date('2024-01-01T00:00:00Z'),
        widgets: [],
        settings: {
            backgroundColor: '#ffffff',
            gridSize: 12,
            autoRefresh: false,
            refreshInterval: 300
        }
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('getDashboards', ()=>{
        it('should return dashboards array', async ()=>{
            const mockResponse = {
                data: [
                    mockDashboard
                ],
                success: true
            };
            mockApiClient.get.mockResolvedValue(mockResponse);
            const result = await _dashboard.DashboardService.getDashboards();
            expect(result).toEqual([
                mockDashboard
            ]);
            expect(mockApiClient.get).toHaveBeenCalledWith('/dashboards');
        });
    });
    describe('createDashboard', ()=>{
        it('should create dashboard successfully', async ()=>{
            const createRequest = {
                name: 'New Dashboard',
                description: 'New description',
                isPublic: false
            };
            const mockResponse = {
                data: mockDashboard,
                success: true
            };
            mockApiClient.post.mockResolvedValue(mockResponse);
            const result = await _dashboard.DashboardService.createDashboard(createRequest);
            expect(result).toEqual(mockDashboard);
            expect(mockApiClient.post).toHaveBeenCalledWith('/dashboards', createRequest);
        });
    });
    describe('updateDashboard', ()=>{
        it('should update dashboard successfully', async ()=>{
            const updateRequest = {
                id: '1',
                name: 'Updated Dashboard',
                description: 'Updated description',
                isPublic: true
            };
            const updatedDashboard = {
                ...mockDashboard,
                ...updateRequest
            };
            const mockResponse = {
                data: updatedDashboard,
                success: true
            };
            mockApiClient.put.mockResolvedValue(mockResponse);
            const result = await _dashboard.DashboardService.updateDashboard('1', updateRequest);
            expect(result).toEqual(updatedDashboard);
            expect(mockApiClient.put).toHaveBeenCalledWith('/dashboards/1', updateRequest);
        });
    });
    describe('deleteDashboard', ()=>{
        it('should delete dashboard successfully', async ()=>{
            const mockResponse = {
                data: undefined,
                success: true
            };
            mockApiClient.delete.mockResolvedValue(mockResponse);
            await _dashboard.DashboardService.deleteDashboard('1');
            expect(mockApiClient.delete).toHaveBeenCalledWith('/dashboards/1');
        });
    });
    describe('getDashboard', ()=>{
        it('should return single dashboard', async ()=>{
            const mockResponse = {
                data: mockDashboard,
                success: true
            };
            mockApiClient.get.mockResolvedValue(mockResponse);
            const result = await _dashboard.DashboardService.getDashboard('1');
            expect(result).toEqual(mockDashboard);
            expect(mockApiClient.get).toHaveBeenCalledWith('/dashboards/1');
        });
    });
    describe('error handling', ()=>{
        it('should handle network errors', async ()=>{
            mockApiClient.get.mockRejectedValue(new Error('Network error'));
            await expect(_dashboard.DashboardService.getDashboard('1')).rejects.toThrow('Network error');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,