{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/contexts/__tests__/AuthContext.integration.test.tsx"],"sourcesContent":["/**\n * AuthContext Integration Tests - Streamlined\n * Testing core auth integration only (Reduced from 122 â†’ 15 tests)\n */\n\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport React, { ReactNode } from 'react';\n\nimport { TokenManagerMockScenarios } from '@/lib/testing/token-manager-mock';\n\nimport { AuthProvider, useAuth, type User } from '../AuthContext';\n\n// Mock logger to avoid console noise\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\ndescribe('AuthContext Integration Tests', (): void => {\n  const testUser: User = {\n    id: 'user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    role: 'user',\n  };\n\n  const createWrapper = (tokenManager?: any): React.FC<{ children: ReactNode }> => {\n    const TestWrapper = ({ children }: { children: ReactNode }): JSX.Element => (\n      <AuthProvider tokenManager={tokenManager}>\n        {children}\n      </AuthProvider>\n    );\n    TestWrapper.displayName = 'AuthContextTestWrapper';\n    return TestWrapper;\n  };\n\n  beforeEach((): void => {\n    jest.clearAllMocks();\n  });\n\n  // Core authentication state test\n  it('should initialize with unauthenticated state', (): void => {\n    const tokenManager = TokenManagerMockScenarios.unauthenticated();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.user).toBeNull();\n    expect(result.current.isLoading).toBe(false);\n  });\n\n  // Authenticated state initialization test\n  it('should initialize with authenticated state when token exists', (): void => {\n    const tokenManager = TokenManagerMockScenarios.customUser({\n      userId: testUser.id,\n      email: testUser.email,\n      role: testUser.role,\n    });\n\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isAuthenticated).toBe(true);\n    expect(result.current.user).toMatchObject({\n      id: testUser.id,\n      email: testUser.email,\n      role: testUser.role,\n    });\n  });\n\n  // Login functionality test\n  it('should handle login successfully', async (): Promise<void> => {\n    const tokenManager = TokenManagerMockScenarios.unauthenticated();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n\n    await act(async () => {\n      await result.current.login('test@example.com', 'password');\n    });\n\n    expect(result.current.isAuthenticated).toBe(true);\n  });\n\n  // Logout functionality test\n  it('should handle logout correctly', async (): Promise<void> => {\n    const tokenManager = TokenManagerMockScenarios.customUser();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isAuthenticated).toBe(true);\n\n    act(() => {\n      result.current.logout();\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.user).toBeNull();\n    expect(tokenManager.clearTokens).toHaveBeenCalled();\n  });\n\n  // Token refresh test\n  it('should handle token refresh', async (): Promise<void> => {\n    const tokenManager = TokenManagerMockScenarios.customUser();\n    (tokenManager.needsRefresh as jest.Mock).mockReturnValue(true);\n    \n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    const refreshResult = await act(async () => {\n      return await result.current.refreshToken();\n    });\n\n    expect(refreshResult).toBe(true);\n  });\n\n  // Error handling test\n  it('should handle login errors gracefully', async (): Promise<void> => {\n    const tokenManager = TokenManagerMockScenarios.unauthenticated();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    // Mock login failure\n    const mockError = new Error('Invalid credentials');\n    \n    await act(async () => {\n      try {\n        await result.current.login('wrong@email.com', 'wrongpassword');\n      } catch (error) {\n        expect(error).toEqual(mockError);\n      }\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.error).toBeTruthy();\n  });\n\n  // User update test\n  it('should update user profile', (): void => {\n    const tokenManager = TokenManagerMockScenarios.customUser();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    act(() => {\n      result.current.updateUser({ name: 'Updated Name' });\n    });\n\n    expect(result.current.user?.name).toBe('Updated Name');\n  });\n\n  // Error clearing test\n  it('should clear error state', (): void => {\n    const tokenManager = TokenManagerMockScenarios.unauthenticated();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    // Set error state\n    act(() => {\n      result.current.login('invalid', 'invalid').catch(() => {});\n    });\n\n    // Clear error\n    act(() => {\n      result.current.clearError();\n    });\n\n    expect(result.current.error).toBeNull();\n  });\n\n  // Access token utility test\n  it('should provide access token utility', (): void => {\n    const tokenManager = TokenManagerMockScenarios.customUser();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    const token = result.current.getAccessToken();\n    expect(token).toBe('mock-access-token');\n  });\n\n  // Token refresh check test\n  it('should check if token needs refresh', (): void => {\n    const tokenManager = TokenManagerMockScenarios.customUser();\n    (tokenManager.needsRefresh as jest.Mock).mockReturnValue(true);\n    \n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    const needsRefresh = result.current.needsRefresh();\n    expect(needsRefresh).toBe(true);\n  });\n\n  // TokenManager validation test\n  it('should validate custom token manager', (): void => {\n    const validTokenManager = TokenManagerMockScenarios.customUser();\n    \n    expect(() => {\n      renderHook(() => useAuth(), {\n        wrapper: createWrapper(validTokenManager),\n      });\n    }).not.toThrow();\n  });\n\n  // Invalid TokenManager test\n  it('should reject invalid token manager', (): void => {\n    const invalidTokenManager = { \n      getTokenInfo: jest.fn() \n      // Missing required methods\n    };\n\n    expect(() => {\n      renderHook(() => useAuth(), {\n        wrapper: createWrapper(invalidTokenManager),\n      });\n    }).toThrow('Invalid tokenManager: missing required methods');\n  });\n\n  // Context provider requirement test\n  it('should throw error when useAuth used outside provider', (): void => {\n    expect(() => {\n      renderHook(() => useAuth());\n    }).toThrow('useAuth must be used within an AuthProvider');\n  });\n\n  // Loading state test\n  it('should handle loading states correctly', async (): Promise<void> => {\n    const tokenManager = TokenManagerMockScenarios.unauthenticated();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isLoading).toBe(false);\n\n    // Test loading during login\n    act(() => {\n      result.current.login('test@example.com', 'password');\n    });\n\n    // Should be loading during async operation\n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false); // Will be false after completion\n    });\n  });\n\n  // Expired token handling test\n  it('should handle expired tokens correctly', (): void => {\n    const tokenManager = TokenManagerMockScenarios.expiredToken();\n    const { result } = renderHook(() => useAuth(), {\n      wrapper: createWrapper(tokenManager),\n    });\n\n    expect(result.current.isAuthenticated).toBe(false);\n    expect(result.current.user).toBeNull();\n  });\n});"],"names":["jest","mock","appLogger","debug","fn","info","warn","error","describe","testUser","id","email","name","role","createWrapper","tokenManager","TestWrapper","children","AuthProvider","displayName","beforeEach","clearAllMocks","it","TokenManagerMockScenarios","unauthenticated","result","renderHook","useAuth","wrapper","expect","current","isAuthenticated","toBe","user","toBeNull","isLoading","customUser","userId","toMatchObject","act","login","logout","clearTokens","toHaveBeenCalled","needsRefresh","mockReturnValue","refreshResult","refreshToken","mockError","Error","toEqual","toBeTruthy","updateUser","catch","clearError","token","getAccessToken","validTokenManager","not","toThrow","invalidTokenManager","getTokenInfo","waitFor","expiredToken"],"mappings":"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"}