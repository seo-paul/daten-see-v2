{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/data-sources.test.ts"],"sourcesContent":["/**\n * Data Sources API Service Tests\n * Testing data source CRUD operations and analytics queries\n */\n\nimport type { DataSource, DataSourceType, AnalyticsQuery } from '@/types';\n\nimport { DataSourceService, AnalyticsService } from '../data-sources';\nimport { apiClient } from '../index';\n\n// Mock the API client\njest.mock('../index', (): object => ({\n  apiClient: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n  createQueryFunction: (fn: Function): (() => Promise<any>) => async (): Promise<any> => {\n    const response = await fn();\n    if (!response.success) {\n      throw new Error(response.message || 'API request failed');\n    }\n    return response.data;\n  },\n}));\n\ndescribe('DataSourceService', (): void => {\n  const mockApiClient = apiClient as jest.Mocked<typeof apiClient>;\n\n  beforeEach((): void => {\n    jest.clearAllMocks();\n  });\n\n  describe('getDataSources', (): void => {\n    const mockDataSources: DataSource[] = [\n      {\n        id: 'ds-1',\n        name: 'Google Analytics',\n        type: 'google_analytics',\n        status: 'connected',\n        organizationId: 'org-1',\n        workspaceId: 'ws-1',\n        lastSync: '2024-01-15T10:00:00Z',\n        config: {\n          accountId: '12345',\n          propertyId: '67890',\n          viewId: '11111',\n        },\n      },\n      {\n        id: 'ds-2',\n        name: 'Analytics API',\n        type: 'rest_api',\n        status: 'connected',\n        organizationId: 'org-1',\n        workspaceId: 'ws-1',\n        lastSync: '2024-01-20T10:00:00Z',\n        config: {\n          baseUrl: 'https://api.analytics.com',\n          authType: 'bearer',\n        },\n      },\n    ];\n\n    it('should get all data sources without workspace filter', async (): Promise<void> => {\n      const mockResponse = {\n        data: mockDataSources,\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getDataSources();\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources');\n      expect(result).toEqual(mockDataSources);\n    });\n\n    it('should get data sources filtered by workspace', async (): Promise<void> => {\n      const mockResponse = {\n        data: [mockDataSources[0]],\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getDataSources('ws-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources?workspaceId=ws-1');\n      expect(result).toHaveLength(1);\n      expect(result[0]?.workspaceId).toBe('ws-1');\n    });\n\n    it('should handle empty data sources', async (): Promise<void> => {\n      const mockResponse = {\n        data: [],\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getDataSources();\n\n      expect(result).toEqual([]);\n    });\n\n    it('should handle API errors', async (): Promise<void> => {\n      mockApiClient.get.mockRejectedValueOnce(new Error('Network error'));\n\n      await expect(DataSourceService.getDataSources()).rejects.toThrow('Network error');\n    });\n  });\n\n  describe('getDataSource', (): void => {\n    const mockDataSource: DataSource = {\n      id: 'ds-1',\n      name: 'Production Database',\n      type: 'rest_api',\n      status: 'connected',\n      organizationId: 'org-1',\n      workspaceId: 'ws-1',\n      config: {\n        baseUrl: 'https://db.example.com',\n        authType: 'bearer',\n      },\n    };\n\n    it('should get single data source by ID', async (): Promise<void> => {\n      const mockResponse = {\n        data: mockDataSource,\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getDataSource('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1');\n      expect(result).toEqual(mockDataSource);\n    });\n\n    it('should handle not found error', async (): Promise<void> => {\n      mockApiClient.get.mockRejectedValueOnce(new Error('Data source not found'));\n\n      await expect(DataSourceService.getDataSource('non-existent')).rejects.toThrow('Data source not found');\n    });\n  });\n\n  describe('createDataSource', (): void => {\n    const createRequest = {\n      name: 'New Data Source',\n      type: 'rest_api' as DataSourceType,\n      config: {\n        baseUrl: 'https://localhost:3306',\n        authType: 'bearer' as const,\n      },\n      workspaceId: 'ws-1',\n    };\n\n    const mockCreatedDataSource: DataSource = {\n      id: 'ds-new',\n      ...createRequest,\n      organizationId: 'org-1',\n      status: 'connected',\n    };\n\n    it('should create new data source', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: mockCreatedDataSource,\n      });\n\n      const result = await DataSourceService.createDataSource(createRequest);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/data-sources', createRequest);\n      expect(result).toEqual(mockCreatedDataSource);\n    });\n\n    it('should handle creation failure', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        data: null,\n        success: false,\n        message: 'Invalid configuration',\n      });\n\n      await expect(DataSourceService.createDataSource(createRequest))\n        .rejects.toThrow('Invalid configuration');\n    });\n\n    it('should handle generic creation error', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        data: null,\n        success: false,\n        message: 'Failed to create data source',\n      });\n\n      await expect(DataSourceService.createDataSource(createRequest))\n        .rejects.toThrow('Failed to create data source');\n    });\n\n    it('should create data source without workspace', async (): Promise<void> => {\n      const requestWithoutWorkspace = {\n        name: 'Global Data Source',\n        type: 'rest_api' as DataSourceType,\n        config: {\n          baseUrl: 'https://api.example.com',\n          authType: 'none' as const,\n        },\n      };\n\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          id: 'ds-global',\n          ...requestWithoutWorkspace,\n          organizationId: 'org-1',\n          status: 'connected',\n        },\n      });\n\n      const result = await DataSourceService.createDataSource(requestWithoutWorkspace);\n\n      expect(result.workspaceId).toBeUndefined();\n    });\n  });\n\n  describe('updateDataSource', (): void => {\n    const updateRequest = {\n      name: 'Updated Database',\n      config: {\n        baseUrl: 'https://new-db.example.com',\n      },\n    };\n\n    const mockUpdatedDataSource: DataSource = {\n      id: 'ds-1',\n      name: 'Updated Database',\n      type: 'rest_api',\n      status: 'connected',\n      organizationId: 'org-1',\n      workspaceId: 'ws-1',\n      config: {\n        baseUrl: 'https://new-db.example.com',\n        authType: 'bearer',\n      },\n    };\n\n    it('should update data source', async (): Promise<void> => {\n      mockApiClient.put.mockResolvedValueOnce({\n        success: true,\n        data: mockUpdatedDataSource,\n      });\n\n      const result = await DataSourceService.updateDataSource('ds-1', updateRequest);\n\n      expect(mockApiClient.put).toHaveBeenCalledWith('/data-sources/ds-1', updateRequest);\n      expect(result).toEqual(mockUpdatedDataSource);\n    });\n\n    it('should update only name', async (): Promise<void> => {\n      const nameOnlyUpdate = { name: 'Renamed Database' };\n      \n      mockApiClient.put.mockResolvedValueOnce({\n        success: true,\n        data: { ...mockUpdatedDataSource, name: 'Renamed Database' },\n      });\n\n      const result = await DataSourceService.updateDataSource('ds-1', nameOnlyUpdate);\n\n      expect(mockApiClient.put).toHaveBeenCalledWith('/data-sources/ds-1', nameOnlyUpdate);\n      expect(result.name).toBe('Renamed Database');\n    });\n\n    it('should handle update failure', async (): Promise<void> => {\n      mockApiClient.put.mockResolvedValueOnce({\n        data: null,\n        success: false,\n        message: 'Connection failed with new config',\n      });\n\n      await expect(DataSourceService.updateDataSource('ds-1', updateRequest))\n        .rejects.toThrow('Connection failed with new config');\n    });\n  });\n\n  describe('deleteDataSource', (): void => {\n    it('should delete data source', async (): Promise<void> => {\n      mockApiClient.delete.mockResolvedValueOnce({ \n        data: undefined,\n        success: true \n      });\n\n      await expect(DataSourceService.deleteDataSource('ds-1')).resolves.not.toThrow();\n\n      expect(mockApiClient.delete).toHaveBeenCalledWith('/data-sources/ds-1');\n    });\n\n    it('should handle delete error', async (): Promise<void> => {\n      mockApiClient.delete.mockRejectedValueOnce(new Error('Cannot delete active data source'));\n\n      await expect(DataSourceService.deleteDataSource('ds-1'))\n        .rejects.toThrow('Cannot delete active data source');\n    });\n  });\n\n  describe('testConnection', (): void => {\n    it('should test successful connection', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          connected: true,\n        },\n      });\n\n      const result = await DataSourceService.testConnection('ds-1');\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/data-sources/ds-1/test');\n      expect(result).toEqual({\n        connected: true,\n      });\n    });\n\n    it('should test failed connection', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          connected: false,\n          error: 'ECONNREFUSED',\n        },\n      });\n\n      const result = await DataSourceService.testConnection('ds-1');\n\n      expect(result).toEqual({\n        connected: false,\n        error: 'ECONNREFUSED',\n      });\n    });\n\n    it('should handle test API error', async (): Promise<void> => {\n      mockApiClient.post.mockRejectedValueOnce(new Error('API error'));\n\n      await expect(DataSourceService.testConnection('ds-1')).rejects.toThrow('API error');\n    });\n  });\n\n  describe('AnalyticsService.query', (): void => {\n    const mockQuery: AnalyticsQuery = {\n      dataSource: 'ds-1',\n      metrics: ['users', 'sessions'],\n      dimensions: ['country', 'device'],\n      timeRange: {\n        start: '2024-01-01',\n        end: '2024-01-31',\n        preset: 'last30days',\n      },\n    };\n\n    const mockResponse = {\n      success: true,\n      data: {\n        data: [\n          {\n            dimensions: { country: 'US', device: 'desktop' },\n            metrics: { users: 1000, sessions: 1500 },\n            timestamp: '2024-01-01',\n          },\n          {\n            dimensions: { country: 'DE', device: 'mobile' },\n            metrics: { users: 800, sessions: 1200 },\n            timestamp: '2024-01-02',\n          },\n        ],\n        totalRows: 2,\n        query: mockQuery,\n        executionTime: 45,\n        cached: false,\n      },\n    };\n\n    it('should execute query successfully', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce(mockResponse);\n\n      const result = await AnalyticsService.query(mockQuery);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/analytics/query', mockQuery);\n      expect(result).toEqual(mockResponse.data);\n    });\n\n    it('should execute query with filters', async (): Promise<void> => {\n      const queryWithFilters = {\n        ...mockQuery,\n        filters: [\n          {\n            field: 'country',\n            operator: 'equals' as const,\n            value: 'US',\n          },\n        ],\n      };\n\n      mockApiClient.post.mockResolvedValueOnce(mockResponse);\n\n      await AnalyticsService.query(queryWithFilters);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/analytics/query', queryWithFilters);\n    });\n\n    it('should handle query execution error', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        data: null,\n        success: false,\n        message: 'Syntax error in SQL query',\n      });\n\n      await expect(AnalyticsService.query(mockQuery))\n        .rejects.toThrow('Syntax error in SQL query');\n    });\n\n    it('should handle empty query results', async (): Promise<void> => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          data: [],\n          totalRows: 0,\n          query: mockQuery,\n          executionTime: 10,\n          cached: false,\n        },\n      });\n\n      const result = await AnalyticsService.query(mockQuery);\n\n      expect(result.data).toHaveLength(0);\n      expect(result.totalRows).toBe(0);\n    });\n  });\n\n  describe('getAvailableMetrics and getAvailableDimensions', (): void => {\n    const mockMetrics = ['revenue', 'users', 'sessions', 'pageviews'];\n    const mockDimensions = ['country', 'device', 'browser', 'page'];\n\n    it('should get available metrics', async (): Promise<void> => {\n      const mockResponse = {\n        data: mockMetrics,\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getAvailableMetrics('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1/metrics');\n      expect(result).toEqual(mockMetrics);\n    });\n\n    it('should get available dimensions', async (): Promise<void> => {\n      const mockResponse = {\n        data: mockDimensions,\n        success: true,\n      };\n      mockApiClient.get.mockResolvedValueOnce(mockResponse);\n\n      const result = await DataSourceService.getAvailableDimensions('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1/dimensions');\n      expect(result).toEqual(mockDimensions);\n    });\n  });\n});"],"names":["jest","mock","apiClient","get","fn","post","put","delete","createQueryFunction","response","success","Error","message","data","describe","mockApiClient","beforeEach","clearAllMocks","mockDataSources","id","name","type","status","organizationId","workspaceId","lastSync","config","accountId","propertyId","viewId","baseUrl","authType","it","mockResponse","mockResolvedValueOnce","result","DataSourceService","getDataSources","expect","toHaveBeenCalledWith","toEqual","toHaveLength","toBe","mockRejectedValueOnce","rejects","toThrow","mockDataSource","getDataSource","createRequest","mockCreatedDataSource","createDataSource","requestWithoutWorkspace","toBeUndefined","updateRequest","mockUpdatedDataSource","updateDataSource","nameOnlyUpdate","undefined","deleteDataSource","resolves","not","connected","testConnection","error","mockQuery","dataSource","metrics","dimensions","timeRange","start","end","preset","country","device","users","sessions","timestamp","totalRows","query","executionTime","cached","AnalyticsService","queryWithFilters","filters","field","operator","value","mockMetrics","mockDimensions","getAvailableMetrics","getAvailableDimensions"],"mappings":"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"}