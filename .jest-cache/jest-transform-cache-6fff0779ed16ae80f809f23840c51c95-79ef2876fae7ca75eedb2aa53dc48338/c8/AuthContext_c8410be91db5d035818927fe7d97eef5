93cf0ce619f0a3f6646f98ecd5dd1828
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AuthContext () {
        return AuthContext;
    },
    get AuthProvider () {
        return AuthProvider;
    },
    get useAuth () {
        return useAuth;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _token = require("../lib/auth/token");
const _loggerconfig = require("../lib/monitoring/logger.config");
// Create context
const AuthContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function AuthProvider({ children, tokenManager: injectedTokenManager }) {
    // Dependency Injection: Use injected tokenManager or default to singleton
    const activeTokenManager = injectedTokenManager ?? _token.tokenManager;
    // Production safety check
    if (process.env.NODE_ENV === 'production' && injectedTokenManager && injectedTokenManager !== _token.tokenManager) {
        _loggerconfig.appLogger.warn('Custom tokenManager injected in production environment', {
            isCustomTokenManager: true,
            hasInjectedTokenManager: !!injectedTokenManager
        });
    }
    // Comprehensive TokenManager Interface Validation
    if (injectedTokenManager) {
        // Type validation
        if (typeof injectedTokenManager !== 'object' || injectedTokenManager === null) {
            throw new Error('Invalid tokenManager: must be a non-null object');
        }
        // Required methods validation
        const requiredMethods = [
            'getTokenInfo',
            'setTokens',
            'clearTokens',
            'updateApiClientToken',
            'getCurrentUserInfo',
            'needsRefresh',
            'getAccessToken',
            'getRefreshToken',
            'parseTokenPayload'
        ];
        const missingMethods = requiredMethods.filter((method)=>!injectedTokenManager[method] || typeof injectedTokenManager[method] !== 'function');
        if (missingMethods.length > 0) {
            throw new Error(`Invalid tokenManager: missing required methods: ${missingMethods.join(', ')}. TokenManager must implement the full interface.`);
        }
        // Production environment extra validation
        if (process.env.NODE_ENV === 'production') {
            // Check if this looks like a test mock (suspicious patterns)
            const mockIndicators = [
                injectedTokenManager.constructor?.name === 'Object',
                'mockReturnValue' in injectedTokenManager.getTokenInfo,
                injectedTokenManager.getTokenInfo.toString().includes('jest')
            ];
            if (mockIndicators.some(Boolean)) {
                _loggerconfig.appLogger.error('Suspicious tokenManager detected in production', {
                    constructorName: injectedTokenManager.constructor?.name,
                    hasMockSignature: mockIndicators[1],
                    hasJestSignature: mockIndicators[2],
                    isProduction: true
                });
                // In production, reject obvious test mocks
                throw new Error('Invalid tokenManager: test mocks are not allowed in production environment');
            }
        }
        _loggerconfig.appLogger.debug('TokenManager validation passed', {
            isInjected: true,
            methodCount: requiredMethods.length,
            environment: process.env.NODE_ENV
        });
    }
    const [authState, setAuthState] = (0, _react.useState)({
        user: null,
        isAuthenticated: false,
        isLoading: true,
        error: null
    });
    // Initialize auth state from stored tokens
    (0, _react.useEffect)(()=>{
        const initializeAuth = async ()=>{
            try {
                _loggerconfig.appLogger.debug('Initializing authentication state');
                const tokenInfo = activeTokenManager.getTokenInfo();
                if (tokenInfo.isValid && tokenInfo.token) {
                    // Get user info from token
                    const userInfo = activeTokenManager.getCurrentUserInfo();
                    if (userInfo?.userId && userInfo?.email) {
                        const user = {
                            id: userInfo.userId,
                            email: userInfo.email,
                            name: userInfo.email.split('@')[0] || 'Unknown User',
                            role: userInfo.role || 'user'
                        };
                        // Update API client with token
                        activeTokenManager.updateApiClientToken();
                        setAuthState({
                            user,
                            isAuthenticated: true,
                            isLoading: false,
                            error: null
                        });
                        _loggerconfig.appLogger.info('Authentication restored from stored token', {
                            userId: user.id,
                            email: user.email,
                            role: user.role
                        });
                    } else {
                        throw new Error('Invalid token payload');
                    }
                } else {
                    // No valid token found
                    setAuthState({
                        user: null,
                        isAuthenticated: false,
                        isLoading: false,
                        error: null
                    });
                    _loggerconfig.appLogger.debug('No valid authentication token found');
                }
            } catch (error) {
                _loggerconfig.appLogger.error('Failed to initialize authentication', {
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
                // Clear invalid tokens
                activeTokenManager.clearTokens();
                setAuthState({
                    user: null,
                    isAuthenticated: false,
                    isLoading: false,
                    error: 'Authentication initialization failed'
                });
            }
        };
        initializeAuth();
    }, [
        activeTokenManager
    ]);
    // Refresh token function
    const refreshToken = (0, _react.useCallback)(async ()=>{
        try {
            const refreshTokenValue = activeTokenManager.getRefreshToken();
            if (!refreshTokenValue) {
                throw new Error('No refresh token available');
            }
            _loggerconfig.appLogger.debug('Token refresh attempt started');
            // TODO: Replace with actual API call
            await new Promise((resolve)=>setTimeout(resolve, 500));
            // Mock successful refresh
            const mockTokenData = {
                token: 'refreshed.jwt.token',
                refreshToken: refreshTokenValue,
                expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
            };
            activeTokenManager.setTokens(mockTokenData);
            activeTokenManager.updateApiClientToken();
            _loggerconfig.appLogger.info('Token refresh successful');
            return true;
        } catch (error) {
            _loggerconfig.appLogger.error('Token refresh failed', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            // Clear tokens and update state on refresh failure
            activeTokenManager.clearTokens();
            setAuthState({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                error: null
            });
            return false;
        }
    }, [
        activeTokenManager
    ]);
    // Auto-refresh token when needed
    (0, _react.useEffect)(()=>{
        if (!authState.isAuthenticated) return;
        const checkTokenRefresh = async ()=>{
            if (activeTokenManager.needsRefresh()) {
                _loggerconfig.appLogger.debug('Token needs refresh, attempting refresh');
                refreshToken().catch((error)=>{
                    _loggerconfig.appLogger.error('Auto token refresh failed', {
                        error
                    });
                });
            }
        };
        // Check every 5 minutes
        const interval = setInterval(checkTokenRefresh, 5 * 60 * 1000);
        // Check immediately
        checkTokenRefresh();
        return ()=>clearInterval(interval);
    }, [
        authState.isAuthenticated,
        refreshToken,
        activeTokenManager
    ]);
    // Login function (will be enhanced with TanStack mutation)
    const login = async (email)=>{
        setAuthState((prev)=>({
                ...prev,
                isLoading: true,
                error: null
            }));
        try {
            _loggerconfig.appLogger.info('Login attempt started', {
                email
            });
            // TODO: Replace with actual API call via TanStack mutation
            // For now, mock successful login
            await new Promise((resolve)=>setTimeout(resolve, 1000));
            // Mock successful response
            const mockTokenData = {
                token: 'mock.jwt.token',
                refreshToken: 'mock.refresh.token',
                expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
            };
            const mockUser = {
                id: 'user-1',
                email,
                name: email.split('@')[0] || 'Unknown User',
                role: 'user'
            };
            // Store tokens
            activeTokenManager.setTokens(mockTokenData);
            activeTokenManager.updateApiClientToken();
            setAuthState({
                user: mockUser,
                isAuthenticated: true,
                isLoading: false,
                error: null
            });
            _loggerconfig.appLogger.info('Login successful', {
                userId: mockUser.id,
                email: mockUser.email
            });
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Login failed';
            _loggerconfig.appLogger.error('Login failed', {
                email,
                error: errorMessage
            });
            setAuthState((prev)=>({
                    ...prev,
                    isLoading: false,
                    error: errorMessage
                }));
            throw error;
        }
    };
    // Logout function
    const logout = ()=>{
        _loggerconfig.appLogger.info('Logout started', {
            ...authState.user?.id && {
                userId: authState.user.id
            }
        });
        // Clear tokens using active token manager
        activeTokenManager.clearTokens();
        // Reset auth state
        setAuthState({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            error: null
        });
        _loggerconfig.appLogger.info('Logout completed');
    };
    // Clear error
    const clearError = ()=>{
        setAuthState((prev)=>({
                ...prev,
                error: null
            }));
    };
    // Update user profile
    const updateUser = (updates)=>{
        if (!authState.user) return;
        const updatedUser = {
            ...authState.user,
            ...updates
        };
        setAuthState((prev)=>({
                ...prev,
                user: updatedUser
            }));
        _loggerconfig.appLogger.info('User profile updated', {
            userId: updatedUser.id,
            updates
        });
    };
    // Token utilities
    const getAccessToken = ()=>{
        return activeTokenManager.getAccessToken();
    };
    const needsRefresh = ()=>{
        return activeTokenManager.needsRefresh();
    };
    // Context value
    const contextValue = {
        // State
        ...authState,
        // Actions
        login,
        logout,
        refreshToken,
        clearError,
        updateUser,
        // Utilities
        getAccessToken,
        needsRefresh
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(AuthContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useAuth() {
    const context = (0, _react.useContext)(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,