{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/layout/__tests__/MainLayout.test.tsx"],"sourcesContent":["/**\n * MainLayout Component Tests\n * Testing main application layout structure and navigation\n */\n\nimport { render, screen } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React from 'react';\n\nimport { MainLayout } from '../MainLayout';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { createMockTokenManager } from '@/lib/test-utils/auth-mocks';\n\n// Mock TopNavigation component\njest.mock('../TopNavigation', () => ({\n  TopNavigation: () => <nav data-testid=\"top-navigation\">Top Navigation</nav>,\n}));\n\n// Mock Sentry to avoid errors in tests\njest.mock('@sentry/nextjs', () => ({\n  addBreadcrumb: jest.fn(),\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  setTag: jest.fn(),\n  setContext: jest.fn(),\n}));\n\n// Mock logger to avoid console output in tests\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\n// Mock next/navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n}));\n\n// Test wrapper component\nfunction TestWrapper({ children }: { children: React.ReactNode }) {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  const mockTokenManager = createMockTokenManager();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider tokenManager={mockTokenManager}>\n        {children}\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\n// Helper function to render MainLayout with wrapper\nfunction renderMainLayout(props = {}) {\n  return render(\n    <TestWrapper>\n      <MainLayout {...props}>\n        <div data-testid=\"main-content\">Main Content</div>\n      </MainLayout>\n    </TestWrapper>\n  );\n}\n\ndescribe('MainLayout Component', () => {\n  describe('Basic Rendering', () => {\n    it('should render main layout with all essential components', () => {\n      renderMainLayout();\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByTestId('main-content')).toBeInTheDocument();\n    });\n\n    it('should apply correct root container styling', () => {\n      renderMainLayout();\n\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      expect(rootContainer).toHaveClass('min-h-screen', 'bg-gray-50');\n    });\n\n    it('should apply correct main element styling', () => {\n      renderMainLayout();\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toBeInTheDocument();\n      expect(mainElement).toHaveClass('flex-1');\n    });\n\n    it('should render children inside main element', () => {\n      renderMainLayout();\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toContainElement(screen.getByTestId('main-content'));\n    });\n  });\n\n  describe('Custom Styling', () => {\n    it('should apply custom className to main element', () => {\n      renderMainLayout({ className: 'custom-main-class' });\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toHaveClass('flex-1', 'custom-main-class');\n    });\n\n    it('should handle multiple custom classes', () => {\n      renderMainLayout({ className: 'px-4 py-6 bg-blue-50' });\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toHaveClass('flex-1', 'px-4', 'py-6', 'bg-blue-50');\n    });\n\n    it('should handle empty className prop', () => {\n      renderMainLayout({ className: '' });\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toHaveClass('flex-1');\n    });\n\n    it('should handle undefined className prop', () => {\n      renderMainLayout({ className: undefined });\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toHaveClass('flex-1');\n    });\n  });\n\n  describe('Children Rendering', () => {\n    it('should render single child component', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <h1>Single Child</h1>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByRole('heading', { name: 'Single Child' })).toBeInTheDocument();\n    });\n\n    it('should render multiple child components', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <header>Header Content</header>\n            <section>Section Content</section>\n            <footer>Footer Content</footer>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Header Content')).toBeInTheDocument();\n      expect(screen.getByText('Section Content')).toBeInTheDocument();\n      expect(screen.getByText('Footer Content')).toBeInTheDocument();\n    });\n\n    it('should render complex nested children', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <div>\n              <header>\n                <nav>\n                  <ul>\n                    <li>Nav Item 1</li>\n                    <li>Nav Item 2</li>\n                  </ul>\n                </nav>\n              </header>\n              <main>\n                <article>\n                  <h1>Article Title</h1>\n                  <p>Article content</p>\n                </article>\n              </main>\n            </div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Nav Item 1')).toBeInTheDocument();\n      expect(screen.getByText('Nav Item 2')).toBeInTheDocument();\n      expect(screen.getByRole('heading', { name: 'Article Title' })).toBeInTheDocument();\n      expect(screen.getByText('Article content')).toBeInTheDocument();\n    });\n\n    it('should handle React fragments as children', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <>\n              <h1>Fragment Child 1</h1>\n              <p>Fragment Child 2</p>\n            </>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByRole('heading', { name: 'Fragment Child 1' })).toBeInTheDocument();\n      expect(screen.getByText('Fragment Child 2')).toBeInTheDocument();\n    });\n\n    it('should handle conditional rendering of children', () => {\n      const showContent = true;\n\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {showContent && <div>Conditional Content</div>}\n            <div>Always Visible</div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Conditional Content')).toBeInTheDocument();\n      expect(screen.getByText('Always Visible')).toBeInTheDocument();\n    });\n  });\n\n  describe('Layout Structure', () => {\n    it('should have proper semantic HTML structure', () => {\n      renderMainLayout();\n\n      // Root container\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      expect(rootContainer?.tagName).toBe('DIV');\n\n      // Navigation\n      const navigation = screen.getByTestId('top-navigation');\n      expect(navigation.tagName).toBe('NAV');\n\n      // Main content area\n      const mainElement = screen.getByRole('main');\n      expect(mainElement.tagName).toBe('MAIN');\n    });\n\n    it('should maintain proper element hierarchy', () => {\n      renderMainLayout();\n\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      const navigation = screen.getByTestId('top-navigation');\n      const mainElement = screen.getByRole('main');\n\n      expect(rootContainer).toContainElement(navigation);\n      expect(rootContainer).toContainElement(mainElement);\n      expect(mainElement).toContainElement(screen.getByTestId('main-content'));\n    });\n\n    it('should position navigation before main content', () => {\n      renderMainLayout();\n\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      const children = Array.from(rootContainer?.children || []);\n\n      expect(children[0]).toBe(screen.getByTestId('top-navigation'));\n      expect(children[1]).toBe(screen.getByRole('main'));\n    });\n  });\n\n  describe('Integration with TopNavigation', () => {\n    it('should render TopNavigation component', () => {\n      renderMainLayout();\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByText('Top Navigation')).toBeInTheDocument();\n    });\n\n    it('should not pass props to TopNavigation', () => {\n      // TopNavigation should not receive any props from MainLayout\n      renderMainLayout({ customProp: 'test' });\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n    });\n  });\n\n  describe('Responsive Design Considerations', () => {\n    it('should use min-h-screen for full viewport height', () => {\n      renderMainLayout();\n\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      expect(rootContainer).toHaveClass('min-h-screen');\n    });\n\n    it('should use flex-1 for main content to fill remaining space', () => {\n      renderMainLayout();\n\n      const mainElement = screen.getByRole('main');\n      expect(mainElement).toHaveClass('flex-1');\n    });\n\n    it('should apply background color to root container', () => {\n      renderMainLayout();\n\n      const rootContainer = screen.getByTestId('top-navigation').parentElement;\n      expect(rootContainer).toHaveClass('bg-gray-50');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle null children gracefully', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {null}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n\n    it('should handle undefined children gracefully', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {undefined}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n\n    it('should handle empty string children', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {''}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n\n    it('should handle boolean children', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {true}\n            {false}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance and Memory', () => {\n    it('should not cause memory leaks on unmount', () => {\n      const { unmount } = renderMainLayout();\n\n      expect(screen.getByTestId('top-navigation')).toBeInTheDocument();\n\n      // Should unmount cleanly without errors\n      expect(() => unmount()).not.toThrow();\n    });\n\n    it('should handle rapid re-renders', () => {\n      const { rerender } = renderMainLayout();\n\n      for (let i = 0; i < 10; i++) {\n        rerender(\n          <TestWrapper>\n            <MainLayout className={`iteration-${i}`}>\n              <div>Iteration {i}</div>\n            </MainLayout>\n          </TestWrapper>\n        );\n      }\n\n      expect(screen.getByText('Iteration 9')).toBeInTheDocument();\n      expect(screen.getByRole('main')).toHaveClass('iteration-9');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper landmark roles', () => {\n      renderMainLayout();\n\n      // Main landmark should be present\n      expect(screen.getByRole('main')).toBeInTheDocument();\n      \n      // Navigation landmark should be present (from TopNavigation mock)\n      expect(screen.getByRole('navigation')).toBeInTheDocument();\n    });\n\n    it('should maintain focus management', () => {\n      renderMainLayout();\n\n      const mainElement = screen.getByRole('main');\n      \n      // Main element should be focusable if needed\n      expect(mainElement).toBeInTheDocument();\n    });\n\n    it('should support screen readers', () => {\n      renderMainLayout();\n\n      // Proper semantic structure for screen readers\n      const mainElement = screen.getByRole('main');\n      expect(mainElement.tagName).toBe('MAIN');\n    });\n  });\n\n  describe('Component Props Interface', () => {\n    it('should accept ReactNode children', () => {\n      const complexChild = (\n        <div>\n          <span>Complex</span>\n          <em>Child</em>\n          <strong>Component</strong>\n        </div>\n      );\n\n      render(\n        <TestWrapper>\n          <MainLayout>\n            {complexChild}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Complex')).toBeInTheDocument();\n      expect(screen.getByText('Child')).toBeInTheDocument();\n      expect(screen.getByText('Component')).toBeInTheDocument();\n    });\n\n    it('should accept optional className prop', () => {\n      render(\n        <TestWrapper>\n          <MainLayout className=\"test-class\">\n            <div>Test</div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByRole('main')).toHaveClass('test-class');\n    });\n\n    it('should work without any props', () => {\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <div>No props test</div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('No props test')).toBeInTheDocument();\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle very large content', () => {\n      const largeContent = 'A'.repeat(10000);\n\n      render(\n        <TestWrapper>\n          <MainLayout>\n            <div>{largeContent}</div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText(largeContent)).toBeInTheDocument();\n    });\n\n    it('should handle special characters in className', () => {\n      render(\n        <TestWrapper>\n          <MainLayout className=\"test-class_with-special.chars:hover\">\n            <div>Special chars test</div>\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByRole('main')).toHaveClass('test-class_with-special.chars:hover');\n    });\n\n    it('should handle dynamic children changes', () => {\n      let showFirst = true;\n\n      const { rerender } = render(\n        <TestWrapper>\n          <MainLayout>\n            {showFirst ? <div>First Child</div> : <div>Second Child</div>}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('First Child')).toBeInTheDocument();\n\n      showFirst = false;\n\n      rerender(\n        <TestWrapper>\n          <MainLayout>\n            {showFirst ? <div>First Child</div> : <div>Second Child</div>}\n          </MainLayout>\n        </TestWrapper>\n      );\n\n      expect(screen.getByText('Second Child')).toBeInTheDocument();\n      expect(screen.queryByText('First Child')).not.toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","TopNavigation","nav","data-testid","addBreadcrumb","fn","captureException","captureMessage","setTag","setContext","appLogger","debug","info","warn","error","useRouter","push","replace","back","forward","refresh","prefetch","TestWrapper","children","queryClient","QueryClient","defaultOptions","queries","retry","mutations","mockTokenManager","createMockTokenManager","QueryClientProvider","client","AuthProvider","tokenManager","renderMainLayout","props","render","MainLayout","div","describe","it","expect","screen","getByTestId","toBeInTheDocument","rootContainer","parentElement","toHaveClass","mainElement","getByRole","toContainElement","className","undefined","h1","name","header","section","footer","getByText","ul","li","main","article","p","showContent","tagName","toBe","navigation","Array","from","customProp","unmount","not","toThrow","rerender","i","complexChild","span","em","strong","largeContent","repeat","showFirst","queryByText"],"mappings":"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"}