{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/data-sources.test.ts"],"sourcesContent":["/**\n * Data Sources API Service Tests\n * Testing data source CRUD operations and analytics queries\n */\n\nimport type { DataSource, DataSourceType, AnalyticsQuery } from '@/types';\n\nimport { DataSourceService, AnalyticsService } from '../data-sources';\nimport { apiClient } from '../index';\n\n// Mock the API client\njest.mock('../index', () => ({\n  apiClient: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n  createQueryFunction: (fn: Function) => fn,\n}));\n\ndescribe('DataSourceService', () => {\n  const mockApiClient = apiClient as jest.Mocked<typeof apiClient>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getDataSources', () => {\n    const mockDataSources: DataSource[] = [\n      {\n        id: 'ds-1',\n        name: 'Production Database',\n        type: 'postgresql',\n        status: 'connected',\n        workspaceId: 'ws-1',\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date('2024-01-15'),\n        config: {\n          host: 'db.example.com',\n          port: 5432,\n          database: 'production',\n        },\n      },\n      {\n        id: 'ds-2',\n        name: 'Analytics API',\n        type: 'rest-api',\n        status: 'connected',\n        workspaceId: 'ws-1',\n        createdAt: new Date('2024-01-05'),\n        updatedAt: new Date('2024-01-20'),\n        config: {\n          baseUrl: 'https://api.analytics.com',\n          authType: 'bearer',\n        },\n      },\n    ];\n\n    it('should get all data sources without workspace filter', async () => {\n      mockApiClient.get.mockResolvedValueOnce(mockDataSources);\n\n      const result = await DataSourceService.getDataSources();\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources');\n      expect(result).toEqual(mockDataSources);\n    });\n\n    it('should get data sources filtered by workspace', async () => {\n      mockApiClient.get.mockResolvedValueOnce([mockDataSources[0]]);\n\n      const result = await DataSourceService.getDataSources('ws-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources?workspaceId=ws-1');\n      expect(result).toHaveLength(1);\n      expect(result[0].workspaceId).toBe('ws-1');\n    });\n\n    it('should handle empty data sources', async () => {\n      mockApiClient.get.mockResolvedValueOnce([]);\n\n      const result = await DataSourceService.getDataSources();\n\n      expect(result).toEqual([]);\n    });\n\n    it('should handle API errors', async () => {\n      mockApiClient.get.mockRejectedValueOnce(new Error('Network error'));\n\n      await expect(DataSourceService.getDataSources()).rejects.toThrow('Network error');\n    });\n  });\n\n  describe('getDataSource', () => {\n    const mockDataSource: DataSource = {\n      id: 'ds-1',\n      name: 'Production Database',\n      type: 'postgresql',\n      status: 'connected',\n      workspaceId: 'ws-1',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-15'),\n      config: {\n        host: 'db.example.com',\n        port: 5432,\n        database: 'production',\n      },\n    };\n\n    it('should get single data source by ID', async () => {\n      mockApiClient.get.mockResolvedValueOnce(mockDataSource);\n\n      const result = await DataSourceService.getDataSource('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1');\n      expect(result).toEqual(mockDataSource);\n    });\n\n    it('should handle not found error', async () => {\n      mockApiClient.get.mockRejectedValueOnce(new Error('Data source not found'));\n\n      await expect(DataSourceService.getDataSource('non-existent')).rejects.toThrow('Data source not found');\n    });\n  });\n\n  describe('createDataSource', () => {\n    const createRequest = {\n      name: 'New Data Source',\n      type: 'mysql' as DataSourceType,\n      config: {\n        host: 'localhost',\n        port: 3306,\n        database: 'test_db',\n        username: 'test_user',\n      },\n      workspaceId: 'ws-1',\n    };\n\n    const mockCreatedDataSource: DataSource = {\n      id: 'ds-new',\n      ...createRequest,\n      status: 'connecting',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    it('should create new data source', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: mockCreatedDataSource,\n      });\n\n      const result = await DataSourceService.createDataSource(createRequest);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/data-sources', createRequest);\n      expect(result).toEqual(mockCreatedDataSource);\n    });\n\n    it('should handle creation failure', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: false,\n        message: 'Invalid configuration',\n      });\n\n      await expect(DataSourceService.createDataSource(createRequest))\n        .rejects.toThrow('Invalid configuration');\n    });\n\n    it('should handle generic creation error', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: false,\n      });\n\n      await expect(DataSourceService.createDataSource(createRequest))\n        .rejects.toThrow('Failed to create data source');\n    });\n\n    it('should create data source without workspace', async () => {\n      const requestWithoutWorkspace = {\n        name: 'Global Data Source',\n        type: 'rest-api' as DataSourceType,\n        config: {\n          baseUrl: 'https://api.example.com',\n        },\n      };\n\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          id: 'ds-global',\n          ...requestWithoutWorkspace,\n          status: 'connected',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      });\n\n      const result = await DataSourceService.createDataSource(requestWithoutWorkspace);\n\n      expect(result.workspaceId).toBeUndefined();\n    });\n  });\n\n  describe('updateDataSource', () => {\n    const updateRequest = {\n      name: 'Updated Database',\n      config: {\n        host: 'new-db.example.com',\n      },\n    };\n\n    const mockUpdatedDataSource: DataSource = {\n      id: 'ds-1',\n      name: 'Updated Database',\n      type: 'postgresql',\n      status: 'connected',\n      workspaceId: 'ws-1',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date(),\n      config: {\n        host: 'new-db.example.com',\n        port: 5432,\n        database: 'production',\n      },\n    };\n\n    it('should update data source', async () => {\n      mockApiClient.put.mockResolvedValueOnce({\n        success: true,\n        data: mockUpdatedDataSource,\n      });\n\n      const result = await DataSourceService.updateDataSource('ds-1', updateRequest);\n\n      expect(mockApiClient.put).toHaveBeenCalledWith('/data-sources/ds-1', updateRequest);\n      expect(result).toEqual(mockUpdatedDataSource);\n    });\n\n    it('should update only name', async () => {\n      const nameOnlyUpdate = { name: 'Renamed Database' };\n      \n      mockApiClient.put.mockResolvedValueOnce({\n        success: true,\n        data: { ...mockUpdatedDataSource, name: 'Renamed Database' },\n      });\n\n      const result = await DataSourceService.updateDataSource('ds-1', nameOnlyUpdate);\n\n      expect(mockApiClient.put).toHaveBeenCalledWith('/data-sources/ds-1', nameOnlyUpdate);\n      expect(result.name).toBe('Renamed Database');\n    });\n\n    it('should handle update failure', async () => {\n      mockApiClient.put.mockResolvedValueOnce({\n        success: false,\n        message: 'Connection failed with new config',\n      });\n\n      await expect(DataSourceService.updateDataSource('ds-1', updateRequest))\n        .rejects.toThrow('Connection failed with new config');\n    });\n  });\n\n  describe('deleteDataSource', () => {\n    it('should delete data source', async () => {\n      mockApiClient.delete.mockResolvedValueOnce({ success: true });\n\n      await expect(DataSourceService.deleteDataSource('ds-1')).resolves.not.toThrow();\n\n      expect(mockApiClient.delete).toHaveBeenCalledWith('/data-sources/ds-1');\n    });\n\n    it('should handle delete error', async () => {\n      mockApiClient.delete.mockRejectedValueOnce(new Error('Cannot delete active data source'));\n\n      await expect(DataSourceService.deleteDataSource('ds-1'))\n        .rejects.toThrow('Cannot delete active data source');\n    });\n  });\n\n  describe('testConnection', () => {\n    it('should test successful connection', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          connected: true,\n        },\n      });\n\n      const result = await DataSourceService.testConnection('ds-1');\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/data-sources/ds-1/test');\n      expect(result).toEqual({\n        connected: true,\n      });\n    });\n\n    it('should test failed connection', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          connected: false,\n          error: 'ECONNREFUSED',\n        },\n      });\n\n      const result = await DataSourceService.testConnection('ds-1');\n\n      expect(result).toEqual({\n        connected: false,\n        error: 'ECONNREFUSED',\n      });\n    });\n\n    it('should handle test API error', async () => {\n      mockApiClient.post.mockRejectedValueOnce(new Error('API error'));\n\n      await expect(DataSourceService.testConnection('ds-1')).rejects.toThrow('API error');\n    });\n  });\n\n  describe('AnalyticsService.query', () => {\n    const mockQuery: AnalyticsQuery = {\n      dataSourceId: 'ds-1',\n      query: 'SELECT * FROM users LIMIT 10',\n      parameters: {},\n    };\n\n    const mockResponse = {\n      success: true,\n      data: {\n        rows: [\n          { id: 1, name: 'User 1', email: 'user1@example.com' },\n          { id: 2, name: 'User 2', email: 'user2@example.com' },\n        ],\n        metadata: {\n          columns: ['id', 'name', 'email'],\n          rowCount: 2,\n          executionTime: 45,\n        },\n      },\n    };\n\n    it('should execute query successfully', async () => {\n      mockApiClient.post.mockResolvedValueOnce(mockResponse);\n\n      const result = await AnalyticsService.query(mockQuery);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/analytics/query', mockQuery);\n      expect(result).toEqual(mockResponse.data);\n    });\n\n    it('should execute query with parameters', async () => {\n      const queryWithParams = {\n        ...mockQuery,\n        parameters: {\n          userId: 123,\n          startDate: '2024-01-01',\n        },\n      };\n\n      mockApiClient.post.mockResolvedValueOnce(mockResponse);\n\n      await AnalyticsService.query(queryWithParams);\n\n      expect(mockApiClient.post).toHaveBeenCalledWith('/analytics/query', queryWithParams);\n    });\n\n    it('should handle query execution error', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: false,\n        message: 'Syntax error in SQL query',\n      });\n\n      await expect(AnalyticsService.query(mockQuery))\n        .rejects.toThrow('Syntax error in SQL query');\n    });\n\n    it('should handle empty query results', async () => {\n      mockApiClient.post.mockResolvedValueOnce({\n        success: true,\n        data: {\n          rows: [],\n          metadata: {\n            columns: [],\n            rowCount: 0,\n            executionTime: 10,\n          },\n        },\n      });\n\n      const result = await AnalyticsService.query(mockQuery);\n\n      expect(result.rows).toHaveLength(0);\n      expect(result.metadata.rowCount).toBe(0);\n    });\n  });\n\n  describe('getAvailableMetrics and getAvailableDimensions', () => {\n    const mockMetrics = ['revenue', 'users', 'sessions', 'pageviews'];\n    const mockDimensions = ['country', 'device', 'browser', 'page'];\n\n    it('should get available metrics', async () => {\n      mockApiClient.get.mockResolvedValueOnce(mockMetrics);\n\n      const result = await DataSourceService.getAvailableMetrics('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1/metrics');\n      expect(result).toEqual(mockMetrics);\n    });\n\n    it('should get available dimensions', async () => {\n      mockApiClient.get.mockResolvedValueOnce(mockDimensions);\n\n      const result = await DataSourceService.getAvailableDimensions('ds-1');\n\n      expect(mockApiClient.get).toHaveBeenCalledWith('/data-sources/ds-1/dimensions');\n      expect(result).toEqual(mockDimensions);\n    });\n  });\n});"],"names":["jest","mock","apiClient","get","fn","post","put","delete","createQueryFunction","describe","mockApiClient","beforeEach","clearAllMocks","mockDataSources","id","name","type","status","workspaceId","createdAt","Date","updatedAt","config","host","port","database","baseUrl","authType","it","mockResolvedValueOnce","result","DataSourceService","getDataSources","expect","toHaveBeenCalledWith","toEqual","toHaveLength","toBe","mockRejectedValueOnce","Error","rejects","toThrow","mockDataSource","getDataSource","createRequest","username","mockCreatedDataSource","success","data","createDataSource","message","requestWithoutWorkspace","toBeUndefined","updateRequest","mockUpdatedDataSource","updateDataSource","nameOnlyUpdate","deleteDataSource","resolves","not","connected","testConnection","error","mockQuery","dataSourceId","query","parameters","mockResponse","rows","email","metadata","columns","rowCount","executionTime","AnalyticsService","queryWithParams","userId","startDate","mockMetrics","mockDimensions","getAvailableMetrics","getAvailableDimensions"],"mappings":"AAAA;;;CAGC;AAOD,sBAAsB;AACtBA,KAAKC,IAAI,CAAC,YAAY,IAAO,CAAA;QAC3BC,WAAW;YACTC,KAAKH,KAAKI,EAAE;YACZC,MAAML,KAAKI,EAAE;YACbE,KAAKN,KAAKI,EAAE;YACZG,QAAQP,KAAKI,EAAE;QACjB;QACAI,qBAAqB,CAACJ,KAAiBA;IACzC,CAAA;;;;6BAZoD;uBAC1B;AAa1BK,SAAS,qBAAqB;IAC5B,MAAMC,gBAAgBR,gBAAS;IAE/BS,WAAW;QACTX,KAAKY,aAAa;IACpB;IAEAH,SAAS,kBAAkB;QACzB,MAAMI,kBAAgC;YACpC;gBACEC,IAAI;gBACJC,MAAM;gBACNC,MAAM;gBACNC,QAAQ;gBACRC,aAAa;gBACbC,WAAW,IAAIC,KAAK;gBACpBC,WAAW,IAAID,KAAK;gBACpBE,QAAQ;oBACNC,MAAM;oBACNC,MAAM;oBACNC,UAAU;gBACZ;YACF;YACA;gBACEX,IAAI;gBACJC,MAAM;gBACNC,MAAM;gBACNC,QAAQ;gBACRC,aAAa;gBACbC,WAAW,IAAIC,KAAK;gBACpBC,WAAW,IAAID,KAAK;gBACpBE,QAAQ;oBACNI,SAAS;oBACTC,UAAU;gBACZ;YACF;SACD;QAEDC,GAAG,wDAAwD;YACzDlB,cAAcP,GAAG,CAAC0B,qBAAqB,CAAChB;YAExC,MAAMiB,SAAS,MAAMC,8BAAiB,CAACC,cAAc;YAErDC,OAAOvB,cAAcP,GAAG,EAAE+B,oBAAoB,CAAC;YAC/CD,OAAOH,QAAQK,OAAO,CAACtB;QACzB;QAEAe,GAAG,iDAAiD;YAClDlB,cAAcP,GAAG,CAAC0B,qBAAqB,CAAC;gBAAChB,eAAe,CAAC,EAAE;aAAC;YAE5D,MAAMiB,SAAS,MAAMC,8BAAiB,CAACC,cAAc,CAAC;YAEtDC,OAAOvB,cAAcP,GAAG,EAAE+B,oBAAoB,CAAC;YAC/CD,OAAOH,QAAQM,YAAY,CAAC;YAC5BH,OAAOH,MAAM,CAAC,EAAE,CAACZ,WAAW,EAAEmB,IAAI,CAAC;QACrC;QAEAT,GAAG,oCAAoC;YACrClB,cAAcP,GAAG,CAAC0B,qBAAqB,CAAC,EAAE;YAE1C,MAAMC,SAAS,MAAMC,8BAAiB,CAACC,cAAc;YAErDC,OAAOH,QAAQK,OAAO,CAAC,EAAE;QAC3B;QAEAP,GAAG,4BAA4B;YAC7BlB,cAAcP,GAAG,CAACmC,qBAAqB,CAAC,IAAIC,MAAM;YAElD,MAAMN,OAAOF,8BAAiB,CAACC,cAAc,IAAIQ,OAAO,CAACC,OAAO,CAAC;QACnE;IACF;IAEAhC,SAAS,iBAAiB;QACxB,MAAMiC,iBAA6B;YACjC5B,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,aAAa;YACbC,WAAW,IAAIC,KAAK;YACpBC,WAAW,IAAID,KAAK;YACpBE,QAAQ;gBACNC,MAAM;gBACNC,MAAM;gBACNC,UAAU;YACZ;QACF;QAEAG,GAAG,uCAAuC;YACxClB,cAAcP,GAAG,CAAC0B,qBAAqB,CAACa;YAExC,MAAMZ,SAAS,MAAMC,8BAAiB,CAACY,aAAa,CAAC;YAErDV,OAAOvB,cAAcP,GAAG,EAAE+B,oBAAoB,CAAC;YAC/CD,OAAOH,QAAQK,OAAO,CAACO;QACzB;QAEAd,GAAG,iCAAiC;YAClClB,cAAcP,GAAG,CAACmC,qBAAqB,CAAC,IAAIC,MAAM;YAElD,MAAMN,OAAOF,8BAAiB,CAACY,aAAa,CAAC,iBAAiBH,OAAO,CAACC,OAAO,CAAC;QAChF;IACF;IAEAhC,SAAS,oBAAoB;QAC3B,MAAMmC,gBAAgB;YACpB7B,MAAM;YACNC,MAAM;YACNM,QAAQ;gBACNC,MAAM;gBACNC,MAAM;gBACNC,UAAU;gBACVoB,UAAU;YACZ;YACA3B,aAAa;QACf;QAEA,MAAM4B,wBAAoC;YACxChC,IAAI;YACJ,GAAG8B,aAAa;YAChB3B,QAAQ;YACRE,WAAW,IAAIC;YACfC,WAAW,IAAID;QACjB;QAEAQ,GAAG,iCAAiC;YAClClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTC,MAAMF;YACR;YAEA,MAAMhB,SAAS,MAAMC,8BAAiB,CAACkB,gBAAgB,CAACL;YAExDX,OAAOvB,cAAcL,IAAI,EAAE6B,oBAAoB,CAAC,iBAAiBU;YACjEX,OAAOH,QAAQK,OAAO,CAACW;QACzB;QAEAlB,GAAG,kCAAkC;YACnClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTG,SAAS;YACX;YAEA,MAAMjB,OAAOF,8BAAiB,CAACkB,gBAAgB,CAACL,gBAC7CJ,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAb,GAAG,wCAAwC;YACzClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;YACX;YAEA,MAAMd,OAAOF,8BAAiB,CAACkB,gBAAgB,CAACL,gBAC7CJ,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAb,GAAG,+CAA+C;YAChD,MAAMuB,0BAA0B;gBAC9BpC,MAAM;gBACNC,MAAM;gBACNM,QAAQ;oBACNI,SAAS;gBACX;YACF;YAEAhB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTC,MAAM;oBACJlC,IAAI;oBACJ,GAAGqC,uBAAuB;oBAC1BlC,QAAQ;oBACRE,WAAW,IAAIC;oBACfC,WAAW,IAAID;gBACjB;YACF;YAEA,MAAMU,SAAS,MAAMC,8BAAiB,CAACkB,gBAAgB,CAACE;YAExDlB,OAAOH,OAAOZ,WAAW,EAAEkC,aAAa;QAC1C;IACF;IAEA3C,SAAS,oBAAoB;QAC3B,MAAM4C,gBAAgB;YACpBtC,MAAM;YACNO,QAAQ;gBACNC,MAAM;YACR;QACF;QAEA,MAAM+B,wBAAoC;YACxCxC,IAAI;YACJC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,aAAa;YACbC,WAAW,IAAIC,KAAK;YACpBC,WAAW,IAAID;YACfE,QAAQ;gBACNC,MAAM;gBACNC,MAAM;gBACNC,UAAU;YACZ;QACF;QAEAG,GAAG,6BAA6B;YAC9BlB,cAAcJ,GAAG,CAACuB,qBAAqB,CAAC;gBACtCkB,SAAS;gBACTC,MAAMM;YACR;YAEA,MAAMxB,SAAS,MAAMC,8BAAiB,CAACwB,gBAAgB,CAAC,QAAQF;YAEhEpB,OAAOvB,cAAcJ,GAAG,EAAE4B,oBAAoB,CAAC,sBAAsBmB;YACrEpB,OAAOH,QAAQK,OAAO,CAACmB;QACzB;QAEA1B,GAAG,2BAA2B;YAC5B,MAAM4B,iBAAiB;gBAAEzC,MAAM;YAAmB;YAElDL,cAAcJ,GAAG,CAACuB,qBAAqB,CAAC;gBACtCkB,SAAS;gBACTC,MAAM;oBAAE,GAAGM,qBAAqB;oBAAEvC,MAAM;gBAAmB;YAC7D;YAEA,MAAMe,SAAS,MAAMC,8BAAiB,CAACwB,gBAAgB,CAAC,QAAQC;YAEhEvB,OAAOvB,cAAcJ,GAAG,EAAE4B,oBAAoB,CAAC,sBAAsBsB;YACrEvB,OAAOH,OAAOf,IAAI,EAAEsB,IAAI,CAAC;QAC3B;QAEAT,GAAG,gCAAgC;YACjClB,cAAcJ,GAAG,CAACuB,qBAAqB,CAAC;gBACtCkB,SAAS;gBACTG,SAAS;YACX;YAEA,MAAMjB,OAAOF,8BAAiB,CAACwB,gBAAgB,CAAC,QAAQF,gBACrDb,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEAhC,SAAS,oBAAoB;QAC3BmB,GAAG,6BAA6B;YAC9BlB,cAAcH,MAAM,CAACsB,qBAAqB,CAAC;gBAAEkB,SAAS;YAAK;YAE3D,MAAMd,OAAOF,8BAAiB,CAAC0B,gBAAgB,CAAC,SAASC,QAAQ,CAACC,GAAG,CAAClB,OAAO;YAE7ER,OAAOvB,cAAcH,MAAM,EAAE2B,oBAAoB,CAAC;QACpD;QAEAN,GAAG,8BAA8B;YAC/BlB,cAAcH,MAAM,CAAC+B,qBAAqB,CAAC,IAAIC,MAAM;YAErD,MAAMN,OAAOF,8BAAiB,CAAC0B,gBAAgB,CAAC,SAC7CjB,OAAO,CAACC,OAAO,CAAC;QACrB;IACF;IAEAhC,SAAS,kBAAkB;QACzBmB,GAAG,qCAAqC;YACtClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTC,MAAM;oBACJY,WAAW;gBACb;YACF;YAEA,MAAM9B,SAAS,MAAMC,8BAAiB,CAAC8B,cAAc,CAAC;YAEtD5B,OAAOvB,cAAcL,IAAI,EAAE6B,oBAAoB,CAAC;YAChDD,OAAOH,QAAQK,OAAO,CAAC;gBACrByB,WAAW;YACb;QACF;QAEAhC,GAAG,iCAAiC;YAClClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTC,MAAM;oBACJY,WAAW;oBACXE,OAAO;gBACT;YACF;YAEA,MAAMhC,SAAS,MAAMC,8BAAiB,CAAC8B,cAAc,CAAC;YAEtD5B,OAAOH,QAAQK,OAAO,CAAC;gBACrByB,WAAW;gBACXE,OAAO;YACT;QACF;QAEAlC,GAAG,gCAAgC;YACjClB,cAAcL,IAAI,CAACiC,qBAAqB,CAAC,IAAIC,MAAM;YAEnD,MAAMN,OAAOF,8BAAiB,CAAC8B,cAAc,CAAC,SAASrB,OAAO,CAACC,OAAO,CAAC;QACzE;IACF;IAEAhC,SAAS,0BAA0B;QACjC,MAAMsD,YAA4B;YAChCC,cAAc;YACdC,OAAO;YACPC,YAAY,CAAC;QACf;QAEA,MAAMC,eAAe;YACnBpB,SAAS;YACTC,MAAM;gBACJoB,MAAM;oBACJ;wBAAEtD,IAAI;wBAAGC,MAAM;wBAAUsD,OAAO;oBAAoB;oBACpD;wBAAEvD,IAAI;wBAAGC,MAAM;wBAAUsD,OAAO;oBAAoB;iBACrD;gBACDC,UAAU;oBACRC,SAAS;wBAAC;wBAAM;wBAAQ;qBAAQ;oBAChCC,UAAU;oBACVC,eAAe;gBACjB;YACF;QACF;QAEA7C,GAAG,qCAAqC;YACtClB,cAAcL,IAAI,CAACwB,qBAAqB,CAACsC;YAEzC,MAAMrC,SAAS,MAAM4C,6BAAgB,CAACT,KAAK,CAACF;YAE5C9B,OAAOvB,cAAcL,IAAI,EAAE6B,oBAAoB,CAAC,oBAAoB6B;YACpE9B,OAAOH,QAAQK,OAAO,CAACgC,aAAanB,IAAI;QAC1C;QAEApB,GAAG,wCAAwC;YACzC,MAAM+C,kBAAkB;gBACtB,GAAGZ,SAAS;gBACZG,YAAY;oBACVU,QAAQ;oBACRC,WAAW;gBACb;YACF;YAEAnE,cAAcL,IAAI,CAACwB,qBAAqB,CAACsC;YAEzC,MAAMO,6BAAgB,CAACT,KAAK,CAACU;YAE7B1C,OAAOvB,cAAcL,IAAI,EAAE6B,oBAAoB,CAAC,oBAAoByC;QACtE;QAEA/C,GAAG,uCAAuC;YACxClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTG,SAAS;YACX;YAEA,MAAMjB,OAAOyC,6BAAgB,CAACT,KAAK,CAACF,YACjCvB,OAAO,CAACC,OAAO,CAAC;QACrB;QAEAb,GAAG,qCAAqC;YACtClB,cAAcL,IAAI,CAACwB,qBAAqB,CAAC;gBACvCkB,SAAS;gBACTC,MAAM;oBACJoB,MAAM,EAAE;oBACRE,UAAU;wBACRC,SAAS,EAAE;wBACXC,UAAU;wBACVC,eAAe;oBACjB;gBACF;YACF;YAEA,MAAM3C,SAAS,MAAM4C,6BAAgB,CAACT,KAAK,CAACF;YAE5C9B,OAAOH,OAAOsC,IAAI,EAAEhC,YAAY,CAAC;YACjCH,OAAOH,OAAOwC,QAAQ,CAACE,QAAQ,EAAEnC,IAAI,CAAC;QACxC;IACF;IAEA5B,SAAS,kDAAkD;QACzD,MAAMqE,cAAc;YAAC;YAAW;YAAS;YAAY;SAAY;QACjE,MAAMC,iBAAiB;YAAC;YAAW;YAAU;YAAW;SAAO;QAE/DnD,GAAG,gCAAgC;YACjClB,cAAcP,GAAG,CAAC0B,qBAAqB,CAACiD;YAExC,MAAMhD,SAAS,MAAMC,8BAAiB,CAACiD,mBAAmB,CAAC;YAE3D/C,OAAOvB,cAAcP,GAAG,EAAE+B,oBAAoB,CAAC;YAC/CD,OAAOH,QAAQK,OAAO,CAAC2C;QACzB;QAEAlD,GAAG,mCAAmC;YACpClB,cAAcP,GAAG,CAAC0B,qBAAqB,CAACkD;YAExC,MAAMjD,SAAS,MAAMC,8BAAiB,CAACkD,sBAAsB,CAAC;YAE9DhD,OAAOvB,cAAcP,GAAG,EAAE+B,oBAAoB,CAAC;YAC/CD,OAAOH,QAAQK,OAAO,CAAC4C;QACzB;IACF;AACF"}