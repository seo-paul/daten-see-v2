0e9e2ec274848ce9396c60ffe938b7e2
/**
 * API Integration Tests
 * Validate that our new API types work correctly
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _types = require("../../../types");
const _dashboard = require("../dashboard");
const _index = require("../index");
// Mock fetch for testing
const mockFetch = jest.fn();
global.fetch = mockFetch;
(0, _globals.describe)('API Type Integration', ()=>{
    (0, _globals.beforeEach)(()=>{
        mockFetch.mockClear();
    });
    (0, _globals.describe)('ApiClient Type Safety', ()=>{
        (0, _globals.it)('should handle typed responses correctly', async ()=>{
            const client = new _index.ApiClient();
            const mockDashboard = {
                id: 'test-123',
                name: 'Test Dashboard',
                description: 'Test description',
                widgets: [],
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
                isPublic: false,
                owner: 'user-123',
                organizationId: 'org-123',
                workspaceId: 'workspace-123'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true,
                        data: mockDashboard
                    })
            });
            const result = await client.get('/dashboards/test-123');
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.data).toEqual(mockDashboard);
            (0, _globals.expect)(result.data.id).toBe('test-123');
        });
        (0, _globals.it)('should handle API errors with proper typing', async ()=>{
            const client = new _index.ApiClient();
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 404,
                statusText: 'Not Found',
                json: async ()=>({
                        success: false,
                        message: 'Dashboard not found',
                        errors: [
                            {
                                code: 'NOT_FOUND',
                                message: 'Dashboard not found'
                            }
                        ]
                    })
            });
            await (0, _globals.expect)(client.get('/dashboards/invalid')).rejects.toThrow(_index.ApiClientError);
        });
    });
    (0, _globals.describe)('Dashboard Service Types', ()=>{
        (0, _globals.it)('should create dashboard with proper types', async ()=>{
            const createRequest = {
                name: 'New Dashboard',
                description: 'Test dashboard',
                isPublic: false,
                organizationId: 'org-123',
                workspaceId: 'workspace-123'
            };
            const mockResponse = {
                id: 'new-dashboard',
                name: createRequest.name,
                ...createRequest.description && {
                    description: createRequest.description
                },
                isPublic: createRequest.isPublic || false,
                widgets: [],
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
                owner: 'user-123',
                organizationId: createRequest.organizationId || 'org-123',
                workspaceId: createRequest.workspaceId || 'workspace-123'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true,
                        data: mockResponse
                    })
            });
            const result = await _dashboard.DashboardService.createDashboard(createRequest);
            (0, _globals.expect)(result.id).toBe('new-dashboard');
            (0, _globals.expect)(result.name).toBe(createRequest.name);
        });
        (0, _globals.it)('should validate widget types', ()=>{
            // Test widget type validation at compile time
            const validWidget = {
                id: 'widget-1',
                type: 'chart',
                title: 'Test Chart',
                config: {
                    chartType: 'line',
                    metrics: [
                        'sessions',
                        'pageviews'
                    ],
                    timeRange: {
                        start: '2024-01-01',
                        end: '2024-01-31',
                        preset: 'last30days'
                    }
                },
                position: {
                    x: 0,
                    y: 0,
                    w: 6,
                    h: 4
                },
                dataSource: 'google-analytics-1'
            };
            // This should compile without errors
            (0, _globals.expect)(validWidget.type).toBe('chart');
            (0, _globals.expect)(validWidget.config.chartType).toBe('line');
        });
    });
    (0, _globals.describe)('Data Source Service Types', ()=>{
        (0, _globals.it)('should handle multi-source types correctly', async ()=>{
            const googleAnalyticsSource = {
                id: 'ga-source-1',
                name: 'Google Analytics',
                type: 'google_analytics',
                config: {
                    accountId: 'acc-123',
                    propertyId: 'prop-456',
                    viewId: 'view-789'
                },
                status: 'connected',
                lastSync: '2024-01-01T00:00:00Z',
                organizationId: 'org-123',
                workspaceId: 'workspace-123'
            };
            const metaAdsSource = {
                id: 'meta-source-1',
                name: 'Meta Ads',
                type: 'meta_ads',
                config: {
                    appId: 'app-123',
                    appSecret: 'secret-456',
                    accessToken: 'token-789'
                },
                status: 'connected',
                organizationId: 'org-123',
                workspaceId: 'workspace-123'
            };
            // Both should be valid DataSource types
            (0, _globals.expect)(googleAnalyticsSource.type).toBe('google_analytics');
            (0, _globals.expect)(metaAdsSource.type).toBe('meta_ads');
        });
        (0, _globals.it)('should validate analytics query structure', ()=>{
            const query = {
                dataSource: 'ga-source-1',
                metrics: [
                    'sessions',
                    'pageviews',
                    'bounceRate'
                ],
                dimensions: [
                    'date',
                    'country',
                    'deviceCategory'
                ],
                filters: [
                    {
                        field: 'country',
                        operator: 'equals',
                        value: 'United States'
                    },
                    {
                        field: 'sessions',
                        operator: 'greater_than',
                        value: 100
                    }
                ],
                timeRange: {
                    start: '2024-01-01',
                    end: '2024-01-31',
                    preset: 'last30days'
                },
                limit: 1000,
                offset: 0
            };
            (0, _globals.expect)(query.metrics).toContain('sessions');
            (0, _globals.expect)(query.filters?.[0]?.operator).toBe('equals');
        });
    });
    (0, _globals.describe)('Query Keys Type Safety', ()=>{
        (0, _globals.it)('should provide consistent query keys', ()=>{
            // Test query key generation
            const dashboardKeys = _types.apiQueryKeys.dashboards;
            const specificDashboard = _types.apiQueryKeys.dashboard('test-123');
            const dashboardWidgets = _types.apiQueryKeys.dashboardWidgets('test-123');
            (0, _globals.expect)(dashboardKeys).toEqual([
                'dashboards'
            ]);
            (0, _globals.expect)(specificDashboard).toEqual([
                'dashboards',
                'test-123'
            ]);
            (0, _globals.expect)(dashboardWidgets).toEqual([
                'dashboards',
                'test-123',
                'widgets'
            ]);
        });
        (0, _globals.it)('should generate data source query keys', ()=>{
            const dataSourceKeys = _types.apiQueryKeys.dataSources;
            const specificDataSource = _types.apiQueryKeys.dataSource('ds-123');
            const dataSourceData = _types.apiQueryKeys.dataSourceData('ds-123', 'query-hash');
            (0, _globals.expect)(dataSourceKeys).toEqual([
                'dataSources'
            ]);
            (0, _globals.expect)(specificDataSource).toEqual([
                'dataSources',
                'ds-123'
            ]);
            (0, _globals.expect)(dataSourceData).toEqual([
                'dataSources',
                'ds-123',
                'data',
                'query-hash'
            ]);
        });
    });
    (0, _globals.describe)('Type Guards', ()=>{
        (0, _globals.it)('should validate dashboard objects', ()=>{
            const validDashboard = {
                id: 'test-123',
                name: 'Test Dashboard',
                widgets: []
            };
            const invalidObject = {
                name: 'Not a dashboard',
                content: 'Missing required fields'
            };
            // Import type guards from our types
            const { isDashboard } = require('@/types');
            (0, _globals.expect)(isDashboard(validDashboard)).toBe(true);
            (0, _globals.expect)(isDashboard(invalidObject)).toBe(false);
            (0, _globals.expect)(isDashboard(null)).toBe(false);
            (0, _globals.expect)(isDashboard(undefined)).toBe(false);
        });
    });
    (0, _globals.describe)('Error Handling Types', ()=>{
        (0, _globals.it)('should handle structured API errors', ()=>{
            const apiError = new _index.ApiClientError('Test error', [
                {
                    code: 'VALIDATION_ERROR',
                    message: 'Name is required',
                    field: 'name'
                },
                {
                    code: 'PERMISSION_DENIED',
                    message: 'Insufficient permissions'
                }
            ]);
            (0, _globals.expect)(apiError.errors).toHaveLength(2);
            (0, _globals.expect)(apiError.errors[0]?.code).toBe('VALIDATION_ERROR');
            (0, _globals.expect)(apiError.errors[0]?.field).toBe('name');
        });
    });
    (0, _globals.describe)('Integration with existing hooks', ()=>{
        (0, _globals.it)('should be compatible with useDashboards hook types', ()=>{
            // This test validates that our new types integrate with existing code
            // We're testing type compatibility, not runtime behavior
            const mockDashboardResponse = [
                {
                    id: 'dash-1',
                    name: 'Dashboard 1',
                    description: 'Test dashboard',
                    widgets: [],
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                    isPublic: false,
                    owner: 'user-123',
                    organizationId: 'org-123',
                    workspaceId: 'workspace-123'
                }
            ];
            // This should compile without type errors
            (0, _globals.expect)(mockDashboardResponse[0]?.id).toBe('dash-1');
            (0, _globals.expect)(mockDashboardResponse[0]?.widgets).toEqual([]);
        });
    });
});
// Additional compile-time type checking
(0, _globals.describe)('Compile-time Type Validation', ()=>{
    (0, _globals.it)('should enforce exact optional properties', ()=>{
        // This test ensures our exactOptionalPropertyTypes works
        const createRequest = {
            name: 'Test Dashboard',
            // description intentionally omitted - should be fine
            // isPublic intentionally omitted - should be fine  
            organizationId: 'org-123'
        };
        (0, _globals.expect)(createRequest.name).toBe('Test Dashboard');
        (0, _globals.expect)(createRequest.description).toBeUndefined();
    });
    (0, _globals.it)('should enforce widget configuration types', ()=>{
        // Test that widget configurations are properly typed
        const chartConfig = {
            chartType: 'line',
            metrics: [
                'sessions'
            ],
            dimensions: [
                'date'
            ],
            timeRange: {
                start: '2024-01-01',
                end: '2024-01-31',
                preset: 'last30days'
            }
        };
        const kpiConfig = {
            metric: 'sessions',
            target: 10000,
            comparison: 'previous_period'
        };
        // Both configs should be valid
        (0, _globals.expect)(chartConfig.chartType).toBe('line');
        (0, _globals.expect)(kpiConfig.comparison).toBe('previous_period');
    });
});

//# sourceMappingURL=data:application/json;base64,