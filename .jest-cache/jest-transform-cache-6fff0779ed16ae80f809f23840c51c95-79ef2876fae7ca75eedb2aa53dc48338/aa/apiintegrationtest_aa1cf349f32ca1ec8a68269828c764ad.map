{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/api/__tests__/api-integration.test.ts"],"sourcesContent":["/**\n * API Integration Tests\n * Validate that our new API types work correctly\n */\n\nimport { describe, it, expect, beforeEach } from '@jest/globals';\n\nimport type { \n  Dashboard, \n  CreateDashboardRequest, \n  DataSource,\n  AnalyticsQuery,\n} from '@/types';\nimport { apiQueryKeys } from '@/types';\n\nimport { DashboardService } from '../dashboard';\nimport { ApiClient, ApiClientError } from '../index';\n\n// Mock fetch for testing\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('API Type Integration', () => {\n  beforeEach(() => {\n    mockFetch.mockClear();\n  });\n\n  describe('ApiClient Type Safety', () => {\n    it('should handle typed responses correctly', async () => {\n      const client = new ApiClient();\n      const mockDashboard: Dashboard = {\n        id: 'test-123',\n        name: 'Test Dashboard',\n        description: 'Test description',\n        widgets: [],\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n        isPublic: false,\n        owner: 'user-123',\n        organizationId: 'org-123',\n        workspaceId: 'workspace-123',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          success: true,\n          data: mockDashboard,\n        }),\n      });\n\n      const result = await client.get<Dashboard>('/dashboards/test-123');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockDashboard);\n      expect(result.data.id).toBe('test-123');\n    });\n\n    it('should handle API errors with proper typing', async () => {\n      const client = new ApiClient();\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        statusText: 'Not Found',\n        json: async () => ({\n          success: false,\n          message: 'Dashboard not found',\n          errors: [{ code: 'NOT_FOUND', message: 'Dashboard not found' }],\n        }),\n      });\n\n      await expect(client.get<Dashboard>('/dashboards/invalid')).rejects.toThrow(ApiClientError);\n    });\n  });\n\n  describe('Dashboard Service Types', () => {\n    it('should create dashboard with proper types', async () => {\n      const createRequest: CreateDashboardRequest = {\n        name: 'New Dashboard',\n        description: 'Test dashboard',\n        isPublic: false,\n        organizationId: 'org-123',\n        workspaceId: 'workspace-123',\n      };\n\n      const mockResponse: Dashboard = {\n        id: 'new-dashboard',\n        name: createRequest.name,\n        ...(createRequest.description && { description: createRequest.description }),\n        isPublic: createRequest.isPublic || false,\n        widgets: [],\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n        owner: 'user-123',\n        organizationId: createRequest.organizationId || 'org-123',\n        workspaceId: createRequest.workspaceId || 'workspace-123',\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          success: true,\n          data: mockResponse,\n        }),\n      });\n\n      const result = await DashboardService.createDashboard(createRequest);\n      \n      expect(result.id).toBe('new-dashboard');\n      expect(result.name).toBe(createRequest.name);\n    });\n\n    it('should validate widget types', () => {\n      // Test widget type validation at compile time\n      const validWidget = {\n        id: 'widget-1',\n        type: 'chart' as const,\n        title: 'Test Chart',\n        config: {\n          chartType: 'line' as const,\n          metrics: ['sessions', 'pageviews'],\n          timeRange: {\n            start: '2024-01-01',\n            end: '2024-01-31',\n            preset: 'last30days' as const,\n          },\n        },\n        position: { x: 0, y: 0, w: 6, h: 4 },\n        dataSource: 'google-analytics-1',\n      };\n\n      // This should compile without errors\n      expect(validWidget.type).toBe('chart');\n      expect(validWidget.config.chartType).toBe('line');\n    });\n  });\n\n  describe('Data Source Service Types', () => {\n    it('should handle multi-source types correctly', async () => {\n      const googleAnalyticsSource: DataSource = {\n        id: 'ga-source-1',\n        name: 'Google Analytics',\n        type: 'google_analytics',\n        config: {\n          accountId: 'acc-123',\n          propertyId: 'prop-456',\n          viewId: 'view-789',\n        },\n        status: 'connected',\n        lastSync: '2024-01-01T00:00:00Z',\n        organizationId: 'org-123',\n        workspaceId: 'workspace-123',\n      };\n\n      const metaAdsSource: DataSource = {\n        id: 'meta-source-1', \n        name: 'Meta Ads',\n        type: 'meta_ads',\n        config: {\n          appId: 'app-123',\n          appSecret: 'secret-456',\n          accessToken: 'token-789',\n        },\n        status: 'connected',\n        organizationId: 'org-123',\n        workspaceId: 'workspace-123',\n      };\n\n      // Both should be valid DataSource types\n      expect(googleAnalyticsSource.type).toBe('google_analytics');\n      expect(metaAdsSource.type).toBe('meta_ads');\n    });\n\n    it('should validate analytics query structure', () => {\n      const query: AnalyticsQuery = {\n        dataSource: 'ga-source-1',\n        metrics: ['sessions', 'pageviews', 'bounceRate'],\n        dimensions: ['date', 'country', 'deviceCategory'],\n        filters: [\n          {\n            field: 'country',\n            operator: 'equals',\n            value: 'United States',\n          },\n          {\n            field: 'sessions',\n            operator: 'greater_than',\n            value: 100,\n          },\n        ],\n        timeRange: {\n          start: '2024-01-01',\n          end: '2024-01-31',\n          preset: 'last30days',\n        },\n        limit: 1000,\n        offset: 0,\n      };\n\n      expect(query.metrics).toContain('sessions');\n      expect(query.filters?.[0]?.operator).toBe('equals');\n    });\n  });\n\n  describe('Query Keys Type Safety', () => {\n    it('should provide consistent query keys', () => {\n      // Test query key generation\n      const dashboardKeys = apiQueryKeys.dashboards;\n      const specificDashboard = apiQueryKeys.dashboard('test-123');\n      const dashboardWidgets = apiQueryKeys.dashboardWidgets('test-123');\n      \n      expect(dashboardKeys).toEqual(['dashboards']);\n      expect(specificDashboard).toEqual(['dashboards', 'test-123']);\n      expect(dashboardWidgets).toEqual(['dashboards', 'test-123', 'widgets']);\n    });\n\n    it('should generate data source query keys', () => {\n      const dataSourceKeys = apiQueryKeys.dataSources;\n      const specificDataSource = apiQueryKeys.dataSource('ds-123');\n      const dataSourceData = apiQueryKeys.dataSourceData('ds-123', 'query-hash');\n      \n      expect(dataSourceKeys).toEqual(['dataSources']);\n      expect(specificDataSource).toEqual(['dataSources', 'ds-123']);\n      expect(dataSourceData).toEqual(['dataSources', 'ds-123', 'data', 'query-hash']);\n    });\n  });\n\n  describe('Type Guards', () => {\n    it('should validate dashboard objects', () => {\n      const validDashboard = {\n        id: 'test-123',\n        name: 'Test Dashboard',\n        widgets: [],\n      };\n\n      const invalidObject = {\n        name: 'Not a dashboard',\n        content: 'Missing required fields',\n      };\n\n      // Import type guards from our types\n      const { isDashboard } = require('@/types');\n      \n      expect(isDashboard(validDashboard)).toBe(true);\n      expect(isDashboard(invalidObject)).toBe(false);\n      expect(isDashboard(null)).toBe(false);\n      expect(isDashboard(undefined)).toBe(false);\n    });\n  });\n\n  describe('Error Handling Types', () => {\n    it('should handle structured API errors', () => {\n      const apiError = new ApiClientError('Test error', [\n        { code: 'VALIDATION_ERROR', message: 'Name is required', field: 'name' },\n        { code: 'PERMISSION_DENIED', message: 'Insufficient permissions' },\n      ]);\n\n      expect(apiError.errors).toHaveLength(2);\n      expect(apiError.errors[0]?.code).toBe('VALIDATION_ERROR');\n      expect(apiError.errors[0]?.field).toBe('name');\n    });\n  });\n\n  describe('Integration with existing hooks', () => {\n    it('should be compatible with useDashboards hook types', () => {\n      // This test validates that our new types integrate with existing code\n      // We're testing type compatibility, not runtime behavior\n      \n      const mockDashboardResponse: Dashboard[] = [\n        {\n          id: 'dash-1',\n          name: 'Dashboard 1',\n          description: 'Test dashboard',\n          widgets: [],\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n          isPublic: false,\n          owner: 'user-123',\n          organizationId: 'org-123',\n          workspaceId: 'workspace-123',\n        },\n      ];\n\n      // This should compile without type errors\n      expect(mockDashboardResponse[0]?.id).toBe('dash-1');\n      expect(mockDashboardResponse[0]?.widgets).toEqual([]);\n    });\n  });\n});\n\n// Additional compile-time type checking\ndescribe('Compile-time Type Validation', () => {\n  it('should enforce exact optional properties', () => {\n    // This test ensures our exactOptionalPropertyTypes works\n    const createRequest: CreateDashboardRequest = {\n      name: 'Test Dashboard',\n      // description intentionally omitted - should be fine\n      // isPublic intentionally omitted - should be fine  \n      organizationId: 'org-123',\n    };\n\n    expect(createRequest.name).toBe('Test Dashboard');\n    expect(createRequest.description).toBeUndefined();\n  });\n\n  it('should enforce widget configuration types', () => {\n    // Test that widget configurations are properly typed\n    const chartConfig = {\n      chartType: 'line' as const,\n      metrics: ['sessions'],\n      dimensions: ['date'],\n      timeRange: {\n        start: '2024-01-01',\n        end: '2024-01-31',\n        preset: 'last30days' as const,\n      },\n    };\n\n    const kpiConfig = {\n      metric: 'sessions',\n      target: 10000,\n      comparison: 'previous_period' as const,\n    };\n\n    // Both configs should be valid\n    expect(chartConfig.chartType).toBe('line');\n    expect(kpiConfig.comparison).toBe('previous_period');\n  });\n});"],"names":["mockFetch","jest","fn","global","fetch","describe","beforeEach","mockClear","it","client","ApiClient","mockDashboard","id","name","description","widgets","createdAt","updatedAt","isPublic","owner","organizationId","workspaceId","mockResolvedValueOnce","ok","json","success","data","result","get","expect","toBe","toEqual","status","statusText","message","errors","code","rejects","toThrow","ApiClientError","createRequest","mockResponse","DashboardService","createDashboard","validWidget","type","title","config","chartType","metrics","timeRange","start","end","preset","position","x","y","w","h","dataSource","googleAnalyticsSource","accountId","propertyId","viewId","lastSync","metaAdsSource","appId","appSecret","accessToken","query","dimensions","filters","field","operator","value","limit","offset","toContain","dashboardKeys","apiQueryKeys","dashboards","specificDashboard","dashboard","dashboardWidgets","dataSourceKeys","dataSources","specificDataSource","dataSourceData","validDashboard","invalidObject","content","isDashboard","require","undefined","apiError","toHaveLength","mockDashboardResponse","toBeUndefined","chartConfig","kpiConfig","metric","target","comparison"],"mappings":"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"}