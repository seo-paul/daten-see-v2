{"version":3,"names":["cov_2lzn4cbfwr","actualCoverage","s","AuthContext","f","AuthProvider","useAuth","_react","createContext","undefined","children","tokenManager","injectedTokenManager","activeTokenManager","b","_token","process","env","NODE_ENV","_loggerconfig","appLogger","warn","isCustomTokenManager","hasInjectedTokenManager","Error","requiredMethods","missingMethods","filter","method","length","join","mockIndicators","constructor","name","getTokenInfo","toString","includes","some","Boolean","error","constructorName","hasMockSignature","hasJestSignature","isProduction","debug","isInjected","methodCount","environment","authState","setAuthState","useState","user","isAuthenticated","isLoading","useEffect","initializeAuth","tokenInfo","isValid","token","userInfo","getCurrentUserInfo","userId","email","id","split","role","updateApiClientToken","info","message","clearTokens","refreshToken","useCallback","refreshTokenValue","getRefreshToken","Promise","resolve","setTimeout","mockTokenData","expiresAt","Date","now","toISOString","setTokens","checkTokenRefresh","needsRefresh","catch","interval","setInterval","clearInterval","login","prev","mockUser","errorMessage","logout","clearError","updateUser","updates","updatedUser","getAccessToken","contextValue","_jsxruntime","jsx","Provider","value","context","useContext"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useEffect, useState, useCallback, ReactNode } from 'react';\n\nimport { tokenManager, type TokenManager } from '@/lib/auth/token';\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\n// User interface\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'user' | 'admin';\n  avatar?: string;\n}\n\n// Auth state interface\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Auth context interface\nexport interface AuthContextType extends AuthState {\n  // Auth actions\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<boolean>;\n  clearError: () => void;\n  \n  // User actions\n  updateUser: (updates: Partial<Pick<User, 'name' | 'avatar'>>) => void;\n  \n  // Token utilities\n  getAccessToken: () => string | null;\n  needsRefresh: () => boolean;\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Props interface with optional dependency injection\ninterface AuthProviderProps {\n  children: ReactNode;\n  tokenManager?: TokenManager; // Optional for testing and flexibility\n}\n\n/**\n * Authentication Context Provider\n * Manages user authentication state without Zustand\n * Uses React Context + TanStack Query for server state\n */\nexport function AuthProvider({ children, tokenManager: injectedTokenManager }: AuthProviderProps): React.ReactElement {\n  // Dependency Injection: Use injected tokenManager or default to singleton\n  const activeTokenManager = injectedTokenManager ?? tokenManager;\n  \n  // Production safety check\n  if (process.env.NODE_ENV === 'production' && injectedTokenManager && injectedTokenManager !== tokenManager) {\n    appLogger.warn('Custom tokenManager injected in production environment', {\n      isCustomTokenManager: true,\n      hasInjectedTokenManager: !!injectedTokenManager,\n    });\n  }\n  \n  // Comprehensive TokenManager Interface Validation\n  if (injectedTokenManager) {\n    // Type validation\n    if (typeof injectedTokenManager !== 'object' || injectedTokenManager === null) {\n      throw new Error('Invalid tokenManager: must be a non-null object');\n    }\n\n    // Required methods validation\n    const requiredMethods = [\n      'getTokenInfo',\n      'setTokens', \n      'clearTokens',\n      'updateApiClientToken',\n      'getCurrentUserInfo',\n      'needsRefresh',\n      'getAccessToken',\n      'getRefreshToken',\n      'parseTokenPayload'\n    ];\n\n    const missingMethods = requiredMethods.filter(method => \n      !injectedTokenManager[method as keyof TokenManager] || typeof injectedTokenManager[method as keyof TokenManager] !== 'function'\n    );\n\n    if (missingMethods.length > 0) {\n      throw new Error(`Invalid tokenManager: missing required methods: ${missingMethods.join(', ')}. TokenManager must implement the full interface.`);\n    }\n\n    // Production environment extra validation\n    if (process.env.NODE_ENV === 'production') {\n      // Check if this looks like a test mock (suspicious patterns)\n      const mockIndicators = [\n        injectedTokenManager.constructor?.name === 'Object', // Plain object (likely mock)\n        'mockReturnValue' in injectedTokenManager.getTokenInfo, // Jest mock function\n        injectedTokenManager.getTokenInfo.toString().includes('jest'), // Jest signature\n      ];\n\n      if (mockIndicators.some(Boolean)) {\n        appLogger.error('Suspicious tokenManager detected in production', {\n          constructorName: injectedTokenManager.constructor?.name,\n          hasMockSignature: mockIndicators[1],\n          hasJestSignature: mockIndicators[2],\n          isProduction: true,\n        });\n        \n        // In production, reject obvious test mocks\n        throw new Error('Invalid tokenManager: test mocks are not allowed in production environment');\n      }\n    }\n\n    appLogger.debug('TokenManager validation passed', {\n      isInjected: true,\n      methodCount: requiredMethods.length,\n      environment: process.env.NODE_ENV,\n    });\n  }\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true, // Start with loading to check existing tokens\n    error: null,\n  });\n\n  // Initialize auth state from stored tokens\n  useEffect(() => {\n    const initializeAuth = async (): Promise<void> => {\n      try {\n        appLogger.debug('Initializing authentication state');\n\n        const tokenInfo = activeTokenManager.getTokenInfo();\n        \n        if (tokenInfo.isValid && tokenInfo.token) {\n          // Get user info from token\n          const userInfo = activeTokenManager.getCurrentUserInfo();\n          \n          if (userInfo?.userId && userInfo?.email) {\n            const user: User = {\n              id: userInfo.userId!,\n              email: userInfo.email,\n              name: userInfo.email.split('@')[0] || 'Unknown User', // Fallback name\n              role: (userInfo.role as 'user' | 'admin') || 'user',\n            };\n\n            // Update API client with token\n            activeTokenManager.updateApiClientToken();\n\n            setAuthState({\n              user,\n              isAuthenticated: true,\n              isLoading: false,\n              error: null,\n            });\n\n            appLogger.info('Authentication restored from stored token', {\n              userId: user.id,\n              email: user.email,\n              role: user.role,\n            });\n          } else {\n            throw new Error('Invalid token payload');\n          }\n        } else {\n          // No valid token found\n          setAuthState({\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: null,\n          });\n\n          appLogger.debug('No valid authentication token found');\n        }\n      } catch (error) {\n        appLogger.error('Failed to initialize authentication', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n\n        // Clear invalid tokens\n        activeTokenManager.clearTokens();\n        \n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: 'Authentication initialization failed',\n        });\n      }\n    };\n\n    initializeAuth();\n  }, [activeTokenManager]);\n\n  // Refresh token function\n  const refreshToken = useCallback(async (): Promise<boolean> => {\n    try {\n      const refreshTokenValue = activeTokenManager.getRefreshToken();\n      \n      if (!refreshTokenValue) {\n        throw new Error('No refresh token available');\n      }\n\n      appLogger.debug('Token refresh attempt started');\n\n      // TODO: Replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Mock successful refresh\n      const mockTokenData = {\n        token: 'refreshed.jwt.token',\n        refreshToken: refreshTokenValue, // Keep same refresh token\n        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n      };\n\n      activeTokenManager.setTokens(mockTokenData);\n      activeTokenManager.updateApiClientToken();\n\n      appLogger.info('Token refresh successful');\n      return true;\n\n    } catch (error) {\n      appLogger.error('Token refresh failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Clear tokens and update state on refresh failure\n      activeTokenManager.clearTokens();\n      setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n      return false;\n    }\n  }, [activeTokenManager]);\n\n  // Auto-refresh token when needed\n  useEffect(() => {\n    if (!authState.isAuthenticated) return;\n\n    const checkTokenRefresh = async (): Promise<void> => {\n      if (activeTokenManager.needsRefresh()) {\n        appLogger.debug('Token needs refresh, attempting refresh');\n        refreshToken().catch((error) => {\n          appLogger.error('Auto token refresh failed', { error });\n        });\n      }\n    };\n\n    // Check every 5 minutes\n    const interval = setInterval(checkTokenRefresh, 5 * 60 * 1000);\n    \n    // Check immediately\n    checkTokenRefresh();\n\n    return (): void => clearInterval(interval);\n  }, [authState.isAuthenticated, refreshToken, activeTokenManager]);\n\n  // Login function (will be enhanced with TanStack mutation)\n  const login = async (email: string): Promise<void> => {\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      appLogger.info('Login attempt started', { email });\n\n      // TODO: Replace with actual API call via TanStack mutation\n      // For now, mock successful login\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful response\n      const mockTokenData = {\n        token: 'mock.jwt.token',\n        refreshToken: 'mock.refresh.token',\n        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour\n      };\n\n      const mockUser: User = {\n        id: 'user-1',\n        email,\n        name: email.split('@')[0] || 'Unknown User',\n        role: 'user',\n      };\n\n      // Store tokens\n      activeTokenManager.setTokens(mockTokenData);\n      activeTokenManager.updateApiClientToken();\n\n      setAuthState({\n        user: mockUser,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      appLogger.info('Login successful', {\n        userId: mockUser.id,\n        email: mockUser.email,\n      });\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\n      \n      appLogger.error('Login failed', {\n        email,\n        error: errorMessage,\n      });\n\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage,\n      }));\n\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = (): void => {\n    appLogger.info('Logout started', {\n      ...(authState.user?.id && { userId: authState.user.id }),\n    });\n\n    // Clear tokens using active token manager\n    activeTokenManager.clearTokens();\n\n    // Reset auth state\n    setAuthState({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n    });\n\n    appLogger.info('Logout completed');\n  };\n\n\n  // Clear error\n  const clearError = (): void => {\n    setAuthState(prev => ({ ...prev, error: null }));\n  };\n\n  // Update user profile\n  const updateUser = (updates: Partial<Pick<User, 'name' | 'avatar'>>): void => {\n    if (!authState.user) return;\n\n    const updatedUser = { ...authState.user, ...updates };\n\n    setAuthState(prev => ({\n      ...prev,\n      user: updatedUser,\n    }));\n\n    appLogger.info('User profile updated', {\n      userId: updatedUser.id,\n      updates,\n    });\n  };\n\n  // Token utilities\n  const getAccessToken = (): string | null => {\n    return activeTokenManager.getAccessToken();\n  };\n\n  const needsRefresh = (): boolean => {\n    return activeTokenManager.needsRefresh();\n  };\n\n  // Context value\n  const contextValue: AuthContextType = {\n    // State\n    ...authState,\n    \n    // Actions\n    login,\n    logout,\n    refreshToken,\n    clearError,\n    updateUser,\n    \n    // Utilities\n    getAccessToken,\n    needsRefresh,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Hook to use authentication context\n */\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}\n\n// Export types\nexport { AuthContext };"],"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","ignoreList":[]}