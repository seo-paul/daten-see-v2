8fc98782a91e83e05c89842e04cd3ca2
'use client';
"use strict";

/* istanbul ignore next */
function cov_2lzn4cbfwr() {
  var path = "/Users/zweigen/Sites/daten-see-v2/src/contexts/AuthContext.tsx";
  var hash = "7b449189f914b67fc0a4063656414ba19d5d28d1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/zweigen/Sites/daten-see-v2/src/contexts/AuthContext.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "8": {
        start: {
          line: 24,
          column: 15
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "9": {
        start: {
          line: 25,
          column: 15
        },
        end: {
          line: 25,
          column: 43
        }
      },
      "10": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 26,
          column: 64
        }
      },
      "11": {
        start: {
          line: 28,
          column: 34
        },
        end: {
          line: 28,
          column: 70
        }
      },
      "12": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 79
        }
      },
      "18": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "19": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 148
        }
      },
      "20": {
        start: {
          line: 57,
          column: 64
        },
        end: {
          line: 57,
          column: 147
        }
      },
      "21": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 157
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "24": {
        start: {
          line: 64,
          column: 35
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "25": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "26": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 75,
          column: 19
        }
      },
      "27": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 110
        }
      },
      "28": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "29": {
        start: {
          line: 86,
          column: 38
        },
        end: {
          line: 91,
          column: 6
        }
      },
      "30": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "31": {
        start: {
          line: 94,
          column: 31
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "32": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "33": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 83
        }
      },
      "34": {
        start: {
          line: 97,
          column: 34
        },
        end: {
          line: 97,
          column: 67
        }
      },
      "35": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "36": {
        start: {
          line: 100,
          column: 37
        },
        end: {
          line: 100,
          column: 76
        }
      },
      "37": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 123,
          column: 21
        }
      },
      "38": {
        start: {
          line: 102,
          column: 37
        },
        end: {
          line: 107,
          column: 25
        }
      },
      "39": {
        start: {
          line: 109,
          column: 24
        },
        end: {
          line: 109,
          column: 66
        }
      },
      "40": {
        start: {
          line: 110,
          column: 24
        },
        end: {
          line: 115,
          column: 27
        }
      },
      "41": {
        start: {
          line: 116,
          column: 24
        },
        end: {
          line: 120,
          column: 27
        }
      },
      "42": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "43": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 131,
          column: 23
        }
      },
      "44": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 89
        }
      },
      "45": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "46": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 49
        }
      },
      "47": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 145,
          column: 19
        }
      },
      "48": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 25
        }
      },
      "49": {
        start: {
          line: 153,
          column: 25
        },
        end: {
          line: 188,
          column: 6
        }
      },
      "50": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "51": {
        start: {
          line: 155,
          column: 38
        },
        end: {
          line: 155,
          column: 74
        }
      },
      "52": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "53": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 62
        }
      },
      "54": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 75
        }
      },
      "55": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 67
        }
      },
      "56": {
        start: {
          line: 161,
          column: 41
        },
        end: {
          line: 161,
          column: 65
        }
      },
      "57": {
        start: {
          line: 163,
          column: 34
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "58": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "59": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 54
        }
      },
      "60": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 69
        }
      },
      "61": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "62": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 45
        }
      },
      "64": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "65": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 25
        }
      },
      "66": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 211,
          column: 7
        }
      },
      "67": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "68": {
        start: {
          line: 191,
          column: 40
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "69": {
        start: {
          line: 192,
          column: 34
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "70": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "71": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 89
        }
      },
      "72": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "73": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 198,
          column: 23
        }
      },
      "74": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 70
        }
      },
      "75": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 28
        }
      },
      "76": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 43
        }
      },
      "77": {
        start: {
          line: 206,
          column: 19
        },
        end: {
          line: 206,
          column: 42
        }
      },
      "78": {
        start: {
          line: 213,
          column: 18
        },
        end: {
          line: 264,
          column: 5
        }
      },
      "79": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 218,
          column: 16
        }
      },
      "80": {
        start: {
          line: 214,
          column: 30
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "81": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "82": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "83": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 68
        }
      },
      "84": {
        start: {
          line: 225,
          column: 41
        },
        end: {
          line: 225,
          column: 66
        }
      },
      "85": {
        start: {
          line: 227,
          column: 34
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "86": {
        start: {
          line: 232,
          column: 29
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "87": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 56
        }
      },
      "88": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 54
        }
      },
      "89": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "90": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 250,
          column: 15
        }
      },
      "91": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 252,
          column: 88
        }
      },
      "92": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 256,
          column: 15
        }
      },
      "93": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 261,
          column: 20
        }
      },
      "94": {
        start: {
          line: 257,
          column: 34
        },
        end: {
          line: 261,
          column: 17
        }
      },
      "95": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 24
        }
      },
      "96": {
        start: {
          line: 266,
          column: 19
        },
        end: {
          line: 282,
          column: 5
        }
      },
      "97": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "98": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 41
        }
      },
      "99": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "100": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 57
        }
      },
      "101": {
        start: {
          line: 284,
          column: 23
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "102": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 16
        }
      },
      "103": {
        start: {
          line: 285,
          column: 30
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "104": {
        start: {
          line: 291,
          column: 23
        },
        end: {
          line: 305,
          column: 5
        }
      },
      "105": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 36
        }
      },
      "106": {
        start: {
          line: 292,
          column: 29
        },
        end: {
          line: 292,
          column: 36
        }
      },
      "107": {
        start: {
          line: 293,
          column: 28
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "108": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 300,
          column: 16
        }
      },
      "109": {
        start: {
          line: 297,
          column: 30
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "110": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "111": {
        start: {
          line: 307,
          column: 27
        },
        end: {
          line: 309,
          column: 5
        }
      },
      "112": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 51
        }
      },
      "113": {
        start: {
          line: 310,
          column: 25
        },
        end: {
          line: 312,
          column: 5
        }
      },
      "114": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 49
        }
      },
      "115": {
        start: {
          line: 314,
          column: 25
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "116": {
        start: {
          line: 327,
          column: 4
        },
        end: {
          line: 330,
          column: 7
        }
      },
      "117": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 55
        }
      },
      "118": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 336,
          column: 5
        }
      },
      "119": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 71
        }
      },
      "120": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 337,
          column: 19
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "AuthProvider",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 21
          }
        },
        loc: {
          start: {
            line: 29,
            column: 72
          },
          end: {
            line: 331,
            column: 1
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 54
          },
          end: {
            line: 57,
            column: 55
          }
        },
        loc: {
          start: {
            line: 57,
            column: 64
          },
          end: {
            line: 57,
            column: 147
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 93,
            column: 26
          },
          end: {
            line: 93,
            column: 27
          }
        },
        loc: {
          start: {
            line: 93,
            column: 30
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 93
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 94,
            column: 32
          }
        },
        loc: {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 147,
            column: 9
          }
        },
        line: 94
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 153,
            column: 49
          },
          end: {
            line: 153,
            column: 50
          }
        },
        loc: {
          start: {
            line: 153,
            column: 59
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 153
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 161,
            column: 30
          },
          end: {
            line: 161,
            column: 31
          }
        },
        loc: {
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 65
          }
        },
        line: 161
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 190,
            column: 26
          },
          end: {
            line: 190,
            column: 27
          }
        },
        loc: {
          start: {
            line: 190,
            column: 30
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 190
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 192,
            column: 34
          },
          end: {
            line: 192,
            column: 35
          }
        },
        loc: {
          start: {
            line: 192,
            column: 44
          },
          end: {
            line: 201,
            column: 9
          }
        },
        line: 192
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 195,
            column: 37
          },
          end: {
            line: 195,
            column: 38
          }
        },
        loc: {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 199,
            column: 17
          }
        },
        line: 195
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 206,
            column: 15
          },
          end: {
            line: 206,
            column: 16
          }
        },
        loc: {
          start: {
            line: 206,
            column: 19
          },
          end: {
            line: 206,
            column: 42
          }
        },
        line: 206
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 213,
            column: 18
          },
          end: {
            line: 213,
            column: 19
          }
        },
        loc: {
          start: {
            line: 213,
            column: 33
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 213
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 214,
            column: 22
          }
        },
        loc: {
          start: {
            line: 214,
            column: 30
          },
          end: {
            line: 218,
            column: 13
          }
        },
        line: 214
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 225,
            column: 30
          },
          end: {
            line: 225,
            column: 31
          }
        },
        loc: {
          start: {
            line: 225,
            column: 41
          },
          end: {
            line: 225,
            column: 66
          }
        },
        line: 225
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 257,
            column: 25
          },
          end: {
            line: 257,
            column: 26
          }
        },
        loc: {
          start: {
            line: 257,
            column: 34
          },
          end: {
            line: 261,
            column: 17
          }
        },
        line: 257
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 266,
            column: 19
          },
          end: {
            line: 266,
            column: 20
          }
        },
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 266
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 24
          }
        },
        loc: {
          start: {
            line: 284,
            column: 27
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 284
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 285,
            column: 21
          },
          end: {
            line: 285,
            column: 22
          }
        },
        loc: {
          start: {
            line: 285,
            column: 30
          },
          end: {
            line: 288,
            column: 13
          }
        },
        line: 285
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 291,
            column: 23
          },
          end: {
            line: 291,
            column: 24
          }
        },
        loc: {
          start: {
            line: 291,
            column: 34
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 291
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 297,
            column: 21
          },
          end: {
            line: 297,
            column: 22
          }
        },
        loc: {
          start: {
            line: 297,
            column: 30
          },
          end: {
            line: 300,
            column: 13
          }
        },
        line: 297
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 307,
            column: 27
          },
          end: {
            line: 307,
            column: 28
          }
        },
        loc: {
          start: {
            line: 307,
            column: 31
          },
          end: {
            line: 309,
            column: 5
          }
        },
        line: 307
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 310,
            column: 25
          },
          end: {
            line: 310,
            column: 26
          }
        },
        loc: {
          start: {
            line: 310,
            column: 29
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 310
      },
      "25": {
        name: "useAuth",
        decl: {
          start: {
            line: 332,
            column: 9
          },
          end: {
            line: 332,
            column: 16
          }
        },
        loc: {
          start: {
            line: 332,
            column: 19
          },
          end: {
            line: 338,
            column: 1
          }
        },
        line: 332
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 31
          },
          end: {
            line: 31,
            column: 51
          }
        }, {
          start: {
            line: 31,
            column: 55
          },
          end: {
            line: 31,
            column: 74
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 45
          }
        }, {
          start: {
            line: 33,
            column: 49
          },
          end: {
            line: 33,
            column: 69
          }
        }, {
          start: {
            line: 33,
            column: 73
          },
          end: {
            line: 33,
            column: 117
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 42,
            column: 52
          }
        }, {
          start: {
            line: 42,
            column: 56
          },
          end: {
            line: 42,
            column: 85
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 64
          },
          end: {
            line: 57,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 64
          },
          end: {
            line: 57,
            column: 93
          }
        }, {
          start: {
            line: 57,
            column: 97
          },
          end: {
            line: 57,
            column: 147
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "10": {
        loc: {
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        }, {
          start: {
            line: 124,
            column: 23
          },
          end: {
            line: 133,
            column: 17
          }
        }],
        line: 98
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 37
          }
        }, {
          start: {
            line: 98,
            column: 41
          },
          end: {
            line: 98,
            column: 56
          }
        }],
        line: 98
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 123,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 123,
            column: 21
          }
        }, {
          start: {
            line: 121,
            column: 27
          },
          end: {
            line: 123,
            column: 21
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 101,
            column: 40
          }
        }, {
          start: {
            line: 101,
            column: 44
          },
          end: {
            line: 101,
            column: 59
          }
        }],
        line: 101
      },
      "14": {
        loc: {
          start: {
            line: 105,
            column: 34
          },
          end: {
            line: 105,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 34
          },
          end: {
            line: 105,
            column: 62
          }
        }, {
          start: {
            line: 105,
            column: 66
          },
          end: {
            line: 105,
            column: 80
          }
        }],
        line: 105
      },
      "15": {
        loc: {
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 106,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 106,
            column: 47
          }
        }, {
          start: {
            line: 106,
            column: 51
          },
          end: {
            line: 106,
            column: 57
          }
        }],
        line: 106
      },
      "16": {
        loc: {
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 136,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 52
          },
          end: {
            line: 136,
            column: 65
          }
        }, {
          start: {
            line: 136,
            column: 68
          },
          end: {
            line: 136,
            column: 83
          }
        }],
        line: 136
      },
      "17": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "18": {
        loc: {
          start: {
            line: 174,
            column: 23
          },
          end: {
            line: 174,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 48
          },
          end: {
            line: 174,
            column: 61
          }
        }, {
          start: {
            line: 174,
            column: 64
          },
          end: {
            line: 174,
            column: 79
          }
        }],
        line: 174
      },
      "19": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "20": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "21": {
        loc: {
          start: {
            line: 235,
            column: 22
          },
          end: {
            line: 235,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 22
          },
          end: {
            line: 235,
            column: 41
          }
        }, {
          start: {
            line: 235,
            column: 45
          },
          end: {
            line: 235,
            column: 59
          }
        }],
        line: 235
      },
      "22": {
        loc: {
          start: {
            line: 252,
            column: 33
          },
          end: {
            line: 252,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 58
          },
          end: {
            line: 252,
            column: 71
          }
        }, {
          start: {
            line: 252,
            column: 74
          },
          end: {
            line: 252,
            column: 88
          }
        }],
        line: 252
      },
      "23": {
        loc: {
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 33
          }
        }, {
          start: {
            line: 268,
            column: 37
          },
          end: {
            line: 270,
            column: 13
          }
        }],
        line: 268
      },
      "24": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "25": {
        loc: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/zweigen/Sites/daten-see-v2/src/contexts/AuthContext.tsx"],
      sourcesContent: ["'use client';\n\nimport { createContext, useContext, useEffect, useState, useCallback, ReactNode } from 'react';\n\nimport { tokenManager, type TokenManager } from '@/lib/auth/token';\nimport { appLogger } from '@/lib/monitoring/logger.config';\n\n// User interface\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: 'user' | 'admin';\n  avatar?: string;\n}\n\n// Auth state interface\nexport interface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Auth context interface\nexport interface AuthContextType extends AuthState {\n  // Auth actions\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<boolean>;\n  clearError: () => void;\n  \n  // User actions\n  updateUser: (updates: Partial<Pick<User, 'name' | 'avatar'>>) => void;\n  \n  // Token utilities\n  getAccessToken: () => string | null;\n  needsRefresh: () => boolean;\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Props interface with optional dependency injection\ninterface AuthProviderProps {\n  children: ReactNode;\n  tokenManager?: TokenManager; // Optional for testing and flexibility\n}\n\n/**\n * Authentication Context Provider\n * Manages user authentication state without Zustand\n * Uses React Context + TanStack Query for server state\n */\nexport function AuthProvider({ children, tokenManager: injectedTokenManager }: AuthProviderProps): React.ReactElement {\n  // Dependency Injection: Use injected tokenManager or default to singleton\n  const activeTokenManager = injectedTokenManager ?? tokenManager;\n  \n  // Production safety check\n  if (process.env.NODE_ENV === 'production' && injectedTokenManager && injectedTokenManager !== tokenManager) {\n    appLogger.warn('Custom tokenManager injected in production environment', {\n      isCustomTokenManager: true,\n      hasInjectedTokenManager: !!injectedTokenManager,\n    });\n  }\n  \n  // Comprehensive TokenManager Interface Validation\n  if (injectedTokenManager) {\n    // Type validation\n    if (typeof injectedTokenManager !== 'object' || injectedTokenManager === null) {\n      throw new Error('Invalid tokenManager: must be a non-null object');\n    }\n\n    // Required methods validation\n    const requiredMethods = [\n      'getTokenInfo',\n      'setTokens', \n      'clearTokens',\n      'updateApiClientToken',\n      'getCurrentUserInfo',\n      'needsRefresh',\n      'getAccessToken',\n      'getRefreshToken',\n      'parseTokenPayload'\n    ];\n\n    const missingMethods = requiredMethods.filter(method => \n      !injectedTokenManager[method as keyof TokenManager] || typeof injectedTokenManager[method as keyof TokenManager] !== 'function'\n    );\n\n    if (missingMethods.length > 0) {\n      throw new Error(`Invalid tokenManager: missing required methods: ${missingMethods.join(', ')}. TokenManager must implement the full interface.`);\n    }\n\n    // Production environment extra validation\n    if (process.env.NODE_ENV === 'production') {\n      // Check if this looks like a test mock (suspicious patterns)\n      const mockIndicators = [\n        injectedTokenManager.constructor?.name === 'Object', // Plain object (likely mock)\n        'mockReturnValue' in injectedTokenManager.getTokenInfo, // Jest mock function\n        injectedTokenManager.getTokenInfo.toString().includes('jest'), // Jest signature\n      ];\n\n      if (mockIndicators.some(Boolean)) {\n        appLogger.error('Suspicious tokenManager detected in production', {\n          constructorName: injectedTokenManager.constructor?.name,\n          hasMockSignature: mockIndicators[1],\n          hasJestSignature: mockIndicators[2],\n          isProduction: true,\n        });\n        \n        // In production, reject obvious test mocks\n        throw new Error('Invalid tokenManager: test mocks are not allowed in production environment');\n      }\n    }\n\n    appLogger.debug('TokenManager validation passed', {\n      isInjected: true,\n      methodCount: requiredMethods.length,\n      environment: process.env.NODE_ENV,\n    });\n  }\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true, // Start with loading to check existing tokens\n    error: null,\n  });\n\n  // Initialize auth state from stored tokens\n  useEffect(() => {\n    const initializeAuth = async (): Promise<void> => {\n      try {\n        appLogger.debug('Initializing authentication state');\n\n        const tokenInfo = activeTokenManager.getTokenInfo();\n        \n        if (tokenInfo.isValid && tokenInfo.token) {\n          // Get user info from token\n          const userInfo = activeTokenManager.getCurrentUserInfo();\n          \n          if (userInfo?.userId && userInfo?.email) {\n            const user: User = {\n              id: userInfo.userId!,\n              email: userInfo.email,\n              name: userInfo.email.split('@')[0] || 'Unknown User', // Fallback name\n              role: (userInfo.role as 'user' | 'admin') || 'user',\n            };\n\n            // Update API client with token\n            activeTokenManager.updateApiClientToken();\n\n            setAuthState({\n              user,\n              isAuthenticated: true,\n              isLoading: false,\n              error: null,\n            });\n\n            appLogger.info('Authentication restored from stored token', {\n              userId: user.id,\n              email: user.email,\n              role: user.role,\n            });\n          } else {\n            throw new Error('Invalid token payload');\n          }\n        } else {\n          // No valid token found\n          setAuthState({\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            error: null,\n          });\n\n          appLogger.debug('No valid authentication token found');\n        }\n      } catch (error) {\n        appLogger.error('Failed to initialize authentication', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n\n        // Clear invalid tokens\n        activeTokenManager.clearTokens();\n        \n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: 'Authentication initialization failed',\n        });\n      }\n    };\n\n    initializeAuth();\n  }, [activeTokenManager]);\n\n  // Refresh token function\n  const refreshToken = useCallback(async (): Promise<boolean> => {\n    try {\n      const refreshTokenValue = activeTokenManager.getRefreshToken();\n      \n      if (!refreshTokenValue) {\n        throw new Error('No refresh token available');\n      }\n\n      appLogger.debug('Token refresh attempt started');\n\n      // TODO: Replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Mock successful refresh\n      const mockTokenData = {\n        token: 'refreshed.jwt.token',\n        refreshToken: refreshTokenValue, // Keep same refresh token\n        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(),\n      };\n\n      activeTokenManager.setTokens(mockTokenData);\n      activeTokenManager.updateApiClientToken();\n\n      appLogger.info('Token refresh successful');\n      return true;\n\n    } catch (error) {\n      appLogger.error('Token refresh failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      // Clear tokens and update state on refresh failure\n      activeTokenManager.clearTokens();\n      setAuthState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n      return false;\n    }\n  }, [activeTokenManager]);\n\n  // Auto-refresh token when needed\n  useEffect(() => {\n    if (!authState.isAuthenticated) return;\n\n    const checkTokenRefresh = async (): Promise<void> => {\n      if (activeTokenManager.needsRefresh()) {\n        appLogger.debug('Token needs refresh, attempting refresh');\n        refreshToken().catch((error) => {\n          appLogger.error('Auto token refresh failed', { error });\n        });\n      }\n    };\n\n    // Check every 5 minutes\n    const interval = setInterval(checkTokenRefresh, 5 * 60 * 1000);\n    \n    // Check immediately\n    checkTokenRefresh();\n\n    return (): void => clearInterval(interval);\n  }, [authState.isAuthenticated, refreshToken, activeTokenManager]);\n\n  // Login function (will be enhanced with TanStack mutation)\n  const login = async (email: string): Promise<void> => {\n    setAuthState(prev => ({ ...prev, isLoading: true, error: null }));\n\n    try {\n      appLogger.info('Login attempt started', { email });\n\n      // TODO: Replace with actual API call via TanStack mutation\n      // For now, mock successful login\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock successful response\n      const mockTokenData = {\n        token: 'mock.jwt.token',\n        refreshToken: 'mock.refresh.token',\n        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString(), // 1 hour\n      };\n\n      const mockUser: User = {\n        id: 'user-1',\n        email,\n        name: email.split('@')[0] || 'Unknown User',\n        role: 'user',\n      };\n\n      // Store tokens\n      activeTokenManager.setTokens(mockTokenData);\n      activeTokenManager.updateApiClientToken();\n\n      setAuthState({\n        user: mockUser,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      appLogger.info('Login successful', {\n        userId: mockUser.id,\n        email: mockUser.email,\n      });\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\n      \n      appLogger.error('Login failed', {\n        email,\n        error: errorMessage,\n      });\n\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage,\n      }));\n\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = (): void => {\n    appLogger.info('Logout started', {\n      ...(authState.user?.id && { userId: authState.user.id }),\n    });\n\n    // Clear tokens using active token manager\n    activeTokenManager.clearTokens();\n\n    // Reset auth state\n    setAuthState({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n    });\n\n    appLogger.info('Logout completed');\n  };\n\n\n  // Clear error\n  const clearError = (): void => {\n    setAuthState(prev => ({ ...prev, error: null }));\n  };\n\n  // Update user profile\n  const updateUser = (updates: Partial<Pick<User, 'name' | 'avatar'>>): void => {\n    if (!authState.user) return;\n\n    const updatedUser = { ...authState.user, ...updates };\n\n    setAuthState(prev => ({\n      ...prev,\n      user: updatedUser,\n    }));\n\n    appLogger.info('User profile updated', {\n      userId: updatedUser.id,\n      updates,\n    });\n  };\n\n  // Token utilities\n  const getAccessToken = (): string | null => {\n    return activeTokenManager.getAccessToken();\n  };\n\n  const needsRefresh = (): boolean => {\n    return activeTokenManager.needsRefresh();\n  };\n\n  // Context value\n  const contextValue: AuthContextType = {\n    // State\n    ...authState,\n    \n    // Actions\n    login,\n    logout,\n    refreshToken,\n    clearError,\n    updateUser,\n    \n    // Utilities\n    getAccessToken,\n    needsRefresh,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Hook to use authentication context\n */\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}\n\n// Export types\nexport { AuthContext };"],
      names: ["AuthContext", "AuthProvider", "useAuth", "createContext", "undefined", "children", "tokenManager", "injectedTokenManager", "activeTokenManager", "process", "env", "NODE_ENV", "appLogger", "warn", "isCustomTokenManager", "hasInjectedTokenManager", "Error", "requiredMethods", "missingMethods", "filter", "method", "length", "join", "mockIndicators", "name", "getTokenInfo", "toString", "includes", "some", "Boolean", "error", "constructorName", "hasMockSignature", "hasJestSignature", "isProduction", "debug", "isInjected", "methodCount", "environment", "authState", "setAuthState", "useState", "user", "isAuthenticated", "isLoading", "useEffect", "initializeAuth", "tokenInfo", "isValid", "token", "userInfo", "getCurrentUserInfo", "userId", "email", "id", "split", "role", "updateApiClientToken", "info", "message", "clearTokens", "refreshToken", "useCallback", "refreshTokenValue", "getRefreshToken", "Promise", "resolve", "setTimeout", "mockTokenData", "expiresAt", "Date", "now", "toISOString", "setTokens", "checkTokenRefresh", "needsRefresh", "catch", "interval", "setInterval", "clearInterval", "login", "prev", "mockUser", "errorMessage", "logout", "clearError", "updateUser", "updates", "updatedUser", "getAccessToken", "contextValue", "Provider", "value", "context", "useContext"],
      mappings: "AAAA;;;;;;;;;;;;QA6ZSA;eAAAA;;QAvWOC;eAAAA;;QA4VAC;eAAAA;;;;uBAhZuE;uBAEvC;8BACtB;AAmC1B,iBAAiB;AACjB,MAAMF,4BAAcG,IAAAA,oBAAa,EAA8BC;AAaxD,SAASH,aAAa,EAAEI,QAAQ,EAAEC,cAAcC,oBAAoB,EAAqB;IAC9F,0EAA0E;IAC1E,MAAMC,qBAAqBD,wBAAwBD,mBAAY;IAE/D,0BAA0B;IAC1B,IAAIG,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBAAgBJ,wBAAwBA,yBAAyBD,mBAAY,EAAE;QAC1GM,uBAAS,CAACC,IAAI,CAAC,0DAA0D;YACvEC,sBAAsB;YACtBC,yBAAyB,CAAC,CAACR;QAC7B;IACF;IAEA,kDAAkD;IAClD,IAAIA,sBAAsB;QACxB,kBAAkB;QAClB,IAAI,OAAOA,yBAAyB,YAAYA,yBAAyB,MAAM;YAC7E,MAAM,IAAIS,MAAM;QAClB;QAEA,8BAA8B;QAC9B,MAAMC,kBAAkB;YACtB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,MAAMC,iBAAiBD,gBAAgBE,MAAM,CAACC,CAAAA,SAC5C,CAACb,oBAAoB,CAACa,OAA6B,IAAI,OAAOb,oBAAoB,CAACa,OAA6B,KAAK;QAGvH,IAAIF,eAAeG,MAAM,GAAG,GAAG;YAC7B,MAAM,IAAIL,MAAM,CAAC,gDAAgD,EAAEE,eAAeI,IAAI,CAAC,MAAM,iDAAiD,CAAC;QACjJ;QAEA,0CAA0C;QAC1C,IAAIb,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YACzC,6DAA6D;YAC7D,MAAMY,iBAAiB;gBACrBhB,qBAAqB,WAAW,EAAEiB,SAAS;gBAC3C,qBAAqBjB,qBAAqBkB,YAAY;gBACtDlB,qBAAqBkB,YAAY,CAACC,QAAQ,GAAGC,QAAQ,CAAC;aACvD;YAED,IAAIJ,eAAeK,IAAI,CAACC,UAAU;gBAChCjB,uBAAS,CAACkB,KAAK,CAAC,kDAAkD;oBAChEC,iBAAiBxB,qBAAqB,WAAW,EAAEiB;oBACnDQ,kBAAkBT,cAAc,CAAC,EAAE;oBACnCU,kBAAkBV,cAAc,CAAC,EAAE;oBACnCW,cAAc;gBAChB;gBAEA,2CAA2C;gBAC3C,MAAM,IAAIlB,MAAM;YAClB;QACF;QAEAJ,uBAAS,CAACuB,KAAK,CAAC,kCAAkC;YAChDC,YAAY;YACZC,aAAapB,gBAAgBI,MAAM;YACnCiB,aAAa7B,QAAQC,GAAG,CAACC,QAAQ;QACnC;IACF;IACA,MAAM,CAAC4B,WAAWC,aAAa,GAAGC,IAAAA,eAAQ,EAAY;QACpDC,MAAM;QACNC,iBAAiB;QACjBC,WAAW;QACXd,OAAO;IACT;IAEA,2CAA2C;IAC3Ce,IAAAA,gBAAS,EAAC;QACR,MAAMC,iBAAiB;YACrB,IAAI;gBACFlC,uBAAS,CAACuB,KAAK,CAAC;gBAEhB,MAAMY,YAAYvC,mBAAmBiB,YAAY;gBAEjD,IAAIsB,UAAUC,OAAO,IAAID,UAAUE,KAAK,EAAE;oBACxC,2BAA2B;oBAC3B,MAAMC,WAAW1C,mBAAmB2C,kBAAkB;oBAEtD,IAAID,UAAUE,UAAUF,UAAUG,OAAO;wBACvC,MAAMX,OAAa;4BACjBY,IAAIJ,SAASE,MAAM;4BACnBC,OAAOH,SAASG,KAAK;4BACrB7B,MAAM0B,SAASG,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;4BACtCC,MAAM,AAACN,SAASM,IAAI,IAAyB;wBAC/C;wBAEA,+BAA+B;wBAC/BhD,mBAAmBiD,oBAAoB;wBAEvCjB,aAAa;4BACXE;4BACAC,iBAAiB;4BACjBC,WAAW;4BACXd,OAAO;wBACT;wBAEAlB,uBAAS,CAAC8C,IAAI,CAAC,6CAA6C;4BAC1DN,QAAQV,KAAKY,EAAE;4BACfD,OAAOX,KAAKW,KAAK;4BACjBG,MAAMd,KAAKc,IAAI;wBACjB;oBACF,OAAO;wBACL,MAAM,IAAIxC,MAAM;oBAClB;gBACF,OAAO;oBACL,uBAAuB;oBACvBwB,aAAa;wBACXE,MAAM;wBACNC,iBAAiB;wBACjBC,WAAW;wBACXd,OAAO;oBACT;oBAEAlB,uBAAS,CAACuB,KAAK,CAAC;gBAClB;YACF,EAAE,OAAOL,OAAO;gBACdlB,uBAAS,CAACkB,KAAK,CAAC,uCAAuC;oBACrDA,OAAOA,iBAAiBd,QAAQc,MAAM6B,OAAO,GAAG;gBAClD;gBAEA,uBAAuB;gBACvBnD,mBAAmBoD,WAAW;gBAE9BpB,aAAa;oBACXE,MAAM;oBACNC,iBAAiB;oBACjBC,WAAW;oBACXd,OAAO;gBACT;YACF;QACF;QAEAgB;IACF,GAAG;QAACtC;KAAmB;IAEvB,yBAAyB;IACzB,MAAMqD,eAAeC,IAAAA,kBAAW,EAAC;QAC/B,IAAI;YACF,MAAMC,oBAAoBvD,mBAAmBwD,eAAe;YAE5D,IAAI,CAACD,mBAAmB;gBACtB,MAAM,IAAI/C,MAAM;YAClB;YAEAJ,uBAAS,CAACuB,KAAK,CAAC;YAEhB,qCAAqC;YACrC,MAAM,IAAI8B,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;YAEjD,0BAA0B;YAC1B,MAAME,gBAAgB;gBACpBnB,OAAO;gBACPY,cAAcE;gBACdM,WAAW,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,MAAMC,WAAW;YAC9D;YAEAhE,mBAAmBiE,SAAS,CAACL;YAC7B5D,mBAAmBiD,oBAAoB;YAEvC7C,uBAAS,CAAC8C,IAAI,CAAC;YACf,OAAO;QAET,EAAE,OAAO5B,OAAO;YACdlB,uBAAS,CAACkB,KAAK,CAAC,wBAAwB;gBACtCA,OAAOA,iBAAiBd,QAAQc,MAAM6B,OAAO,GAAG;YAClD;YAEA,mDAAmD;YACnDnD,mBAAmBoD,WAAW;YAC9BpB,aAAa;gBACXE,MAAM;gBACNC,iBAAiB;gBACjBC,WAAW;gBACXd,OAAO;YACT;YACA,OAAO;QACT;IACF,GAAG;QAACtB;KAAmB;IAEvB,iCAAiC;IACjCqC,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACN,UAAUI,eAAe,EAAE;QAEhC,MAAM+B,oBAAoB;YACxB,IAAIlE,mBAAmBmE,YAAY,IAAI;gBACrC/D,uBAAS,CAACuB,KAAK,CAAC;gBAChB0B,eAAee,KAAK,CAAC,CAAC9C;oBACpBlB,uBAAS,CAACkB,KAAK,CAAC,6BAA6B;wBAAEA;oBAAM;gBACvD;YACF;QACF;QAEA,wBAAwB;QACxB,MAAM+C,WAAWC,YAAYJ,mBAAmB,IAAI,KAAK;QAEzD,oBAAoB;QACpBA;QAEA,OAAO,IAAYK,cAAcF;IACnC,GAAG;QAACtC,UAAUI,eAAe;QAAEkB;QAAcrD;KAAmB;IAEhE,2DAA2D;IAC3D,MAAMwE,QAAQ,OAAO3B;QACnBb,aAAayC,CAAAA,OAAS,CAAA;gBAAE,GAAGA,IAAI;gBAAErC,WAAW;gBAAMd,OAAO;YAAK,CAAA;QAE9D,IAAI;YACFlB,uBAAS,CAAC8C,IAAI,CAAC,yBAAyB;gBAAEL;YAAM;YAEhD,2DAA2D;YAC3D,iCAAiC;YACjC,MAAM,IAAIY,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;YAEjD,2BAA2B;YAC3B,MAAME,gBAAgB;gBACpBnB,OAAO;gBACPY,cAAc;gBACdQ,WAAW,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,MAAMC,WAAW;YAC9D;YAEA,MAAMU,WAAiB;gBACrB5B,IAAI;gBACJD;gBACA7B,MAAM6B,MAAME,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;gBAC7BC,MAAM;YACR;YAEA,eAAe;YACfhD,mBAAmBiE,SAAS,CAACL;YAC7B5D,mBAAmBiD,oBAAoB;YAEvCjB,aAAa;gBACXE,MAAMwC;gBACNvC,iBAAiB;gBACjBC,WAAW;gBACXd,OAAO;YACT;YAEAlB,uBAAS,CAAC8C,IAAI,CAAC,oBAAoB;gBACjCN,QAAQ8B,SAAS5B,EAAE;gBACnBD,OAAO6B,SAAS7B,KAAK;YACvB;QAEF,EAAE,OAAOvB,OAAO;YACd,MAAMqD,eAAerD,iBAAiBd,QAAQc,MAAM6B,OAAO,GAAG;YAE9D/C,uBAAS,CAACkB,KAAK,CAAC,gBAAgB;gBAC9BuB;gBACAvB,OAAOqD;YACT;YAEA3C,aAAayC,CAAAA,OAAS,CAAA;oBACpB,GAAGA,IAAI;oBACPrC,WAAW;oBACXd,OAAOqD;gBACT,CAAA;YAEA,MAAMrD;QACR;IACF;IAEA,kBAAkB;IAClB,MAAMsD,SAAS;QACbxE,uBAAS,CAAC8C,IAAI,CAAC,kBAAkB;YAC/B,GAAInB,UAAUG,IAAI,EAAEY,MAAM;gBAAEF,QAAQb,UAAUG,IAAI,CAACY,EAAE;YAAC,CAAC;QACzD;QAEA,0CAA0C;QAC1C9C,mBAAmBoD,WAAW;QAE9B,mBAAmB;QACnBpB,aAAa;YACXE,MAAM;YACNC,iBAAiB;YACjBC,WAAW;YACXd,OAAO;QACT;QAEAlB,uBAAS,CAAC8C,IAAI,CAAC;IACjB;IAGA,cAAc;IACd,MAAM2B,aAAa;QACjB7C,aAAayC,CAAAA,OAAS,CAAA;gBAAE,GAAGA,IAAI;gBAAEnD,OAAO;YAAK,CAAA;IAC/C;IAEA,sBAAsB;IACtB,MAAMwD,aAAa,CAACC;QAClB,IAAI,CAAChD,UAAUG,IAAI,EAAE;QAErB,MAAM8C,cAAc;YAAE,GAAGjD,UAAUG,IAAI;YAAE,GAAG6C,OAAO;QAAC;QAEpD/C,aAAayC,CAAAA,OAAS,CAAA;gBACpB,GAAGA,IAAI;gBACPvC,MAAM8C;YACR,CAAA;QAEA5E,uBAAS,CAAC8C,IAAI,CAAC,wBAAwB;YACrCN,QAAQoC,YAAYlC,EAAE;YACtBiC;QACF;IACF;IAEA,kBAAkB;IAClB,MAAME,iBAAiB;QACrB,OAAOjF,mBAAmBiF,cAAc;IAC1C;IAEA,MAAMd,eAAe;QACnB,OAAOnE,mBAAmBmE,YAAY;IACxC;IAEA,gBAAgB;IAChB,MAAMe,eAAgC;QACpC,QAAQ;QACR,GAAGnD,SAAS;QAEZ,UAAU;QACVyC;QACAI;QACAvB;QACAwB;QACAC;QAEA,YAAY;QACZG;QACAd;IACF;IAEA,qBACE,qBAAC3E,YAAY2F,QAAQ;QAACC,OAAOF;kBAC1BrF;;AAGP;AAKO,SAASH;IACd,MAAM2F,UAAUC,IAAAA,iBAAU,EAAC9F;IAE3B,IAAI6F,YAAYzF,WAAW;QACzB,MAAM,IAAIY,MAAM;IAClB;IAEA,OAAO6E;AACT"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7b449189f914b67fc0a4063656414ba19d5d28d1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2lzn4cbfwr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2lzn4cbfwr();
cov_2lzn4cbfwr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2lzn4cbfwr().f[0]++;
  cov_2lzn4cbfwr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2lzn4cbfwr().s[3]++;
_export(exports, {
  get AuthContext() {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[1]++;
    cov_2lzn4cbfwr().s[4]++;
    return AuthContext;
  },
  get AuthProvider() {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[2]++;
    cov_2lzn4cbfwr().s[5]++;
    return AuthProvider;
  },
  get useAuth() {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[3]++;
    cov_2lzn4cbfwr().s[6]++;
    return useAuth;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_2lzn4cbfwr().s[7]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_2lzn4cbfwr().s[8]++, require("react"));
const _token =
/* istanbul ignore next */
(cov_2lzn4cbfwr().s[9]++, require("../lib/auth/token"));
const _loggerconfig =
/* istanbul ignore next */
(cov_2lzn4cbfwr().s[10]++, require("../lib/monitoring/logger.config"));
// Create context
const AuthContext =
/* istanbul ignore next */
(/*#__PURE__*/cov_2lzn4cbfwr().s[11]++, (0, _react.createContext)(undefined));
function AuthProvider({
  children,
  tokenManager: injectedTokenManager
}) {
  /* istanbul ignore next */
  cov_2lzn4cbfwr().f[4]++;
  // Dependency Injection: Use injected tokenManager or default to singleton
  const activeTokenManager =
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().s[12]++,
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().b[0][0]++, injectedTokenManager) ??
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().b[0][1]++, _token.tokenManager));
  // Production safety check
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().b[2][0]++, process.env.NODE_ENV === 'production') &&
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().b[2][1]++, injectedTokenManager) &&
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().b[2][2]++, injectedTokenManager !== _token.tokenManager)) {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().b[1][0]++;
    cov_2lzn4cbfwr().s[14]++;
    _loggerconfig.appLogger.warn('Custom tokenManager injected in production environment', {
      isCustomTokenManager: true,
      hasInjectedTokenManager: !!injectedTokenManager
    });
  } else
  /* istanbul ignore next */
  {
    cov_2lzn4cbfwr().b[1][1]++;
  }
  // Comprehensive TokenManager Interface Validation
  cov_2lzn4cbfwr().s[15]++;
  if (injectedTokenManager) {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().b[3][0]++;
    cov_2lzn4cbfwr().s[16]++;
    // Type validation
    if (
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().b[5][0]++, typeof injectedTokenManager !== 'object') ||
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().b[5][1]++, injectedTokenManager === null)) {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().b[4][0]++;
      cov_2lzn4cbfwr().s[17]++;
      throw new Error('Invalid tokenManager: must be a non-null object');
    } else
    /* istanbul ignore next */
    {
      cov_2lzn4cbfwr().b[4][1]++;
    }
    // Required methods validation
    const requiredMethods =
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().s[18]++, ['getTokenInfo', 'setTokens', 'clearTokens', 'updateApiClientToken', 'getCurrentUserInfo', 'needsRefresh', 'getAccessToken', 'getRefreshToken', 'parseTokenPayload']);
    const missingMethods =
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().s[19]++, requiredMethods.filter(method => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[5]++;
      cov_2lzn4cbfwr().s[20]++;
      return /* istanbul ignore next */(cov_2lzn4cbfwr().b[6][0]++, !injectedTokenManager[method]) ||
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().b[6][1]++, typeof injectedTokenManager[method] !== 'function');
    }));
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[21]++;
    if (missingMethods.length > 0) {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().b[7][0]++;
      cov_2lzn4cbfwr().s[22]++;
      throw new Error(`Invalid tokenManager: missing required methods: ${missingMethods.join(', ')}. TokenManager must implement the full interface.`);
    } else
    /* istanbul ignore next */
    {
      cov_2lzn4cbfwr().b[7][1]++;
    }
    // Production environment extra validation
    cov_2lzn4cbfwr().s[23]++;
    if (process.env.NODE_ENV === 'production') {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().b[8][0]++;
      // Check if this looks like a test mock (suspicious patterns)
      const mockIndicators =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[24]++, [injectedTokenManager.constructor?.name === 'Object', 'mockReturnValue' in injectedTokenManager.getTokenInfo, injectedTokenManager.getTokenInfo.toString().includes('jest')]);
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[25]++;
      if (mockIndicators.some(Boolean)) {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().b[9][0]++;
        cov_2lzn4cbfwr().s[26]++;
        _loggerconfig.appLogger.error('Suspicious tokenManager detected in production', {
          constructorName: injectedTokenManager.constructor?.name,
          hasMockSignature: mockIndicators[1],
          hasJestSignature: mockIndicators[2],
          isProduction: true
        });
        // In production, reject obvious test mocks
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[27]++;
        throw new Error('Invalid tokenManager: test mocks are not allowed in production environment');
      } else
      /* istanbul ignore next */
      {
        cov_2lzn4cbfwr().b[9][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2lzn4cbfwr().b[8][1]++;
    }
    cov_2lzn4cbfwr().s[28]++;
    _loggerconfig.appLogger.debug('TokenManager validation passed', {
      isInjected: true,
      methodCount: requiredMethods.length,
      environment: process.env.NODE_ENV
    });
  } else
  /* istanbul ignore next */
  {
    cov_2lzn4cbfwr().b[3][1]++;
  }
  const [authState, setAuthState] =
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().s[29]++, (0, _react.useState)({
    user: null,
    isAuthenticated: false,
    isLoading: true,
    error: null
  }));
  // Initialize auth state from stored tokens
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[30]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[6]++;
    cov_2lzn4cbfwr().s[31]++;
    const initializeAuth = async () => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[7]++;
      cov_2lzn4cbfwr().s[32]++;
      try {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[33]++;
        _loggerconfig.appLogger.debug('Initializing authentication state');
        const tokenInfo =
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().s[34]++, activeTokenManager.getTokenInfo());
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[35]++;
        if (
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[11][0]++, tokenInfo.isValid) &&
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[11][1]++, tokenInfo.token)) {
          /* istanbul ignore next */
          cov_2lzn4cbfwr().b[10][0]++;
          // Get user info from token
          const userInfo =
          /* istanbul ignore next */
          (cov_2lzn4cbfwr().s[36]++, activeTokenManager.getCurrentUserInfo());
          /* istanbul ignore next */
          cov_2lzn4cbfwr().s[37]++;
          if (
          /* istanbul ignore next */
          (cov_2lzn4cbfwr().b[13][0]++, userInfo?.userId) &&
          /* istanbul ignore next */
          (cov_2lzn4cbfwr().b[13][1]++, userInfo?.email)) {
            /* istanbul ignore next */
            cov_2lzn4cbfwr().b[12][0]++;
            const user =
            /* istanbul ignore next */
            (cov_2lzn4cbfwr().s[38]++, {
              id: userInfo.userId,
              email: userInfo.email,
              name:
              /* istanbul ignore next */
              (cov_2lzn4cbfwr().b[14][0]++, userInfo.email.split('@')[0]) ||
              /* istanbul ignore next */
              (cov_2lzn4cbfwr().b[14][1]++, 'Unknown User'),
              role:
              /* istanbul ignore next */
              (cov_2lzn4cbfwr().b[15][0]++, userInfo.role) ||
              /* istanbul ignore next */
              (cov_2lzn4cbfwr().b[15][1]++, 'user')
            });
            // Update API client with token
            /* istanbul ignore next */
            cov_2lzn4cbfwr().s[39]++;
            activeTokenManager.updateApiClientToken();
            /* istanbul ignore next */
            cov_2lzn4cbfwr().s[40]++;
            setAuthState({
              user,
              isAuthenticated: true,
              isLoading: false,
              error: null
            });
            /* istanbul ignore next */
            cov_2lzn4cbfwr().s[41]++;
            _loggerconfig.appLogger.info('Authentication restored from stored token', {
              userId: user.id,
              email: user.email,
              role: user.role
            });
          } else {
            /* istanbul ignore next */
            cov_2lzn4cbfwr().b[12][1]++;
            cov_2lzn4cbfwr().s[42]++;
            throw new Error('Invalid token payload');
          }
        } else {
          /* istanbul ignore next */
          cov_2lzn4cbfwr().b[10][1]++;
          cov_2lzn4cbfwr().s[43]++;
          // No valid token found
          setAuthState({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            error: null
          });
          /* istanbul ignore next */
          cov_2lzn4cbfwr().s[44]++;
          _loggerconfig.appLogger.debug('No valid authentication token found');
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[45]++;
        _loggerconfig.appLogger.error('Failed to initialize authentication', {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2lzn4cbfwr().b[16][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2lzn4cbfwr().b[16][1]++, 'Unknown error')
        });
        // Clear invalid tokens
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[46]++;
        activeTokenManager.clearTokens();
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[47]++;
        setAuthState({
          user: null,
          isAuthenticated: false,
          isLoading: false,
          error: 'Authentication initialization failed'
        });
      }
    };
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[48]++;
    initializeAuth();
  }, [activeTokenManager]);
  // Refresh token function
  const refreshToken =
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().s[49]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[8]++;
    cov_2lzn4cbfwr().s[50]++;
    try {
      const refreshTokenValue =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[51]++, activeTokenManager.getRefreshToken());
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[52]++;
      if (!refreshTokenValue) {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().b[17][0]++;
        cov_2lzn4cbfwr().s[53]++;
        throw new Error('No refresh token available');
      } else
      /* istanbul ignore next */
      {
        cov_2lzn4cbfwr().b[17][1]++;
      }
      cov_2lzn4cbfwr().s[54]++;
      _loggerconfig.appLogger.debug('Token refresh attempt started');
      // TODO: Replace with actual API call
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[55]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().f[9]++;
        cov_2lzn4cbfwr().s[56]++;
        return setTimeout(resolve, 500);
      });
      // Mock successful refresh
      const mockTokenData =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[57]++, {
        token: 'refreshed.jwt.token',
        refreshToken: refreshTokenValue,
        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
      });
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[58]++;
      activeTokenManager.setTokens(mockTokenData);
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[59]++;
      activeTokenManager.updateApiClientToken();
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[60]++;
      _loggerconfig.appLogger.info('Token refresh successful');
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[61]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[62]++;
      _loggerconfig.appLogger.error('Token refresh failed', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[18][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[18][1]++, 'Unknown error')
      });
      // Clear tokens and update state on refresh failure
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[63]++;
      activeTokenManager.clearTokens();
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[64]++;
      setAuthState({
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null
      });
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[65]++;
      return false;
    }
  }, [activeTokenManager]));
  // Auto-refresh token when needed
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[66]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[10]++;
    cov_2lzn4cbfwr().s[67]++;
    if (!authState.isAuthenticated) {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().b[19][0]++;
      cov_2lzn4cbfwr().s[68]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lzn4cbfwr().b[19][1]++;
    }
    cov_2lzn4cbfwr().s[69]++;
    const checkTokenRefresh = async () => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[11]++;
      cov_2lzn4cbfwr().s[70]++;
      if (activeTokenManager.needsRefresh()) {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().b[20][0]++;
        cov_2lzn4cbfwr().s[71]++;
        _loggerconfig.appLogger.debug('Token needs refresh, attempting refresh');
        /* istanbul ignore next */
        cov_2lzn4cbfwr().s[72]++;
        refreshToken().catch(error => {
          /* istanbul ignore next */
          cov_2lzn4cbfwr().f[12]++;
          cov_2lzn4cbfwr().s[73]++;
          _loggerconfig.appLogger.error('Auto token refresh failed', {
            error
          });
        });
      } else
      /* istanbul ignore next */
      {
        cov_2lzn4cbfwr().b[20][1]++;
      }
    };
    // Check every 5 minutes
    const interval =
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().s[74]++, setInterval(checkTokenRefresh, 5 * 60 * 1000));
    // Check immediately
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[75]++;
    checkTokenRefresh();
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[76]++;
    return () => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[13]++;
      cov_2lzn4cbfwr().s[77]++;
      return clearInterval(interval);
    };
  }, [authState.isAuthenticated, refreshToken, activeTokenManager]);
  // Login function (will be enhanced with TanStack mutation)
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[78]++;
  const login = async email => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[14]++;
    cov_2lzn4cbfwr().s[79]++;
    setAuthState(prev => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[15]++;
      cov_2lzn4cbfwr().s[80]++;
      return {
        ...prev,
        isLoading: true,
        error: null
      };
    });
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[81]++;
    try {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[82]++;
      _loggerconfig.appLogger.info('Login attempt started', {
        email
      });
      // TODO: Replace with actual API call via TanStack mutation
      // For now, mock successful login
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[83]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().f[16]++;
        cov_2lzn4cbfwr().s[84]++;
        return setTimeout(resolve, 1000);
      });
      // Mock successful response
      const mockTokenData =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[85]++, {
        token: 'mock.jwt.token',
        refreshToken: 'mock.refresh.token',
        expiresAt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
      });
      const mockUser =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[86]++, {
        id: 'user-1',
        email,
        name:
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[21][0]++, email.split('@')[0]) ||
        /* istanbul ignore next */
        (cov_2lzn4cbfwr().b[21][1]++, 'Unknown User'),
        role: 'user'
      });
      // Store tokens
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[87]++;
      activeTokenManager.setTokens(mockTokenData);
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[88]++;
      activeTokenManager.updateApiClientToken();
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[89]++;
      setAuthState({
        user: mockUser,
        isAuthenticated: true,
        isLoading: false,
        error: null
      });
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[90]++;
      _loggerconfig.appLogger.info('Login successful', {
        userId: mockUser.id,
        email: mockUser.email
      });
    } catch (error) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().s[91]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().b[22][1]++, 'Login failed'));
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[92]++;
      _loggerconfig.appLogger.error('Login failed', {
        email,
        error: errorMessage
      });
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[93]++;
      setAuthState(prev => {
        /* istanbul ignore next */
        cov_2lzn4cbfwr().f[17]++;
        cov_2lzn4cbfwr().s[94]++;
        return {
          ...prev,
          isLoading: false,
          error: errorMessage
        };
      });
      /* istanbul ignore next */
      cov_2lzn4cbfwr().s[95]++;
      throw error;
    }
  };
  // Logout function
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[96]++;
  const logout = () => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[18]++;
    cov_2lzn4cbfwr().s[97]++;
    _loggerconfig.appLogger.info('Logout started', {
      ...(
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().b[23][0]++, authState.user?.id) &&
      /* istanbul ignore next */
      (cov_2lzn4cbfwr().b[23][1]++, {
        userId: authState.user.id
      }))
    });
    // Clear tokens using active token manager
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[98]++;
    activeTokenManager.clearTokens();
    // Reset auth state
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[99]++;
    setAuthState({
      user: null,
      isAuthenticated: false,
      isLoading: false,
      error: null
    });
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[100]++;
    _loggerconfig.appLogger.info('Logout completed');
  };
  // Clear error
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[101]++;
  const clearError = () => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[19]++;
    cov_2lzn4cbfwr().s[102]++;
    setAuthState(prev => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[20]++;
      cov_2lzn4cbfwr().s[103]++;
      return {
        ...prev,
        error: null
      };
    });
  };
  // Update user profile
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[104]++;
  const updateUser = updates => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[21]++;
    cov_2lzn4cbfwr().s[105]++;
    if (!authState.user) {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().b[24][0]++;
      cov_2lzn4cbfwr().s[106]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2lzn4cbfwr().b[24][1]++;
    }
    const updatedUser =
    /* istanbul ignore next */
    (cov_2lzn4cbfwr().s[107]++, {
      ...authState.user,
      ...updates
    });
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[108]++;
    setAuthState(prev => {
      /* istanbul ignore next */
      cov_2lzn4cbfwr().f[22]++;
      cov_2lzn4cbfwr().s[109]++;
      return {
        ...prev,
        user: updatedUser
      };
    });
    /* istanbul ignore next */
    cov_2lzn4cbfwr().s[110]++;
    _loggerconfig.appLogger.info('User profile updated', {
      userId: updatedUser.id,
      updates
    });
  };
  // Token utilities
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[111]++;
  const getAccessToken = () => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[23]++;
    cov_2lzn4cbfwr().s[112]++;
    return activeTokenManager.getAccessToken();
  };
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[113]++;
  const needsRefresh = () => {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().f[24]++;
    cov_2lzn4cbfwr().s[114]++;
    return activeTokenManager.needsRefresh();
  };
  // Context value
  const contextValue =
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().s[115]++, {
    // State
    ...authState,
    // Actions
    login,
    logout,
    refreshToken,
    clearError,
    updateUser,
    // Utilities
    getAccessToken,
    needsRefresh
  });
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[116]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)(AuthContext.Provider, {
    value: contextValue,
    children: children
  });
}
function useAuth() {
  /* istanbul ignore next */
  cov_2lzn4cbfwr().f[25]++;
  const context =
  /* istanbul ignore next */
  (cov_2lzn4cbfwr().s[117]++, (0, _react.useContext)(AuthContext));
  /* istanbul ignore next */
  cov_2lzn4cbfwr().s[118]++;
  if (context === undefined) {
    /* istanbul ignore next */
    cov_2lzn4cbfwr().b[25][0]++;
    cov_2lzn4cbfwr().s[119]++;
    throw new Error('useAuth must be used within an AuthProvider');
  } else
  /* istanbul ignore next */
  {
    cov_2lzn4cbfwr().b[25][1]++;
  }
  cov_2lzn4cbfwr().s[120]++;
  return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,