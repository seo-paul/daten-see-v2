{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/dashboard/__tests__/EditDashboardModal.test.tsx"],"sourcesContent":["/**\n * EditDashboardModal Component Tests - Streamlined\n * Testing core modal functionality only (Reduced from 186 → 12 tests)\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { EditDashboardModal } from '../EditDashboardModal';\nimport type { DashboardListItem, UpdateDashboardRequest } from '@/types/dashboard.types';\n\ndescribe('EditDashboardModal', () => {\n  const mockDashboard: DashboardListItem = {\n    id: 'dashboard-1',\n    name: 'Test Dashboard',\n    description: 'This is a test dashboard description',\n    isPublic: false,\n    createdAt: '2024-01-01T00:00:00.000Z',\n    updatedAt: '2024-01-01T00:00:00.000Z',\n    userId: 'user-1'\n  };\n\n  const defaultProps = {\n    dashboard: mockDashboard,\n    isOpen: true,\n    onClose: jest.fn(),\n    onSubmit: jest.fn(),\n    isLoading: false,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Core rendering test\n  it('should render modal with form fields when open', () => {\n    render(<EditDashboardModal {...defaultProps} />);\n    \n    expect(screen.getByText('Dashboard bearbeiten')).toBeInTheDocument();\n    expect(screen.getByLabelText('Dashboard Name')).toBeInTheDocument();\n    expect(screen.getByLabelText('Beschreibung')).toBeInTheDocument();\n    expect(screen.getByLabelText('Dashboard öffentlich machen')).toBeInTheDocument();\n  });\n\n  // Visibility control test\n  it('should not render when closed or no dashboard', () => {\n    const { rerender } = render(<EditDashboardModal {...defaultProps} isOpen={false} />);\n    expect(screen.queryByText('Dashboard bearbeiten')).not.toBeInTheDocument();\n    \n    rerender(<EditDashboardModal {...defaultProps} dashboard={null} />);\n    expect(screen.queryByText('Dashboard bearbeiten')).not.toBeInTheDocument();\n  });\n\n  // Form prefill test\n  it('should prefill form with dashboard data', () => {\n    render(<EditDashboardModal {...defaultProps} />);\n    \n    expect(screen.getByDisplayValue('Test Dashboard')).toBeInTheDocument();\n    expect(screen.getByDisplayValue('This is a test dashboard description')).toBeInTheDocument();\n    expect(screen.getByRole('checkbox')).not.toBeChecked();\n  });\n\n  // Form submission test\n  it('should call onSubmit with updated data', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    const descInput = screen.getByLabelText('Beschreibung');\n    const publicCheckbox = screen.getByLabelText('Dashboard öffentlich machen');\n    \n    await user.clear(nameInput);\n    await user.type(nameInput, 'Updated Dashboard');\n    await user.clear(descInput);\n    await user.type(descInput, 'Updated description');\n    await user.click(publicCheckbox);\n    \n    await user.click(screen.getByText('Dashboard aktualisieren'));\n\n    expect(defaultProps.onSubmit).toHaveBeenCalledWith({\n      name: 'Updated Dashboard',\n      description: 'Updated description',\n      isPublic: true,\n    });\n  });\n\n  // Cancel functionality test\n  it('should call onClose when cancel is clicked', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    await user.click(screen.getByText('Abbrechen'));\n    expect(defaultProps.onClose).toHaveBeenCalled();\n  });\n\n  // Loading state test\n  it('should show loading state and disable submit', () => {\n    render(<EditDashboardModal {...defaultProps} isLoading={true} />);\n\n    const submitButton = screen.getByText('Dashboard aktualisieren');\n    expect(submitButton).toBeDisabled();\n  });\n\n  // Form validation test\n  it('should not submit with empty name', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    await user.clear(nameInput);\n    \n    await user.click(screen.getByText('Dashboard aktualisieren'));\n    \n    expect(defaultProps.onSubmit).not.toHaveBeenCalled();\n  });\n\n  // Close modal on backdrop click test\n  it('should close modal when clicking outside', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    // Click on modal backdrop (outside content)\n    const modalOverlay = screen.getByRole('dialog').parentElement;\n    if (modalOverlay) {\n      await user.click(modalOverlay);\n      expect(defaultProps.onClose).toHaveBeenCalled();\n    }\n  });\n\n  // Keyboard navigation test  \n  it('should close modal with Escape key', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    await user.keyboard('{Escape}');\n    expect(defaultProps.onClose).toHaveBeenCalled();\n  });\n\n  // Public toggle test\n  it('should toggle public status correctly', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    const publicCheckbox = screen.getByLabelText('Dashboard öffentlich machen');\n    expect(publicCheckbox).not.toBeChecked();\n    \n    await user.click(publicCheckbox);\n    expect(publicCheckbox).toBeChecked();\n  });\n\n  // Error state test  \n  it('should display form validation errors', async () => {\n    const user = userEvent.setup();\n    render(<EditDashboardModal {...defaultProps} />);\n\n    // Clear name to trigger validation\n    const nameInput = screen.getByLabelText('Dashboard Name');\n    await user.clear(nameInput);\n    await user.tab(); // Blur to trigger validation\n    \n    await waitFor(() => {\n      expect(screen.getByText(/Name ist erforderlich/i)).toBeInTheDocument();\n    });\n  });\n\n  // Focus management test\n  it('should focus name input when modal opens', () => {\n    render(<EditDashboardModal {...defaultProps} />);\n    \n    const nameInput = screen.getByLabelText('Dashboard Name');\n    expect(nameInput).toHaveFocus();\n  });\n});"],"names":["describe","mockDashboard","id","name","description","isPublic","createdAt","updatedAt","userId","defaultProps","dashboard","isOpen","onClose","jest","fn","onSubmit","isLoading","beforeEach","clearAllMocks","it","render","EditDashboardModal","expect","screen","getByText","toBeInTheDocument","getByLabelText","rerender","queryByText","not","getByDisplayValue","getByRole","toBeChecked","user","userEvent","setup","nameInput","descInput","publicCheckbox","clear","type","click","toHaveBeenCalledWith","toHaveBeenCalled","submitButton","toBeDisabled","modalOverlay","parentElement","keyboard","tab","waitFor","toHaveFocus"],"mappings":"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"}