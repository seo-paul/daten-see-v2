b1fefdbffcb93bf8d416b2de7bd22e0e
/**
 * EditDashboardModal Component Tests - Streamlined
 * Testing core modal functionality only (Reduced from 186 → 12 tests)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _EditDashboardModal = require("../EditDashboardModal");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('EditDashboardModal', ()=>{
    const mockDashboard = {
        id: 'dashboard-1',
        name: 'Test Dashboard',
        description: 'This is a test dashboard description',
        isPublic: false,
        createdAt: '2024-01-01T00:00:00.000Z',
        updatedAt: '2024-01-01T00:00:00.000Z',
        userId: 'user-1'
    };
    const defaultProps = {
        dashboard: mockDashboard,
        isOpen: true,
        onClose: jest.fn(),
        onSubmit: jest.fn(),
        isLoading: false
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // Core rendering test
    it('should render modal with form fields when open', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        expect(_react.screen.getByText('Dashboard bearbeiten')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Dashboard Name')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Beschreibung')).toBeInTheDocument();
        expect(_react.screen.getByLabelText('Dashboard öffentlich machen')).toBeInTheDocument();
    });
    // Visibility control test
    it('should not render when closed or no dashboard', ()=>{
        const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps,
            isOpen: false
        }));
        expect(_react.screen.queryByText('Dashboard bearbeiten')).not.toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps,
            dashboard: null
        }));
        expect(_react.screen.queryByText('Dashboard bearbeiten')).not.toBeInTheDocument();
    });
    // Form prefill test
    it('should prefill form with dashboard data', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        expect(_react.screen.getByDisplayValue('Test Dashboard')).toBeInTheDocument();
        expect(_react.screen.getByDisplayValue('This is a test dashboard description')).toBeInTheDocument();
        expect(_react.screen.getByRole('checkbox')).not.toBeChecked();
    });
    // Form submission test
    it('should call onSubmit with updated data', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        const descInput = _react.screen.getByLabelText('Beschreibung');
        const publicCheckbox = _react.screen.getByLabelText('Dashboard öffentlich machen');
        await user.clear(nameInput);
        await user.type(nameInput, 'Updated Dashboard');
        await user.clear(descInput);
        await user.type(descInput, 'Updated description');
        await user.click(publicCheckbox);
        await user.click(_react.screen.getByText('Dashboard aktualisieren'));
        expect(defaultProps.onSubmit).toHaveBeenCalledWith({
            name: 'Updated Dashboard',
            description: 'Updated description',
            isPublic: true
        });
    });
    // Cancel functionality test
    it('should call onClose when cancel is clicked', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        await user.click(_react.screen.getByText('Abbrechen'));
        expect(defaultProps.onClose).toHaveBeenCalled();
    });
    // Loading state test
    it('should show loading state and disable submit', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps,
            isLoading: true
        }));
        const submitButton = _react.screen.getByText('Dashboard aktualisieren');
        expect(submitButton).toBeDisabled();
    });
    // Form validation test
    it('should not submit with empty name', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        await user.clear(nameInput);
        await user.click(_react.screen.getByText('Dashboard aktualisieren'));
        expect(defaultProps.onSubmit).not.toHaveBeenCalled();
    });
    // Close modal on backdrop click test
    it('should close modal when clicking outside', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        // Click on modal backdrop (outside content)
        const modalOverlay = _react.screen.getByRole('dialog').parentElement;
        if (modalOverlay) {
            await user.click(modalOverlay);
            expect(defaultProps.onClose).toHaveBeenCalled();
        }
    });
    // Keyboard navigation test  
    it('should close modal with Escape key', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        await user.keyboard('{Escape}');
        expect(defaultProps.onClose).toHaveBeenCalled();
    });
    // Public toggle test
    it('should toggle public status correctly', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        const publicCheckbox = _react.screen.getByLabelText('Dashboard öffentlich machen');
        expect(publicCheckbox).not.toBeChecked();
        await user.click(publicCheckbox);
        expect(publicCheckbox).toBeChecked();
    });
    // Error state test  
    it('should display form validation errors', async ()=>{
        const user = _userevent.default.setup();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        // Clear name to trigger validation
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        await user.clear(nameInput);
        await user.tab(); // Blur to trigger validation
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Name ist erforderlich/i)).toBeInTheDocument();
        });
    });
    // Focus management test
    it('should focus name input when modal opens', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EditDashboardModal.EditDashboardModal, {
            ...defaultProps
        }));
        const nameInput = _react.screen.getByLabelText('Dashboard Name');
        expect(nameInput).toHaveFocus();
    });
});

//# sourceMappingURL=data:application/json;base64,