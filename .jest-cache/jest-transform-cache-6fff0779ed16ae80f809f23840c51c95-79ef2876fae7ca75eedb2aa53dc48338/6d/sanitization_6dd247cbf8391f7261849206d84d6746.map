{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/lib/utils/sanitization.ts"],"sourcesContent":["/**\n * Input Sanitization Utilities\n * Provides safe input cleaning for user-generated content\n */\n\nimport DOMPurify from 'dompurify';\n\n/**\n * Sanitizes user input by removing all HTML tags and attributes\n * Used for dashboard names, widget titles, and other text inputs\n */\nexport const sanitizeUserInput = (input: string): string => {\n  if (typeof input !== 'string') {\n    return '';\n  }\n\n  // Remove all HTML tags and attributes, keeping only plain text\n  return DOMPurify.sanitize(input, { \n    ALLOWED_TAGS: [], \n    ALLOWED_ATTR: [] \n  }).trim();\n};\n\n/**\n * Sanitizes text content that may contain basic formatting\n * Allows limited HTML tags for widget descriptions\n */\nexport const sanitizeTextContent = (input: string): string => {\n  if (typeof input !== 'string') {\n    return '';\n  }\n\n  // Allow only safe formatting tags\n  return DOMPurify.sanitize(input, {\n    ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'br'],\n    ALLOWED_ATTR: []\n  }).trim();\n};\n\n/**\n * Validates and sanitizes dashboard/widget names\n * Ensures names are safe and within length limits\n */\nexport const sanitizeName = (name: string, maxLength: number = 100): string => {\n  const sanitized = sanitizeUserInput(name);\n  \n  // Ensure name is not empty after sanitization\n  if (!sanitized) {\n    throw new Error('Name cannot be empty');\n  }\n\n  // Check length limit\n  if (sanitized.length > maxLength) {\n    throw new Error(`Name cannot exceed ${maxLength} characters`);\n  }\n\n  return sanitized;\n};\n\n/**\n * Sanitizes URL-safe strings (for slugs, IDs, etc.)\n * Removes special characters that could cause routing issues\n */\nexport const sanitizeUrlSafe = (input: string): string => {\n  return sanitizeUserInput(input)\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Only allow letters, numbers, spaces, hyphens\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens\n};"],"names":["sanitizeName","sanitizeTextContent","sanitizeUrlSafe","sanitizeUserInput","input","DOMPurify","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","trim","name","maxLength","sanitized","Error","length","toLowerCase","replace"],"mappings":"AAAA;;;CAGC;;;;;;;;;;;QAwCYA;eAAAA;;QAhBAC;eAAAA;;QAoCAC;eAAAA;;QApDAC;eAAAA;;;kEANS;;;;;;AAMf,MAAMA,oBAAoB,CAACC;IAChC,IAAI,OAAOA,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,+DAA+D;IAC/D,OAAOC,kBAAS,CAACC,QAAQ,CAACF,OAAO;QAC/BG,cAAc,EAAE;QAChBC,cAAc,EAAE;IAClB,GAAGC,IAAI;AACT;AAMO,MAAMR,sBAAsB,CAACG;IAClC,IAAI,OAAOA,UAAU,UAAU;QAC7B,OAAO;IACT;IAEA,kCAAkC;IAClC,OAAOC,kBAAS,CAACC,QAAQ,CAACF,OAAO;QAC/BG,cAAc;YAAC;YAAK;YAAK;YAAM;YAAU;SAAK;QAC9CC,cAAc,EAAE;IAClB,GAAGC,IAAI;AACT;AAMO,MAAMT,eAAe,CAACU,MAAcC,YAAoB,GAAG;IAChE,MAAMC,YAAYT,kBAAkBO;IAEpC,8CAA8C;IAC9C,IAAI,CAACE,WAAW;QACd,MAAM,IAAIC,MAAM;IAClB;IAEA,qBAAqB;IACrB,IAAID,UAAUE,MAAM,GAAGH,WAAW;QAChC,MAAM,IAAIE,MAAM,CAAC,mBAAmB,EAAEF,UAAU,WAAW,CAAC;IAC9D;IAEA,OAAOC;AACT;AAMO,MAAMV,kBAAkB,CAACE;IAC9B,OAAOD,kBAAkBC,OACtBW,WAAW,GACXC,OAAO,CAAC,iBAAiB,IAAI,+CAA+C;KAC5EA,OAAO,CAAC,QAAQ,KAAK,8BAA8B;KACnDA,OAAO,CAAC,OAAO,KAAK,uCAAuC;KAC3DA,OAAO,CAAC,UAAU,KAAK,kCAAkC;AAC9D"}