{"version":3,"names":["ApiErrorSchema","cov_z0t7xwbja","f","s","ApiResponseSchema","CreateDashboardRequestSchema","CreateDashboardResponseSchema","CreateWidgetRequestSchema","DashboardDetailResponseSchema","DashboardListResponseSchema","LoginRequestSchema","LoginResponseSchema","PaginationSchema","RefreshTokenRequestSchema","RefreshTokenResponseSchema","UpdateDashboardRequestSchema","UpdateUserProfileRequestSchema","UpdateWidgetRequestSchema","UserProfileResponseSchema","_zod","z","object","success","boolean","message","string","optional","timestamp","datetime","literal","error","code","details","record","unknown","page","number","int","positive","limit","total","nonnegative","totalPages","hasNext","hasPrev","extend","data","dashboards","array","id","name","description","isPublic","updatedAt","widgetCount","pagination","dashboard","createdAt","widgets","type","enum","title","position","x","y","w","h","config","settings","backgroundColor","gridSize","autoRefresh","refreshInterval","min","max","default","partial","dashboardId","email","password","user","role","avatar","url","token","refreshToken","expiresAt"],"sources":["/Users/zweigen/Sites/daten-see-v2/src/types/api.types.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Base API Response Schema\nexport const ApiResponseSchema = z.object({\n  success: z.boolean(),\n  message: z.string().optional(),\n  timestamp: z.string().datetime(),\n});\n\n// Error Response Schema\nexport const ApiErrorSchema = z.object({\n  success: z.literal(false),\n  error: z.object({\n    code: z.string(),\n    message: z.string(),\n    details: z.record(z.unknown()).optional(),\n  }),\n  timestamp: z.string().datetime(),\n});\n\n// Pagination Schema\nexport const PaginationSchema = z.object({\n  page: z.number().int().positive(),\n  limit: z.number().int().positive(),\n  total: z.number().int().nonnegative(),\n  totalPages: z.number().int().nonnegative(),\n  hasNext: z.boolean(),\n  hasPrev: z.boolean(),\n});\n\n// Dashboard API Types\nexport const DashboardListResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    dashboards: z.array(z.object({\n      id: z.string(),\n      name: z.string(),\n      description: z.string(),\n      isPublic: z.boolean(),\n      updatedAt: z.string().datetime(),\n      widgetCount: z.number().int().nonnegative(),\n    })),\n    pagination: PaginationSchema.optional(),\n  }),\n});\n\nexport const DashboardDetailResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    dashboard: z.object({\n      id: z.string(),\n      name: z.string(),\n      description: z.string(),\n      isPublic: z.boolean(),\n      createdAt: z.string().datetime(),\n      updatedAt: z.string().datetime(),\n      widgets: z.array(z.object({\n        id: z.string(),\n        type: z.enum(['chart', 'kpi', 'text']),\n        title: z.string(),\n        position: z.object({\n          x: z.number(),\n          y: z.number(),\n          w: z.number(),\n          h: z.number(),\n        }),\n        config: z.record(z.unknown()),\n        data: z.unknown(),\n      })),\n      settings: z.object({\n        backgroundColor: z.string(),\n        gridSize: z.number().int().positive(),\n        autoRefresh: z.boolean(),\n        refreshInterval: z.number().int().positive(),\n      }),\n    }),\n  }),\n});\n\nexport const CreateDashboardRequestSchema = z.object({\n  name: z.string().min(1).max(100),\n  description: z.string().max(500),\n  isPublic: z.boolean().default(false),\n  settings: z.object({\n    backgroundColor: z.string().default('#f8fafc'),\n    gridSize: z.number().int().positive().default(24),\n    autoRefresh: z.boolean().default(true),\n    refreshInterval: z.number().int().positive().default(300),\n  }).optional(),\n});\n\nexport const UpdateDashboardRequestSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1).max(100).optional(),\n  description: z.string().max(500).optional(),\n  isPublic: z.boolean().optional(),\n  settings: z.object({\n    backgroundColor: z.string(),\n    gridSize: z.number().int().positive(),\n    autoRefresh: z.boolean(),\n    refreshInterval: z.number().int().positive(),\n  }).partial().optional(),\n});\n\nexport const CreateDashboardResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    dashboardId: z.string(),\n  }),\n});\n\n// Authentication API Types\nexport const LoginRequestSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const LoginResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    user: z.object({\n      id: z.string(),\n      email: z.string().email(),\n      name: z.string(),\n      role: z.enum(['user', 'admin']),\n      avatar: z.string().url().optional(),\n    }),\n    token: z.string(),\n    refreshToken: z.string(),\n    expiresAt: z.string().datetime(),\n  }),\n});\n\nexport const RefreshTokenRequestSchema = z.object({\n  refreshToken: z.string(),\n});\n\nexport const RefreshTokenResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    token: z.string(),\n    expiresAt: z.string().datetime(),\n  }),\n});\n\n// User API Types\nexport const UserProfileResponseSchema = ApiResponseSchema.extend({\n  data: z.object({\n    user: z.object({\n      id: z.string(),\n      email: z.string().email(),\n      name: z.string(),\n      role: z.enum(['user', 'admin']),\n      avatar: z.string().url().optional(),\n      createdAt: z.string().datetime(),\n      updatedAt: z.string().datetime(),\n    }),\n  }),\n});\n\nexport const UpdateUserProfileRequestSchema = z.object({\n  name: z.string().min(1).max(100).optional(),\n  avatar: z.string().url().optional(),\n});\n\n// Widget API Types\nexport const CreateWidgetRequestSchema = z.object({\n  dashboardId: z.string(),\n  type: z.enum(['chart', 'kpi', 'text']),\n  title: z.string().min(1).max(100),\n  position: z.object({\n    x: z.number().int().nonnegative(),\n    y: z.number().int().nonnegative(),\n    w: z.number().int().positive(),\n    h: z.number().int().positive(),\n  }),\n  config: z.record(z.unknown()).default({}),\n});\n\nexport const UpdateWidgetRequestSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1).max(100).optional(),\n  position: z.object({\n    x: z.number().int().nonnegative(),\n    y: z.number().int().nonnegative(),\n    w: z.number().int().positive(),\n    h: z.number().int().positive(),\n  }).optional(),\n  config: z.record(z.unknown()).optional(),\n});\n\n// Export TypeScript types\nexport type ApiResponse = z.infer<typeof ApiResponseSchema>;\nexport type ApiError = z.infer<typeof ApiErrorSchema>;\nexport type Pagination = z.infer<typeof PaginationSchema>;\n\nexport type DashboardListResponse = z.infer<typeof DashboardListResponseSchema>;\nexport type DashboardDetailResponse = z.infer<typeof DashboardDetailResponseSchema>;\nexport type CreateDashboardRequest = z.infer<typeof CreateDashboardRequestSchema>;\nexport type UpdateDashboardRequest = z.infer<typeof UpdateDashboardRequestSchema>;\nexport type CreateDashboardResponse = z.infer<typeof CreateDashboardResponseSchema>;\n\nexport type LoginRequest = z.infer<typeof LoginRequestSchema>;\nexport type LoginResponse = z.infer<typeof LoginResponseSchema>;\nexport type RefreshTokenRequest = z.infer<typeof RefreshTokenRequestSchema>;\nexport type RefreshTokenResponse = z.infer<typeof RefreshTokenResponseSchema>;\n\nexport type UserProfileResponse = z.infer<typeof UserProfileResponseSchema>;\nexport type UpdateUserProfileRequest = z.infer<typeof UpdateUserProfileRequestSchema>;\n\nexport type CreateWidgetRequest = z.infer<typeof CreateWidgetRequestSchema>;\nexport type UpdateWidgetRequest = z.infer<typeof UpdateWidgetRequestSchema>;"],"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","ignoreList":[]}