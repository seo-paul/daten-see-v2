bf071ab8896073881212c077ce290a68
/**
 * LoginForm Component Tests - Simplified
 * Testing actual LoginForm functionality only
 */ "use strict";
// Mock Sentry to avoid errors in tests
jest.mock('@sentry/nextjs', ()=>({
        addBreadcrumb: jest.fn(),
        captureException: jest.fn(),
        captureMessage: jest.fn(),
        setTag: jest.fn(),
        setContext: jest.fn(),
        withScope: jest.fn((callback)=>callback({
                setTag: jest.fn(),
                setContext: jest.fn()
            })),
        getCurrentScope: jest.fn(()=>({
                setTag: jest.fn(),
                setContext: jest.fn()
            }))
    }));
// Mock logger to avoid console output in tests
jest.mock('@/lib/monitoring/logger.config', ()=>({
        appLogger: {
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn()
        }
    }));
// Mock the entire module to avoid property redefinition issues
jest.mock('@/hooks/auth/useAuthMutations', ()=>({
        useLoginMutation: jest.fn(),
        useMockLoginMutation: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _reactquery = require("@tanstack/react-query");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
const _AuthContext = require("../../../contexts/AuthContext");
const _useAuthMutations = /*#__PURE__*/ _interop_require_wildcard(require("../../../hooks/auth/useAuthMutations"));
const _LoginForm = require("../LoginForm");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock the auth mutations hook
const mockMutateAsync = jest.fn();
const mockMutation = {
    mutateAsync: mockMutateAsync,
    isPending: false,
    error: null,
    isError: false,
    isSuccess: false,
    reset: jest.fn()
};
describe('LoginForm', ()=>{
    let queryClient;
    const renderLoginForm = (props = {})=>{
        queryClient = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false
                },
                mutations: {
                    retry: false
                }
            }
        });
        return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {
                    ...props
                })
            })
        }));
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup the mock return value for useMockLoginMutation (which is used in LoginForm)
        _useAuthMutations.useMockLoginMutation.mockReturnValue(mockMutation);
        mockMutateAsync.mockResolvedValue({
            user: {
                id: '1',
                email: 'test@example.com',
                name: 'Test User'
            },
            tokens: {
                accessToken: 'token',
                refreshToken: 'refresh'
            }
        });
    });
    // Core rendering test
    it('should render login form with email and password fields', ()=>{
        renderLoginForm();
        expect(_react.screen.getByLabelText(/e-mail/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/passwort/i)).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: /anmelden/i
        })).toBeInTheDocument();
    });
    // Successful login test
    it('should handle successful login submission', async ()=>{
        const user = _userevent.default.setup();
        renderLoginForm();
        const emailInput = _react.screen.getByLabelText(/e-mail/i);
        const passwordInput = _react.screen.getByLabelText(/passwort/i);
        const submitButton = _react.screen.getByRole('button', {
            name: /anmelden/i
        });
        await user.type(emailInput, 'test@example.com');
        await user.type(passwordInput, 'password123');
        await user.click(submitButton);
        expect(mockMutateAsync).toHaveBeenCalledWith({
            email: 'test@example.com',
            password: 'password123'
        });
    });
    // Password visibility toggle test
    it('should toggle password visibility', async ()=>{
        const user = _userevent.default.setup();
        renderLoginForm();
        const passwordInput = _react.screen.getByLabelText(/passwort/i);
        const toggleButtons = _react.screen.getAllByRole('button');
        const toggleButton = toggleButtons.find((btn)=>btn !== _react.screen.getByRole('button', {
                name: /anmelden/i
            }));
        expect(passwordInput).toHaveAttribute('type', 'password');
        if (toggleButton) {
            await user.click(toggleButton);
            expect(passwordInput).toHaveAttribute('type', 'text');
            await user.click(toggleButton);
            expect(passwordInput).toHaveAttribute('type', 'password');
        }
    });
});

//# sourceMappingURL=data:application/json;base64,