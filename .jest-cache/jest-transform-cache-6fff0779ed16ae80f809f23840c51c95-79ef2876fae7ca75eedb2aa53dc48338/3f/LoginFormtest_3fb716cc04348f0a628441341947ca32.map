{"version":3,"sources":["/Users/zweigen/Sites/daten-see-v2/src/components/auth/__tests__/LoginForm.test.tsx"],"sourcesContent":["/**\n * LoginForm Component Tests - Simplified\n * Testing actual LoginForm functionality only\n */\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport * as authMutations from '@/hooks/auth/useAuthMutations';\n\nimport { LoginForm } from '../LoginForm';\n\n// Mock Sentry to avoid errors in tests\njest.mock('@sentry/nextjs', () => ({\n  addBreadcrumb: jest.fn(),\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  setTag: jest.fn(),\n  setContext: jest.fn(),\n  withScope: jest.fn((callback) => callback({ setTag: jest.fn(), setContext: jest.fn() })),\n  getCurrentScope: jest.fn(() => ({ setTag: jest.fn(), setContext: jest.fn() })),\n}));\n\n// Mock logger to avoid console output in tests\njest.mock('@/lib/monitoring/logger.config', () => ({\n  appLogger: {\n    debug: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n  },\n}));\n\n// Mock the auth mutations hook\nconst mockMutateAsync = jest.fn();\nconst mockMutation = {\n  mutateAsync: mockMutateAsync,\n  isPending: false,\n  error: null,\n  isError: false,\n  isSuccess: false,\n  reset: jest.fn(),\n};\n\n// Mock the entire module to avoid property redefinition issues\njest.mock('@/hooks/auth/useAuthMutations', () => ({\n  useLoginMutation: jest.fn(),\n  useMockLoginMutation: jest.fn(),\n}));\n\ndescribe('LoginForm', (): void => {\n  let queryClient: QueryClient;\n\n  const renderLoginForm = (props = {}): any => {\n    queryClient = new QueryClient({\n      defaultOptions: { queries: { retry: false }, mutations: { retry: false } },\n    });\n\n    return render(\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <LoginForm {...props} />\n        </AuthProvider>\n      </QueryClientProvider>\n    );\n  };\n\n  beforeEach((): void => {\n    jest.clearAllMocks();\n    \n    // Setup the mock return value for useMockLoginMutation (which is used in LoginForm)\n    (authMutations.useMockLoginMutation as jest.Mock).mockReturnValue(mockMutation);\n    \n    mockMutateAsync.mockResolvedValue({\n      user: { id: '1', email: 'test@example.com', name: 'Test User' },\n      tokens: { accessToken: 'token', refreshToken: 'refresh' }\n    });\n  });\n\n  // Core rendering test\n  it('should render login form with email and password fields', (): void => {\n    renderLoginForm();\n    \n    expect(screen.getByLabelText(/e-mail/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/passwort/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /anmelden/i })).toBeInTheDocument();\n  });\n\n  // Successful login test\n  it('should handle successful login submission', async (): Promise<void> => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const emailInput = screen.getByLabelText(/e-mail/i);\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    const submitButton = screen.getByRole('button', { name: /anmelden/i });\n\n    await user.type(emailInput, 'test@example.com');\n    await user.type(passwordInput, 'password123');\n    await user.click(submitButton);\n\n    expect(mockMutateAsync).toHaveBeenCalledWith({\n      email: 'test@example.com',\n      password: 'password123',\n    });\n  });\n\n  // Password visibility toggle test\n  it('should toggle password visibility', async (): Promise<void> => {\n    const user = userEvent.setup();\n    renderLoginForm();\n\n    const passwordInput = screen.getByLabelText(/passwort/i);\n    const toggleButtons = screen.getAllByRole('button');\n    const toggleButton = toggleButtons.find(btn => btn !== screen.getByRole('button', { name: /anmelden/i }));\n\n    expect(passwordInput).toHaveAttribute('type', 'password');\n    \n    if (toggleButton) {\n      await user.click(toggleButton);\n      expect(passwordInput).toHaveAttribute('type', 'text');\n      \n      await user.click(toggleButton);\n      expect(passwordInput).toHaveAttribute('type', 'password');\n    }\n  });\n});"],"names":["jest","mock","addBreadcrumb","fn","captureException","captureMessage","setTag","setContext","withScope","callback","getCurrentScope","appLogger","debug","info","warn","error","useLoginMutation","useMockLoginMutation","mockMutateAsync","mockMutation","mutateAsync","isPending","isError","isSuccess","reset","describe","queryClient","renderLoginForm","props","QueryClient","defaultOptions","queries","retry","mutations","render","QueryClientProvider","client","AuthProvider","LoginForm","beforeEach","clearAllMocks","authMutations","mockReturnValue","mockResolvedValue","user","id","email","name","tokens","accessToken","refreshToken","it","expect","screen","getByLabelText","toBeInTheDocument","getByRole","userEvent","setup","emailInput","passwordInput","submitButton","type","click","toHaveBeenCalledWith","password","toggleButtons","getAllByRole","toggleButton","find","btn","toHaveAttribute"],"mappings":"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"}